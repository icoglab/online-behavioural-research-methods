[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Online Behavioural Research Methods: Programming with jsPsych",
    "section": "",
    "text": "Introduction\nThis textbook is designed to teach you how to create online behavioural experiments using modern web technologies, with a particular focus on jsPsych, a JavaScript library specifically built for psychological research. Originally developed for my Research in Cognitive Psychology course at the University of Manitoba, this book provides a comprehensive introduction to programming online studies that can be used by anyone interested in conducting behavioural research on the web.\nWhile the examples and labs throughout this book draw primarily from cognitive psychology research, reflecting my background as a cognitive psychologist, the principles and techniques you’ll learn are broadly applicable to any field conducting online behavioural studies.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#book-structure-and-learning-path",
    "href": "index.html#book-structure-and-learning-path",
    "title": "Online Behavioural Research Methods: Programming with jsPsych",
    "section": "Book Structure and Learning Path",
    "text": "Book Structure and Learning Path\nThe book is structured to take you from complete beginner to competent online experiment programmer through a carefully scaffolded progression. You’ll start by learning the fundamental web technologies that power all online experiments: HTML for structure, CSS for styling, and JavaScript for interactivity. These foundational skills are essential because jsPsych, like all web-based experiment platforms, builds upon these core technologies.\nOnce you have a solid grasp of the fundamentals, you’ll dive into jsPsych itself, learning how this specialized library can dramatically simplify the process of creating psychological experiments. You’ll discover how to present stimuli, collect responses, measure precise timing data, and manage the flow of your experiments through jsPsych’s intuitive plugin system and timeline structure.\nAs you progress through the units, you’ll tackle increasingly sophisticated experimental designs. You’ll learn to incorporate multimedia elements like images, audio, and video into your studies. You’ll master techniques for creating dynamic, responsive experiments that adapt based on participant responses. You’ll explore methods for properly saving and organizing your data, implementing randomization strategies, and even adding gamification elements to enhance participant engagement.\nEach unit combines theoretical instruction with hands-on laboratory exercises that reinforce your learning through practical application. These labs guide you through creating experiments that investigate classic phenomena in cognitive psychology, from memory and attention to decision-making and face perception. By working through these exercises, you’ll not only learn programming techniques but also gain insights into experimental design principles that are important for conducting rigorous behavioural research.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "Online Behavioural Research Methods: Programming with jsPsych",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nBy the end of this book, you’ll have the skills to design, implement, and deploy sophisticated online behavioural experiments. More importantly, you’ll understand the underlying principles that will allow you to adapt these techniques to your own research questions and continue learning as web technologies evolve. Whether you’re planning to conduct your own research, collaborate with other investigators, or simply want to understand how online studies work, this book will provide you with a solid foundation in the art and science of web-based behavioural research.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Online Behavioural Research Methods: Programming with jsPsych",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis textbook is designed to be accessible to complete beginners with no prior programming experience. The only requirements are a computer and a modern web browser (Chrome, Firefox, Safari, or Edge)\nNo Software Installation Required: Everything we’ll do happens in your web browser and all the files can be edited with any text editor. You won’t need to download or install any programming software, text editors, or development tools.\njsPsych V8: This textbook uses version 8 of jsPsych. When navigating to the documentation, please make sure you are using version 8: https://www.jspsych.org/v8/\nAcademic Background: While the examples focus on cognitive psychology, no specific psychology background is required. The book explains psychological concepts as they arise, making it suitable for students from any discipline interested in online behavioral research.\nTime Commitment: This book is designed around a 13-week course structure, with each chapter and associated lab tutorial intended to be completed within one week. Most students should expect to spend 3-5 hours per week on reading, exercises, and lab work, though this may vary depending on your familiarity with the concepts and your learning pace.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#a-note-about-this-textbook",
    "href": "index.html#a-note-about-this-textbook",
    "title": "Online Behavioural Research Methods: Programming with jsPsych",
    "section": "A Note About This Textbook",
    "text": "A Note About This Textbook\nThis is the first edition of this textbook, developed specifically for hands-on learning in an evolving field. As with any first edition, you may (probably will..) encounter errors, unclear explanations, or technical issues. This is a work in progress!\nIf you encounter problems:\nTechnical issues with code examples: Check that you’ve followed all steps exactly as written, then try refreshing your browser or waiting a few minutes (GitHub Pages can take time to update)\nErrors or unclear content: Please report these by visiting the textbook’s GitHub repository at https://github.com/icoglab/online-behavioural-research-methods and clicking on the “Issues” tab to log a new issue\nSuggestions for improvement: We welcome feedback about content that could be explained more clearly or additional topics that would be helpful\nYour feedback helps improve this resource for future students. Don’t hesitate to report even minor issues like typos or broken links. Contributing to the improvement of educational resources is part of learning to work collaboratively in the open-source community that powers much of modern web development.\nVersion Information: This textbook will be updated regularly based on student feedback and changes in web technologies. Check the repository for the most current version and any important updates or corrections.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "01-html.html",
    "href": "01-html.html",
    "title": "1  HTML",
    "section": "",
    "text": "1.1 How Websites Work: The Basics\nThink of a website like a digital magazine. Just as a magazine is made up of text, images, and layout instructions, a website consists of files that tell your browser what to display and how to display it.\nEvery website you visit is built from simple text files that contain instructions written in special languages:\nHTML (HyperText Markup Language) is like the skeleton of a webpage. It defines the structure and content like headings, paragraphs, buttons, and forms.\nCSS (Cascading Style Sheets) is like the clothing and makeup. It controls how things look, including colors, fonts, spacing, and layout.\nJavaScript is like the nervous system. It makes things interactive and responsive to user actions.\nThe remarkable thing is that these are all just plain text files, no different from a document you might write in Notepad. The “magic” happens when your web browser reads these text files and interprets the instructions to create the visual, interactive experience you see.\nWhen you create an online behavioural study, here’s the simplified journey your experiment takes to reach participants:\nFirst, you create your experiment files using HTML for structure, CSS for appearance, and JavaScript for interactivity. These files are then stored on a web server, which is essentially a computer that’s always connected to the internet, ready to share your files.\nWhen participants visit your experiment’s web address (URL), their browser requests your files from the server. The server sends your files to their browser instantaneously, like mailing a package but much faster. Their browser then interprets your files and transforms your text instructions into the interactive experiment they see. Finally, when participants respond, their answers are sent back to be stored for your analysis.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#introduction-to-html",
    "href": "01-html.html#introduction-to-html",
    "title": "1  HTML",
    "section": "1.2 Introduction to HTML",
    "text": "1.2 Introduction to HTML\nAll the web experiments you might encounter are simply websites, built using the same building blocks that all websites are made with. To start, we’re going to be using the language HTML, or hypertext markup language.\nHTML isn’t a programming language since it doesn’t actually do anything. It doesn’t, for example, perform calculations, make decisions, or respond to user input. Think of HTML like the blueprint or skeleton of a house: it defines the structure and layout, but it doesn’t make the lights turn on or the water flow.\nMore specifically, HTML is a markup language. Just like how you might use a highlighter to mark up a printed document like underlining important parts, circling key terms, or adding notes in the margin, HTML “marks up” text to give it meaning and structure. It tells the browser “this text is a heading,” “this text is a paragraph,” “this text is a link,” and so on.\nYou can think of HTML as providing the content and structure of a webpage. It contains the actual text, images, and media that appear on the page. It defines how that content is organized through headings, paragraphs, lists, and other elements. It establishes the basic layout and hierarchy of information that users will see.\nHTML creates static content, meaning it doesn’t change or respond on its own. It’s like a printed page—the words and pictures stay exactly where you put them. Later, we’ll add CSS to make it look better and JavaScript to make it interactive, but HTML provides the foundation that everything else builds upon.\nIn psychology experiments, HTML creates the basic structure: the instructions participants read, the buttons they click, the areas where stimuli appear, and the forms where they enter responses.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#html-tags",
    "href": "01-html.html#html-tags",
    "title": "1  HTML",
    "section": "1.3 HTML Tags",
    "text": "1.3 HTML Tags\nHTML’s base building block is the tag. A tag is a building block. It describes what’s inside it. Every tag has an opening and a closing tag (some tags open and close at the same point.) I think the easiest way to learn it is just to show a bunch of examples.\nYou can see the &lt;h1&gt; and the &lt;/h1&gt; surrounding the text “This is the title to my document”. This is how HTML operates. You can have an opening tag which has information or more tags inside of it. In this case we have an h1 tag which is a heading tag: it’s used for the biggest title on the page, typically a title. If you rendered that using the browser, it looks like:\n\nHTMLResult\n\n\n&lt;h1&gt;This is the title to my document&lt;/h1&gt;\n\n\n\n\n\n\nIt’s bigger and bolder because that’s what browsers do with h1s, it makes them look important on the page. However it does more than that too. Browsers aren’t the only thing reading websites. Blind and people who can’t see well will use screen readers to read web pages out loud to them; it uses things like headers to understand what information is important to read to the users. It’s also how Google and Bing will understand the important details of your website. In other words, it’s important which type of tag you use. More than just the visual aesthetic is using those tags.\nA tag, whether it’s opening or closing, is surrounded by angle brackets, &lt; and &gt;. Closing tags always have a slash, /, after the opening angle bracket, so it looks like &lt;/h1&gt;. There are things called “self-closing tags” or “void tags” that open and close themselves. These will look like this: &lt;input /&gt; (I’ll explain in a sec what inputs are.) That slash at the end means it is self-closing. To make it more confusing, that last slash is optional, so &lt;input&gt; (with no closing tag ever) is valid too since input tags are always self-closing.\nTags are also opened and closed in a specific order too. The most recently opened tag must be the next closed tag. For example, if I have an h1 instead of a div, the h1 must be closed first.\n&lt;div&gt;\n  &lt;h1&gt;Hi&lt;/h1&gt;\n&lt;/div&gt;\nThe above is correct.\n&lt;div&gt;\n  &lt;h1&gt;\n    Hi\n  &lt;/div&gt;\n&lt;/h1&gt;\nThe above is incorrect. I can’t close the div before I close the h1 since the h1 was the last one I opened.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#comments-vs.-code",
    "href": "01-html.html#comments-vs.-code",
    "title": "1  HTML",
    "section": "1.4 Comments vs. Code",
    "text": "1.4 Comments vs. Code\nOne important note before going through the essential HTML tags: All programming languages allow us to write ‘comments’ inside our code. These comments are ignored when the code is run. It’s a way for us to make notes to ourselves or future readers of our code to help document our code as we write it. Each language has it’s own way of marking something as a comment. In HTML, the way you mark some text as a comment (and not code) is by putting the text inside a &lt;!-- and --&gt;.\n&lt;!-- This is a comment that will be ignored by the browser --&gt;\n&lt;h1&gt;This is HTML code that the browser will run&lt;/h1&gt;\n\n&lt;!-- \nComments \ncan \nbe \nmultiple \nlines\n--&gt;\nCommenting is also a useful way of removing some code without deleting it. Let’s say you want to see what the page looks like without some HTML, you can ‘comment it out’ like this:\n&lt;!-- This is a comment that will be ignored by the browser --&gt;\n&lt;h1&gt;This is HTML code that the browser will run&lt;/h1&gt;\n\n&lt;!-- \n&lt;p&gt;This HTML will be ignored because it's inside a comment&lt;/p&gt;\n--&gt;\nOk, now that we have that settled, let’s explore some of the essential tag types that we will be using to make our experiments.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#essential-tags",
    "href": "01-html.html#essential-tags",
    "title": "1  HTML",
    "section": "1.5 Essential Tags",
    "text": "1.5 Essential Tags\n\n1.5.1 Headings\n“h1”, “h2”, “h3”, “h4”, “h5”, and “h6” – Headings. These are the six levels of headings and subheadings you can have. You can see up top of this page we have “HTML” which is an h1 and then below that we have “Types of Tags” which is an h2. An h2 is a subheading to an h1. An h3 is a subheading to a h2. Some schools of thought say each page should only have one h1. I’m of the opinion that just use these as it feels appropriate to. Like formatting a Microsoft Word document, there’s no “correct” way to do it, just different ways that make more or less sense.\n\nHTMLResult\n\n\n&lt;h1&gt;This is an h1!&lt;/h1&gt;\n&lt;h2&gt;This is an h2!&lt;/h2&gt;\n&lt;h3&gt;This is an h3!&lt;/h3&gt;\n&lt;h4&gt;This is an h4!&lt;/h4&gt;\n&lt;h5&gt;This is an h5!&lt;/h5&gt;\n&lt;h6&gt;This is an h6!&lt;/h6&gt;\n\n\n\n\n\n\n\n\n1.5.2 Paragraphs\n“p” – Paragraph. You’ll put a paragraph of text together inside of a “p” tag. Only text goes in “p” tags. Each one of these paragraphs is a “p” tag.\n\nHTMLResult\n\n\n&lt;p&gt;\n  Lorem ipsum dolor sit amet consectetur adipisicing elit. Incidunt modi est\n  sapiente in optio quia inventore quis maxime ullam tenetur?\n&lt;/p&gt;\n&lt;p&gt;\n  Maxime quibusdam, dolorum quaerat ducimus inventore sunt pariatur et dolore\n  ipsam. Distinctio eum nobis officiis quam quasi exercitationem eaque?\n&lt;/p&gt;\n\n\n\n\n\n\n\n\n1.5.3 Div\n“div” – Short for division. A div is sort of like a cardboard box. It’s not really anything by itself; it’s more defined by what’s in it. It’s a generic container tag for grouping together other things. You’ll use a lot of divs. Very useful with CSS. In general, you want to group together “like” things into a containing tag (like a div) to keep them together. If you have a website with a list of blog posts that each have paragraphs, titles, images, etc. you’ll group each post together in a div or other container-type tag typically.\nBelow are a few examples of using divs for organization. I’ve colored in the div backgrounds so that we can see then. You don’t need to pay attention to the styling, as we haven’t learned that part yet. But do pay attention to how divs provide structure\n\n1.5.3.1 Simple Div Example\nFirst, here is a simple div that creates an empty container.\n\nHTMLResult\n\n\n&lt;div style=\"width: 100px; height: 100px; background-color: red;\"&gt;&lt;/div&gt;\n\n\n\n\n\n\n\n\n1.5.3.2 Nested Containers for Organization\nDivs become powerful when you nest them inside each other to create organized layouts. Think of it like organizing items in boxes within boxes:\n\nHTMLResult\n\n\n&lt;div style=\"background-color: lightgray; padding: 20px;\"&gt;\n  &lt;div style=\"background-color: lightblue; height: 60px; margin-bottom: 10px;\"&gt;&lt;/div&gt;\n  &lt;div style=\"background-color: lightyellow; height: 80px; margin-bottom: 10px;\"&gt;&lt;/div&gt;\n  &lt;div style=\"background-color: lightgreen; height: 40px;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n1.5.3.3 Side-by-Side Layout with Divs\nDivs are essential for creating layouts where content appears side-by-side:\n\nHTMLResult\n\n\n&lt;div style=\"background-color: lightgray; padding: 20px; display: flex; gap: 15px;\"&gt;\n  &lt;div style=\"background-color: lightcoral; width: 150px; height: 120px;\"&gt;&lt;/div&gt;\n  &lt;div style=\"background-color: lightsteelblue; width: 150px; height: 120px;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n1.5.3.4 Complex Nested Layout\nYou can combine vertical and horizontal organization by nesting divs in different ways:\n\nHTMLResult\n\n\n&lt;div style=\"background-color: #f0f0f0; padding: 15px;\"&gt;\n  &lt;div style=\"background-color: #ffcccb; height: 50px; margin-bottom: 10px;\"&gt;&lt;/div&gt;\n  &lt;div style=\"display: flex; gap: 10px; margin-bottom: 10px;\"&gt;\n    &lt;div style=\"background-color: #add8e6; width: 100px; height: 80px;\"&gt;&lt;/div&gt;\n    &lt;div style=\"background-color: #90ee90; flex: 1; height: 80px;\"&gt;&lt;/div&gt;\n    &lt;div style=\"background-color: #ffd700; width: 60px; height: 80px;\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div style=\"background-color: #dda0dd; height: 40px;\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n\n\n\n\n\n\n\n\n\nThis nested approach makes your HTML much more maintainable and your CSS much more powerful!\n\n\n\n1.5.4 Span\n“span” – A container for small pieces of text. If a div is like a cardboard box, a span is like a Ziploc bag. It doesn’t change the styling of anything by itself but it allows you use CSS and JavaScript later to make that text different in some way.\n\nHTMLResult\n\n\n&lt;p&gt;This is &lt;span style=\"text-decoration: underline\"&gt;important&lt;/span&gt; text&lt;/p&gt;\n\n\n\n\n\n\n\n\n1.5.5 Images\n“img” – An image. You use this to load images onto the page. This can be confusing because you can use CSS to bring in images too. The key difference is that when the image is apart of the content, like a diagram that shows data you’re talking about or a picture that shows something from the article, it should be an “img” tag. If it’s a nice background image or something that’s for decoration of your website, use CSS. An “img” tag needs a “src” to say where the image is coming from and “alt” to say what is in the image for screen readers so that the image will still be useful to blind people, people who are hard of seeing, and Google and Bing search engines. “img” are always self-closing tags.\nNote that the image src can point to an online source which it fetches when the page loads or it can refer to a local image stored in your folder. When you want to refer to the online image, you need to provide the link: &lt;img   src=\"http://pets-images.dev-apis.com/pets/dog25.jpg\"   alt=\"an adorable puppy\" /&gt;\nWhen you want to refer to the local image in your folder, you need to point to where it is located. If it’s located in the same folder than this will suffice: &lt;img   src=\"dog25.jpg\"   alt=\"an adorable puppy\" /&gt;\nBut if it’s in another folder, you’ll need to point there: &lt;img   src=\"myImageFolder/dog25.jpg\"   alt=\"an adorable puppy\" /&gt;.\n\nHTMLResult\n\n\n&lt;img\n  src=\"http://pets-images.dev-apis.com/pets/dog25.jpg\"\n  alt=\"an adorable puppy\"\n/&gt;\n&lt;img\n  src=\"http://pets-images.dev-apis.com/pets/dog26.jpg\"\n  alt=\"an adorable puppy\"\n/&gt;\n&lt;img\n  src=\"http://pets-images.dev-apis.com/pets/dog27.jpg\"\n  alt=\"an adorable puppy\"\n/&gt;\n\n\n\n\n\n\n\n\n1.5.6 Links (Anchors)\n“a” – Anchor. An “a” tag is a link to somewhere else. This is a link that goes nowhere. Every “a” tag needs a destination of where the link should take you. We’ll talk about that in the Attributes section.\n\nHTMLResult\n\n\n&lt;a href=\"https://www.frontendmasters.com\"&gt;Frontend Masters&lt;/a&gt;\n&lt;a href=\"https://aka.ms/visual-studio-code\"&gt;Visual Studio Code&lt;/a&gt;\n&lt;a href=\"https://www.codepen.io\"&gt;CodePen&lt;/a&gt;\n\n\n\n\n\n\n\n\n1.5.7 Lists\n“ol”, “ul”, and “li” – Both “ol” and “ul” represent lists. In fact, this list of various tags is a “ul”! A “ul” is an unordered list: it’s a list of things that could be shuffled and still mean the same thing. If I asked you to list all the teams in a sports league, or all the characters on a TV show, those could be presented in any order. An “ol” is an ordered list: what comes first matters. If I ask you to list out the ten most populous cities in the world, there is an order to that and changing the order makes the list incorrect. In either list, each item in the list is an “li”.\n\nHTMLResult\n\n\n&lt;ol&gt;\n  &lt;li&gt;The First One&lt;/li&gt;\n  &lt;li&gt;The Second One&lt;/li&gt;\n  &lt;li&gt;The Third One&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;ul&gt;\n  &lt;li&gt;An Item in the List&lt;/li&gt;\n  &lt;li&gt;Another Item in the List&lt;/li&gt;\n  &lt;li&gt;A Yet Different Item in the List&lt;/li&gt;\n&lt;/ul&gt;\n\n\n\n\n\n\nThere are many more tags (or HTML elements) that you can use to build a website. The ones we’ve just reviewed will be the essential tags needed to generate our experiments.\nTo see the full list of HTML elements, you can go here: https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#attributes",
    "href": "01-html.html#attributes",
    "title": "1  HTML",
    "section": "1.6 Attributes",
    "text": "1.6 Attributes\nAttributes allow you to modify behavior of an HTML tag. You’ve already seen a few of them but we’ll go into a few more examples of them.\nA really good example we have seen already is the href attribute of the anchor tag:\n&lt;a href=\"www.frontendmasters.com\"&gt;&lt;/a&gt;\nBy modifying the href we’re modifying what the tag does. It’s contextual as well: href only works on an anchor tags. You can’t add a href to a div and expect it to suddenly work as a link.\nAnother example is the src attribute on images. The src tells the browser where to find the image file:\n&lt;img src=\"happy-face.jpg\" alt=\"A smiling face\" /&gt;\n&lt;img src=\"sad-face.jpg\" alt=\"A frowning face\" /&gt;\n\n1.6.1 Classes and IDs: Reference Labels\nThere are other attributes like class and id that are universal and can be applied to (nearly) all tags. These themselves don’t change how things look or behave - they’re like reference labels that allow other parts of your code to find and work with specific HTML elements later.\nThink of classes and IDs like name tags at a conference. The name tag doesn’t change what you look like, but it helps other people find and identify you. Similarly, classes and IDs help CSS (for styling) and JavaScript (for interactivity) find and work with specific HTML elements.\n&lt;div class=\"experiment-instructions\"&gt;\n  &lt;h2 id=\"main-title\"&gt;Memory Task Instructions&lt;/h2&gt;\n  &lt;p class=\"important-note\"&gt;Please read carefully!&lt;/p&gt;\n  &lt;p class=\"important-note\"&gt;This experiment will take 15 minutes.&lt;/p&gt;\n  &lt;a class=\"start-button\" href=\"experiment.html\"&gt;Begin&lt;/a&gt;\n&lt;/div&gt;\nIn this example:\n\nThe experiment-instructions class labels the entire instruction section\nThe main-title ID labels the specific heading (there’s only one main title)\nThe important-note class labels both important paragraphs (reusable!)\nThe start-button class labels the link\n\nYou can give a single element multiple classes by separating them with spaces. This is really powerful because it lets you combine different labels:\n&lt;div class=\"trial-display centered-content\"&gt;\n  &lt;p class=\"stimulus-text large-font\"&gt;BLUE&lt;/p&gt;\n  &lt;img class=\"stimulus-image rounded-corners\" src=\"face1.jpg\" alt=\"Happy face\" /&gt;\n  &lt;a class=\"response-button primary-button\" href=\"next-trial.html\"&gt;Continue&lt;/a&gt;\n&lt;/div&gt;\nIn this example:\n\nThe div has both trial-display and centered-content classes\nThe p has both stimulus-text and large-font classes\nThe img has both stimulus-image and rounded-corners classes\nThe a has both response-button and primary-button classes\n\n\n\n1.6.2 Classes vs IDs: When to Use Which?\nClasses are like group labels - you can use the same class on multiple elements:\n\nUse when you might have multiple elements that should be treated the same way\nPerfect for things like “all warning messages” or “all response buttons”\nCan be reused as many times as you want on a page\n\nIDs are like unique identifiers - each ID can only be used once per page:\n\nUse when you have exactly one of something special\nGood for unique elements like “the main experiment area” or “the final results section”\nMust be unique - you can’t have two elements with the same ID\n\n&lt;!-- Good use of classes - multiple elements that should be grouped --&gt;\n&lt;p class=\"instruction-text\"&gt;Read the word, ignore the color.&lt;/p&gt;\n&lt;p class=\"instruction-text\"&gt;Respond as quickly as possible.&lt;/p&gt;\n&lt;p class=\"instruction-text\"&gt;Press any key to begin.&lt;/p&gt;\n\n&lt;!-- Good use of ID - unique element --&gt;\n&lt;div id=\"experiment-container\"&gt;\n  &lt;!-- All experiment content goes here --&gt;\n&lt;/div&gt;\n\n&lt;!-- Combining classes and IDs --&gt;\n&lt;div id=\"trial-area\" class=\"centered-content trial-display\"&gt;\n  &lt;p class=\"stimulus-word large-text\"&gt;RED&lt;/p&gt;\n&lt;/div&gt;\nRule of thumb: Use classes 95% of the time. Only use IDs when you’re absolutely sure there will only ever be one of that element on the page, and you need to specifically target that unique element later in your code.\nFor psychology experiments, classes are perfect for things like trial displays, response buttons, and instruction text that you’ll reuse across different parts of your experiment.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#organizing-html",
    "href": "01-html.html#organizing-html",
    "title": "1  HTML",
    "section": "1.7 Organizing HTML",
    "text": "1.7 Organizing HTML\nLet’s talk about organizing HTML and how to make the most of it. This will help a ton once you get to the CSS section.\nHTML is like building with blocks in that you can put smaller elements inside bigger containers to organize your content. The &lt;div&gt; element is your most versatile container. It doesn’t have any special meaning by itself, but it’s perfect for grouping related elements together.\n\n1.7.1 Basic Organization with Divs\nLet’s say you’re creating an instruction page for a psychology experiment. You need to welcome participants, explain the task, show them what they’ll see, and give them a button to start. Let’s put that together using HTML:\n\nHTMLResult\n\n\n&lt;div&gt;\n  &lt;h1&gt;Welcome to the Experiment!&lt;/h1&gt;\n  &lt;p&gt;\n    In this experiment, you will see images of faces and need to identify \n    the emotion being displayed. Each face will appear for 2 seconds.\n  &lt;/p&gt;\n  &lt;img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Face-smile.svg/120px-Face-smile.svg.png\" alt=\"Example of a happy face\" /&gt;\n  &lt;p&gt;Click the emotion you see as quickly and accurately as possible.&lt;/p&gt;\n  &lt;button&gt;Start Experiment&lt;/button&gt;\n&lt;/div&gt;\n\n\n\n\n\n\nLet’s walk through what we did here and why.\nWe wrapped everything in a &lt;div&gt; element. This creates a container that holds all our related content together. Think of it like putting all the instruction materials in one folder.\nNotice how every tag that we opened gets closed. We have: - &lt;div&gt; ... &lt;/div&gt; - &lt;h1&gt; ... &lt;/h1&gt; - &lt;p&gt; ... &lt;/p&gt; - &lt;button&gt; ... &lt;/button&gt; - Note that the &lt;img&gt; tag is self-closing, so it doesn’t need a separate closing tag.\nLook at how we formatted the HTML with indentation and line breaks. This makes it easier to read, but the browser ignores most of this whitespace. We could write it all on one line and it would look the same to users, but that would be much harder for us to read and edit! Good formatting makes your code maintainable.\nAll of our content elements (h1, p, img, button) are inside the div container. This is called nesting. The div is the parent, and everything inside it are its children.\n\n\n1.7.2 Adding Labels for Future Reference\nNow, this HTML works perfectly fine, but when we get to CSS (in the next chapter), we’ll want to style different parts differently. Maybe we want the title to be bigger, or the button to be blue. To do that, we need a way to refer to specific elements. That’s where classes and IDs come in:\n\nHTMLResult\n\n\n&lt;div id=\"instruction-page\"&gt;\n  &lt;h1 class=\"page-title\"&gt;Welcome to the Experiment!&lt;/h1&gt;\n  &lt;p class=\"instruction-text\"&gt;\n    In this experiment, you will see images of faces and need to identify \n    the emotion being displayed. Each face will appear for 2 seconds.\n  &lt;/p&gt;\n  &lt;img class=\"example-image\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Face-smile.svg/120px-Face-smile.svg.png\" alt=\"Example of a happy face\" /&gt;\n  &lt;p class=\"instruction-text\"&gt;Click the emotion you see as quickly and accurately as possible.&lt;/p&gt;\n  &lt;button class=\"start-button\"&gt;Start Experiment&lt;/button&gt;\n&lt;/div&gt;\n\n\n\n\n\n\nNotice that it looks exactly the same! The classes and IDs don’t change how things appear. They’re just labels that we can use later. Think of them like putting sticky notes on different parts of your content.\nWe gave id=\"instruction-page\" as a unique label for this specific page. The class=\"page-title\" labels the main title. We used class=\"instruction-text\" for instruction paragraphs (notice two elements have this same class). The class=\"example-image\" labels the example image, and class=\"start-button\" labels the start button.\nIn the CSS chapter, we’ll use these labels to make the title bigger, color the button blue, or center the image. The key principle is that HTML defines the structure and content, while CSS (which we’ll learn next) handles the appearance. By organizing our HTML well and adding meaningful labels, we set ourselves up for success when we start styling our experiments.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#html-document-structure",
    "href": "01-html.html#html-document-structure",
    "title": "1  HTML",
    "section": "1.8 HTML Document Structure",
    "text": "1.8 HTML Document Structure\nSo far we’ve been discussing snippets of HTML, using things like divs to build up “components” (or a group of tags that represents a higher level concept like a post or a navigation bar). But let’s talk about the overall structure of an HTML document.\nEvery HTML page needs a basic skeleton that tells the browser important information about how to display and handle your content. Here’s the standard structure you should use for every HTML document:\n\nHTMLResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;My Psychology Experiment&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- All your visible content goes here --&gt;\n    &lt;h1&gt;Welcome to the Study&lt;/h1&gt;\n    &lt;p&gt;This is where participants will see your experiment content.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\nLet’s break down each part of this structure:\n\n1.8.1 Document Type Declaration\n&lt;!DOCTYPE html&gt;\nThis tells the browser we’re using HTML5 (the current standard). There have been several versions of HTML over the years, and this declaration ensures the browser interprets your code using the latest, most reliable standards.\n\n\n1.8.2 Root HTML Element\n&lt;html lang=\"en\"&gt;\nThis is the container for your entire document. The lang=“en” attribute tells browsers and search engines that your content is in English, which helps with accessibility and search indexing.\n\n\n1.8.3 The Head Section\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n  &lt;title&gt;My Psychology Experiment&lt;/title&gt;\n&lt;/head&gt;\nThe &lt;head&gt; contains metadata that is information about your page that doesn’t appear in the browser window.\nThe charset=\"UTF-8\" tells the browser which character set to use. UTF-8 supports all modern characters, emojis, and international text. Always include this.\nThe viewport meta tag is essential for mobile devices. Without this, phones might display your page zoomed way out and tiny. This ensures your experiment works properly on all screen sizes.\nThe &lt;title&gt; sets the text that appears in the browser tab and in search results.\n\n\n1.8.4 The Body Section\n&lt;body&gt;\n  &lt;!-- All your visible content goes here --&gt;\n&lt;/body&gt;\nEverything participants actually see and interact with goes inside the &lt;body&gt; tags. This is where you’ll put your experiment instructions, stimuli, response buttons, and all other visible content.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "01-html.html#putting-it-all-together-a-live-coding-exercise",
    "href": "01-html.html#putting-it-all-together-a-live-coding-exercise",
    "title": "1  HTML",
    "section": "1.9 Putting it All Together: A Live Coding Exercise",
    "text": "1.9 Putting it All Together: A Live Coding Exercise\nThroughout this textbook, you will find live coding exercise where you can directly edit some code and see the result right here in the book.\nBelow is our simple HTML welcome page. Go ahead and edit the HTML below. The webpage, on the right, will update as you change the code. None of these changes are permanent. If you refresh the page, the codepen will revert back to the original code it started as.\nSome things to try:\n\nChange the paragraph text inside &lt;p&gt; &lt;/p&gt;\nAdd a second header using &lt;h2&gt; &lt;/h2&gt;\nAdd an ordered list below the &lt;p&gt;\nAdd the smiley face image using the wikicommons link from the earlier examples.\n\n\n\n\n\n\n\nLive Coding Exercise",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "02-css.html",
    "href": "02-css.html",
    "title": "2  CSS",
    "section": "",
    "text": "2.1 Introduction\nOkay, now we’ve began putting HTML elements on a page. Using our house-building analogy, this is like we have all the materials now in a pile in front of our house. However a pile of lumber does not make a house. We’re going to start reasoning about how to put together these things, how to create our blueprints, our plans. CSS is really powerful and can accomplish a wide variety of things: colors, sizes, order, positioning, hiding, showing, animation, etc. We’ll scratch the surface here, but know you can do a lot with just CSS. It’s a deep subject and a powerful tool.\nLike HTML, CSS is not a programming language. It’s a list of rules that you give the browser. You’ll provide rules to the browser like “all h1s will be colored red.” or “any element with the ‘lime’ class will be green”.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#css-rules",
    "href": "02-css.html#css-rules",
    "title": "2  CSS",
    "section": "2.2 CSS Rules",
    "text": "2.2 CSS Rules\nCSS works by applying rules to HTML elements. You can target elements in three main ways: by their tag name, by a class you assign to them, or by a unique ID. Let’s see all three approaches in action:\n\nHTMLCSSResult\n\n\n&lt;h1&gt;This is the main title&lt;/h1&gt;\n&lt;p class=\"highlight\"&gt;This paragraph has a class&lt;/p&gt;\n&lt;p&gt;This is a regular paragraph with no styling&lt;/p&gt;\n&lt;p id=\"unique-paragraph\"&gt;This paragraph has an id&lt;/p&gt;\n\n\n/* Target by tag name */\nh1 {\n  color: blue;\n  font-size: 32px;\n  text-align: center;\n}\n\n/* Target by class (note the dot) */\n.highlight {\n  background-color: yellow;\n  padding: 10px;\n}\n\n/* Target by ID (note the hash) */\n#unique-paragraph {\n  color: limegreen;\n  font-decoration: underline\n}\n\n\n\n\n\n\nEvery CSS rule follows the same basic pattern. Let’s break down the syntax:\n/* Target by tag name */\nselector {\n  property: value;\n  property: value;\n}\n\n/* Target by class (note the dot) */\n.selector {\n  property: value;\n  property: value;\n}\n\n/* Target by ID (note the hash) */\n#selector {\n  property: value;\n  property: value;\n}\nSelector - This tells CSS which HTML elements to style. It can be a tag name (h1), a class name (.highlight), or an ID (#main-title). Take note that we use the . (dot) to refer to a class and # to refer to an id.\nCurly braces - The opening { and closing } contain all the styling rules for that selector.\nProperty - This is what aspect of the element you want to change (like color, font-size, or background-color).\nColon - The : separates the property from its value.\nValue - This is what you want to set the property to (like red, 20px, or center).\nSemicolon - The ; ends each property-value pair. Think of it like a period at the end of a sentence.\n*Note that failing to follow these syntax rules precisely will result in your page not rendering correctly or not rendering at all because of the error.\n\n2.2.1 Multiple Properties\nYou can apply as many style rules as you’d like to each selector. Let’s make our h1 even more distinctive:\n\nHTMLCSSResult\n\n\n&lt;h1&gt;This is an h1.&lt;/h1&gt;\n\n\nh1 {\n  color: limegreen;\n  font-size: 60px;\n  font-weight: normal;\n  text-decoration: underline;\n  text-transform: uppercase;\n  border: 3px solid pink;\n}\n\n\n\n\n\n\nNotice the HTML is still just &lt;h1&gt;This is a styled heading&lt;/h1&gt;. All the visual changes come from the CSS rules in our stylesheet.\n\n\n2.2.2 Multiple Rules\nYou can also create multiple rules using classes, and apply them to a single element like this:\n\nHTMLCSSResult\n\n\n&lt;p class=\"lime-green\"&gt;This is a paragraph&lt;/p&gt;\n&lt;p class=\"lime-green big-font\"&gt;This is a paragraph&lt;/p&gt;\n&lt;p class=\"lime-green big-font underlined\"&gt;This is a paragraph&lt;/p&gt;\n&lt;p class=\"lime-green underlined\"&gt;This is a paragraph&lt;/p&gt;\n\n\n.lime-green {\n  color: limegreen;\n}\n\n.big-font {\n  font-size: 25px;\n}\n\n.underlined {\n  text-decoration: underline\n}\n\n\n\n\n\n\n\n\n2.2.3 Common CSS Properties\nThere are about ~350 properties that you can use but to be honest you’ll never use all of them. Maybe fifty to a hundred are used frequently and the rest are a long tail that are rarely used.\nYou can read more about all of the CSS properties here: W3 Schools\nHere is a partial list of the most common CSS properties we might use:\n\nHTMLCSSResult\n\n\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"demo-element\"&gt;\n    This element demonstrates many CSS properties at once!\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n.container {\n  width: 500px;\n  height: 300px;\n  background-color: #f8f9fa;\n  border: 2px solid #dee2e6;\n  margin: 20px auto;\n  position: relative;\n}\n\n.demo-element {\n  /* Text Properties */\n  color: white;\n  font-size: 18px;\n  font-weight: bold;\n  font-family: Arial, sans-serif;\n  text-align: center;\n  text-decoration: underline;\n  text-transform: uppercase;\n  line-height: 1.4;\n  letter-spacing: 1px;\n\n  /* Box Model Properties */\n  width: 300px;\n  height: 120px;\n  background-color: #3498db;\n  border: 3px solid #2980b9;\n  border-radius: 15px;\n  margin: 20px auto;\n  padding: 20px;\n\n  /* Layout Properties */\n  display: flex;\n  position: absolute;\n  top: 50px;\n  left: 50px;\n\n  /* Visual Properties */\n  opacity: 0.9;\n  cursor: pointer;\n  box-shadow: 5px 5px 15px rgba(0,0,0,0.3);\n\n  /* Flexbox for centering text */\n  justify-content: center;\n  align-items: center;\n}\n\n.demo-element:hover {\n  background-color: #2980b9;\n  transform: scale(1.05);\n}\n\n\n\n\n\n\nMost Common CSS Properties by Category:\nText Properties:\n`color` - Sets text color\n`font-size` - Controls text size (px, em, rem, %)\n`font-weight` - Controls boldness (normal, bold, 100-900)\n`font-family` - Sets the typeface (Arial, serif, sans-serif)\n`font-style` - Makes text italic or normal\n`text-align` - Aligns text (left, center, right, justify)\n`text-decoration` - Adds underlines, strikethrough, etc.\n`text-transform` - Changes case (uppercase, lowercase, capitalize)\n`line-height` - Controls spacing between lines\n`letter-spacing` - Controls spacing between characters\nBox Model Properties:\n`width` / `height `- Sets element dimensions\n`margin` - Space outside the element\n`padding` - Space inside the element\n`border` - Creates borders around elements\n`border-radius` - Rounds corners\n`background-color` - Sets background color\n`background-image` - Sets background images\nLayout Properties:\n`display` - Controls how elements are displayed (block, inline, flex, none)\n`position` - Controls positioning (static, relative, absolute, fixed)\n`top` / `right` / `bottom` / `left` - Position offsets\n`float` - Makes elements float left or right\n`clear` - Controls floating behavior\n`z-index` - Controls stacking order\nVisual Properties:\n`opacity` - Controls transparency (0-1)\n`visibility` - Shows or hides elements (visible, hidden)\n`overflow` - Controls what happens when content is too big (visible, hidden, scroll)\n`cursor` - Changes mouse cursor appearance\n`box-shadow` - Adds shadows to elements\nThese properties form the foundation of most CSS styling you’ll do in your psychology experiments.\nPlease note that you are not expected to memorize what all these properties are the exact syntax for using them. You can always look up the CSS property you need on a site like W3 Schools",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#commenting-in-css",
    "href": "02-css.html#commenting-in-css",
    "title": "2  CSS",
    "section": "2.3 Commenting in CSS",
    "text": "2.3 Commenting in CSS\nYou may (or may not) have noticed that the comments look a little different in CSS than HTML. This is because CSS is a different language than HTML and has different syntax. Whereas in HTML we used &lt;!-- and --&gt; to open and close our comments, in CSS, we use /* and */ to open and close comments.\nHere they are in action:\n\nHTMLCSS\n\n\n&lt;!-- Commenting in HTML looks like this --&gt;\n\n&lt;p class=\"lime-green\"&gt;This is a paragraph&lt;/p&gt;\n&lt;p class=\"lime-green big-font\"&gt;This is a paragraph&lt;/p&gt;\n&lt;p class=\"lime-green big-font underlined\"&gt;This is a paragraph&lt;/p&gt;\n&lt;p class=\"lime-green underlined\"&gt;This is a paragraph&lt;/p&gt;\n\n&lt;!-- \nComments\ncan\nbe multiple\nlines \n--&gt;\n\n\n/* This is a comment in CSS and will be ignored by the browser */\n\n.lime-green {\n  color: limegreen;\n}\n\n.big-font {\n  font-size: 25px;\n}\n\n.underlined {\n  text-decoration: underline\n}\n\n/*\nComments \ncan still\nbe multiple\nlines\n*/",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#external-css-stylesheets",
    "href": "02-css.html#external-css-stylesheets",
    "title": "2  CSS",
    "section": "2.4 External CSS Stylesheets",
    "text": "2.4 External CSS Stylesheets\nThroughout this chapter, we’ve been writing CSS rules in a separate “CSS tab” in our examples. In real web development, this represents an external stylesheet - a separate .css file that contains all your styling rules. This is the most common and recommended approach because it keeps your HTML clean and your styles organized.\nIn practice, you would typically have a folder, and inside that folder at least two files: index.html (this is where your html code goes) and style.css (this is where your CSS code goes).\nThen you would link to your CSS file inside your HTML so the browser knows to apply those style rules to your page. You do that inside the &lt;head&gt; &lt;/head&gt; of the HTML document using &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;My Experiment&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;   \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"instruction-page\"&gt;\n    &lt;h1 class=\"page-title\"&gt;Welcome to the Experiment!&lt;/h1&gt;\n    &lt;p class=\"instruction-text\"&gt;Follow the instructions below...&lt;/p&gt;\n    &lt;button class=\"start-button\"&gt;Start&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n.instruction-page {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.page-title {\n  color: #2c3e50;\n  font-size: 28px;\n  text-align: center;\n}\n\n.instruction-text {\n  font-size: 16px;\n  line-height: 1.5;\n  margin: 20px 0;\n}\n\n.start-button {\n  background-color: #3498db;\n  color: white;\n  padding: 12px 24px;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  cursor: pointer;\n  display: block;\n  margin: 20px auto;\n}\n\n\n\n\n\n\nThe key line is &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt; in the HTML head section. This tells the browser to load and apply the CSS rules from the styles.css file.\nYou’ll note that &lt;link&gt; is a self-closing tag, so we don’t need to add the &lt;/link&gt;. There are also two attributes inside the tag. The first is rel=\"stylesheet\", which tells the browser this particular link is a stylesheet. The second is href=\"style.css\" which tells the browser where to look for the file. In this case, it would look in the same folder as the index.html file.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#inline-styling",
    "href": "02-css.html#inline-styling",
    "title": "2  CSS",
    "section": "2.5 Inline Styling",
    "text": "2.5 Inline Styling\nSometimes you need to apply styles directly to individual HTML elements. This is called inline styling, and you do it using the style attribute:\n\nHTMLCSSResult\n\n\n&lt;div style=\"background-color:lightpink;\"&gt;\n  &lt;p&gt;This paragraph is not styled.&lt;/p&gt;\n  &lt;p style=\"color: red; font-size: 20px; background-color: yellow;\"&gt;\n    This paragraph uses inline styling.\n  &lt;/p&gt;\n  &lt;p style=\"text-decoration: underline\"&gt;This paragraph is underlined.&lt;/p&gt;\n&lt;/div&gt;\n\n\n/* There's no CSS here! */\n\n\n\n\n\n\nYou’ll notice that the syntax is different for inline styles. We now follow this pattern: style=\"property: value;\" and if you want multiple style properties, you need to separate them with a semi-colon like this: style=\"property: value; property: value\".\nInline styling can be useful in specific situations, especially when programming jsPsych experiments. We’ll see later how and when we might want to use inline styling. For now, we can think of external CSS rules as being good for creating reusable style rules that we might want to apply more than once, whereas inline styling can be useful when we are writing one-time-use HTML code that isn’t being reused multiple times.\nFor example, if you’re creating multiple instruction pages that all need the same button styling, you’d use a CSS class like .start-button that you can apply to any button. But if you’re generating a unique stimulus display where each element needs a different color based on experimental conditions, inline styling might be more practical.\n&lt;!-- Reusable styling with CSS classes --&gt;\n&lt;button class=\"start-button\"&gt;Start Experiment&lt;/button&gt;\n&lt;button class=\"start-button\"&gt;Continue&lt;/button&gt;\n\n&lt;!-- One-time styling with inline styles --&gt;\n&lt;div style=\"color: red; position: absolute; top: 100px; left: 200px;\"&gt;Target A&lt;/div&gt;\n&lt;div style=\"color: blue; position: absolute; top: 150px; left: 300px;\"&gt;Target B&lt;/div&gt;",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#cascading-rules",
    "href": "02-css.html#cascading-rules",
    "title": "2  CSS",
    "section": "2.6 Cascading Rules",
    "text": "2.6 Cascading Rules\nTwo final points to make about how CSS rules are implemented by the browser. CSS stands for “Cascading Style Sheets,” and the “cascading” part refers to two key principles that determine which styles get applied when you have multiple competing rules.\nUnderstanding these two rules helps you predict which styles will actually be applied when you have multiple competing rules.\n\n2.6.1 Rule 1: Child elements inherit style properties from their parents\nMany CSS properties are inherited, meaning child elements automatically get the same styling as their parent elements:\n\nHTMLCSSResult\n\n\n&lt;div class=\"parent\"&gt;\n  &lt;h2&gt;This heading is inside the div&lt;/h2&gt;\n  &lt;p&gt;This paragraph is also inside the div&lt;/p&gt;\n  &lt;div class=\"child\"&gt;\n    &lt;p&gt;This paragraph is nested even deeper&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n.parent {\n  color: blue;\n  font-family: Arial, sans-serif;\n  font-size: 18px;\n}\n\n.child {\n  font-style: italic;\n}\n\n\n\n\n\n\nNotice how all the text inside the .parent div inherited the blue color and Arial font, even though we only applied those styles to the parent container. The deeply nested paragraph got both the inherited styles from .parent and the italic style from .child.\n\n\n2.6.2 Rule 2: More specific selectors override more general selectors\nWhen multiple CSS rules could apply to the same element, the more specific rule takes precedence:\n\nHTMLCSSResult\n\n\n&lt;div class=\"container\"&gt;\n  &lt;p&gt;Regular paragraph&lt;/p&gt;\n  &lt;p class=\"special\"&gt;Paragraph with a class&lt;/p&gt;\n  &lt;p id=\"unique\" class=\"special\"&gt;Paragraph with both class and ID&lt;/p&gt;\n  &lt;p class=\"special\" style=\"color: purple;\"&gt;Paragraph with inline style&lt;/p&gt;\n&lt;/div&gt;\n\n\n/* Least specific: targets all paragraphs */\np {\n  color: black;\n  font-size: 14px;\n}\n\n/* More specific: targets paragraphs with class \"special\" */\n.special {\n  color: green;\n  font-weight: bold;\n}\n\n/* Most specific: targets the element with ID \"unique\" */\n#unique {\n  color: red;\n  text-decoration: underline;\n}\n\n/* Inline styles (in HTML) are even more specific than IDs */\n\n\n\n\n\n\nCSS follows this hierarchy from least to most specific:\n\nTag selectors (p, h1, div) - Least specific\nClass selectors (.special, .highlight) - More specific\nID selectors (#unique, #header) - Very specific\nInline styles (style=\"color: red;\") - Most specific\n\nWhen rules conflict, the more specific rule wins. When rules have the same specificity, the last one in the CSS file wins.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#css-for-simple-layouts",
    "href": "02-css.html#css-for-simple-layouts",
    "title": "2  CSS",
    "section": "2.7 CSS for Simple Layouts",
    "text": "2.7 CSS for Simple Layouts\nIn psychology experiments, you’ll often need to arrange stimuli in specific layouts: centering a single stimulus on the screen, placing multiple stimuli side-by-side for comparison, or creating grids of items for memory or visual search tasks. Here are the most common layout techniques you’ll use.\n\n2.7.1 Centering Stimuli\nCentering is probably the most common layout need in experiments. Most single stimulus presentations need to be perfectly centered:\n\nHTMLCSSResult\n\n\n&lt;div class=\"center-container\"&gt;\n  &lt;div class=\"stimulus\"&gt;\n    &lt;div class=\"target-word\"&gt;YELLOW&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n.center-container {\n  width: 100%;\n  height: 400px;\n  background-color: #f8f9fa;\n  border: 2px solid #dee2e6;\n\n  /* Flexbox method for centering */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.stimulus {\n  text-align: center;\n  padding: 20px;\n  background-color: white;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n.target-word {\n  font-size: 48px;\n  font-weight: bold;\n  color: blue;\n  margin: 20px 0;\n  letter-spacing: 3px;\n}\n\n\n\n\n\n\nThe key properties for centering are display: flex, justify-content: center (centers horizontally), and align-items: center (centers vertically).\nFlexbox is a very useful method for arranging elements on the screen. You can read more about it here: CSS Tricks: Flexbox.\n\n\n2.7.2 Side-by-Side Stimuli\nFor comparison tasks or paired stimuli, you’ll often want elements arranged horizontally:\n\nHTMLCSSResult\n\n\n&lt;div class=\"comparison-task\"&gt;\n  &lt;h3&gt;Which image is brighter?&lt;/h3&gt;\n  &lt;div class=\"stimulus-pair\"&gt;\n    &lt;div class=\"stimulus-item\"&gt;\n      &lt;img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Face-smile.svg/120px-Face-smile.svg.png\" alt=\"Stimulus A\" /&gt;\n      &lt;div class=\"stimulus-label\"&gt;A&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"stimulus-item\"&gt;\n      &lt;img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Face-smile.svg/120px-Face-smile.svg.png\" alt=\"Stimulus B\" /&gt;\n      &lt;div class=\"stimulus-label\"&gt;B&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n.comparison-task {\n  text-align: center;\n  padding: 20px;\n}\n\n.stimulus-pair {\n  display: flex;\n  justify-content: center;\n  gap: 80px;\n  margin-top: 30px;\n}\n\n.stimulus-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 15px;\n}\n\n.stimulus-item img {\n  border: 3px solid #dee2e6;\n  border-radius: 10px;\n  background-color: white;\n}\n\n.stimulus-label {\n  font-size: 24px;\n  font-weight: bold;\n  color: #495057;\n}\n\n\n\n\n\n\nThe gap property creates consistent spacing between stimuli, and flex-direction: column stacks the image and label vertically within each stimulus.\n\n\n2.7.3 Grid Layout for Multiple Stimuli\nFor displaying multiple stimuli in a grid (like in memory tasks, visual search experiments, or stimulus arrays):\n\nHTMLCSSResult\n\n\n&lt;div class=\"memory-task\"&gt;\n  &lt;h3&gt;Study these items for the memory test&lt;/h3&gt;\n  &lt;div class=\"stimulus-grid\"&gt;\n    &lt;div class=\"grid-stimulus\"&gt;CAT&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;DOG&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;BIRD&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;FISH&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;TREE&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;HOUSE&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;CAR&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;BOOK&lt;/div&gt;\n    &lt;div class=\"grid-stimulus\"&gt;PHONE&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n\n\n.memory-task {\n  text-align: center;\n  padding: 20px;\n}\n\n.stimulus-grid {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 20px;\n  max-width: 400px;\n  margin: 30px auto;\n}\n\n.grid-stimulus {\n  width: 100px;\n  height: 100px;\n  background-color: #e9ecef;\n  border: 2px solid #adb5bd;\n  border-radius: 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 16px;\n  font-weight: bold;\n  color: #495057;\n}\n\n\n\n\n\n\nThe display: grid property creates a grid container, and grid-template-columns: repeat(3, 1fr) creates three equal-width columns. You can change the number to create different grid sizes (2x2, 4x4, etc.).",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "02-css.html#troubleshooting-why-isnt-my-css-working",
    "href": "02-css.html#troubleshooting-why-isnt-my-css-working",
    "title": "2  CSS",
    "section": "2.8 Troubleshooting: Why isn’t my CSS working?",
    "text": "2.8 Troubleshooting: Why isn’t my CSS working?\nCSS can be frustrating when your styles don’t appear as expected. Here are the most common issues and how to fix them: Check Your Syntax\n\n2.8.1 1. Check for simple syntax errors\n\nHTMLCSSResult\n\n\n&lt;div class=\"example-box\"&gt;This box should be styled&lt;/div&gt;\n\n\n/* WRONG - Missing semicolon */\n.example-box {\n  color: red\n  font-size: 20px;\n}\n\n/* WRONG - Typo in property name */\n.example-box {\n  colr: red;\n  font-size: 20px;\n}\n\n/* WRONG - Missing colon */\n.example-box {\n  color red;\n  font-size: 20px;\n}\n\n/* CORRECT */\n.example-box {\n  color: red;\n  font-size: 20px;\n}\n\n\n\n\n\n\nCommon syntax mistakes:\n\nMissing semicolons (;) at the end of property-value pairs\nTypos in property names (colr instead of color)\nMissing colons (:) between property and value\nMissing opening or closing curly braces ({ })\n\n\n\n2.8.2 2. Check your selectors\nMake sure your CSS selector matches your HTML exactly:\n\nHTMLCSSResult\n\n\n&lt;div class=\"my-container\"&gt;\n  &lt;p id=\"special-text\"&gt;This paragraph has an ID&lt;/p&gt;\n  &lt;p class=\"highlight\"&gt;This paragraph has a class&lt;/p&gt;\n&lt;/div&gt;\n\n\n/* WRONG - Missing dot for class */\nmy-container {\n  background-color: lightblue;\n}\n\n/* WRONG - Missing hash for ID */\nspecial-text {\n  color: red;\n}\n\n/* WRONG - Typo in class name */\n.highlght {\n  background-color: yellow;\n}\n\n/* CORRECT */\n.my-container {\n  background-color: lightblue;\n}\n\n#special-text {\n  color: red;\n}\n\n.highlight {\n  background-color: yellow;\n}\n\n\n\n\n\n\nCommon selector mistakes:\n\nClass selectors need a dot: .class-name\nID selectors need a hash: #id-name\nTag selectors need no prefix: p, div, h1\nSpelling must match exactly (case-sensitive!)\n\n\n\n2.8.3 3. Check for Specificity Conflicts\nSometimes your CSS is correct, but a more specific rule is overriding it, or an element is inheriting properties you don’t want:\n\nHTMLCSSResult\n\n\n&lt;div id=\"container\"&gt;\n  &lt;p class=\"text\"&gt;This text should be blue, but appears red&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div class=\"red-section\"&gt;\n  &lt;h2&gt;This heading inherits red color&lt;/h2&gt;\n  &lt;p class=\"should-be-black\"&gt;This paragraph should be black, not red&lt;/p&gt;\n&lt;/div&gt;\n\n\n/* Specificity conflict example */\n.text {\n  color: blue;\n}\n\n#container .text {\n  color: red; /* More specific - this rule wins */\n}\n\n/* Inheritance problem example */\n.red-section {\n  color: red; /* This gets inherited by all children */\n}\n\n.should-be-black {\n  /* This doesn't work because color is inherited */\n  /* Need to explicitly override: */\n  color: black;\n}\n\n\n\n\n\n\nTwo common specificity problems:\nSpecificity conflicts: If your style isn’t applying, check if there’s a more specific rule overriding it. Remember the specificity hierarchy: inline styles &gt; IDs &gt; classes &gt; tags.\nUnwanted inheritance: Sometimes child elements inherit properties from their parents that you don’t want. Properties like color, font-family, and font-size are inherited automatically. To fix this, you need to explicitly override the inherited property:\n/* Problem: Child inherits unwanted color */\n.parent {\n  color: red;\n}\n\n/* Solution: Explicitly override in child */\n.child {\n  color: black; /* Override the inherited red */\n}\nIf your style isn’t working, check both whether a more specific rule is overriding it AND whether the element is inheriting an unwanted property from a parent element.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "03-L01.html",
    "href": "03-L01.html",
    "title": "3  Lab 1: About Me",
    "section": "",
    "text": "3.1 Current Files\nLet’s have a look at what’s included in our Lab 1 folder. There are three files: ‘index.html’, ‘style.css’, and ‘me.jpg’. This is where our code is going to live for this lab. Currently there isn’t much here except some boilerplate html that creates the basic webpage and an empty CSS file.\nFor all the following steps, you’ll see the the three tabs “index.html”, “style.css”, and “Result” that you can click on. These should be identical to what you have in your folder and what the live webpage should look like as you move through the tutorial. Currently the ‘Result’ is just a blank page.\nYou’ll also notice that I’ve already linked to our custom CSS file, though it’s currently empty too.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#current-files",
    "href": "03-L01.html#current-files",
    "title": "3  Lab 1: About Me",
    "section": "",
    "text": "index.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#add-container-and-header",
    "href": "03-L01.html#add-container-and-header",
    "title": "3  Lab 1: About Me",
    "section": "3.2 Add Container and Header",
    "text": "3.2 Add Container and Header\nNow we’ll add structure to our webpage by creating a container to hold all our content and adding a header section. The &lt;div&gt; elements help organize our page into logical sections, while the basic CSS styling removes default browser margins and sets a clean font family for the entire page.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#add-main-content",
    "href": "03-L01.html#add-main-content",
    "title": "3  Lab 1: About Me",
    "section": "3.3 Add Main Content",
    "text": "3.3 Add Main Content\nNext, we’ll add the main content area with some basic information about ourselves. This includes an introduction paragraph and a list of interests. Notice how the HTML uses semantic elements like &lt;h2&gt; for section headings and &lt;ul&gt; for the unordered list, which helps structure the content clearly.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    \n        &lt;div id=\"main-content\"&gt;\n          &lt;h2&gt;Introduction&lt;/h2&gt;  \n          &lt;p&gt;Hi, my name is [Your Name]. Welcome to my personal website!&lt;/p&gt;  \n  \n          &lt;h2&gt;Interests&lt;/h2&gt;  \n          &lt;ul&gt;  \n              &lt;li&gt;Reading&lt;/li&gt;  \n              &lt;li&gt;Traveling&lt;/li&gt;  \n              &lt;li&gt;Cooking&lt;/li&gt;  \n          &lt;/ul&gt;  \n        &lt;/div&gt;\n    \n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#add-contact-information-external-links-and-an-image",
    "href": "03-L01.html#add-contact-information-external-links-and-an-image",
    "title": "3  Lab 1: About Me",
    "section": "3.4 Add Contact Information, External Links, and an Image",
    "text": "3.4 Add Contact Information, External Links, and an Image\nHere we expand our content by adding contact information with an email link, external links to social media, and an image. The &lt;a&gt; tags create clickable links - the mailto: creates an email link, while target=\"_blank\" opens external links in a new tab. The &lt;img /&gt; tag displays a picture with specified width and alt text for accessibility.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    \n        &lt;div id=\"main-content\"&gt;\n          &lt;h2&gt;Introduction&lt;/h2&gt;  \n          &lt;p&gt;Hi, my name is [Your Name]. Welcome to my personal website!&lt;/p&gt;  \n  \n          &lt;h2&gt;Interests&lt;/h2&gt;  \n          &lt;ul&gt;  \n              &lt;li&gt;Reading&lt;/li&gt;  \n              &lt;li&gt;Traveling&lt;/li&gt;  \n              &lt;li&gt;Cooking&lt;/li&gt;  \n         &lt;/ul&gt;\n         \n          &lt;h2&gt;Contact Information&lt;/h2&gt;\n          &lt;p&gt;\n            You can reach me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;\n          &lt;/p&gt;\n\n          &lt;h2&gt;Find Me Elsewhere&lt;/h2&gt;\n          &lt;p&gt;\n            You can also find me on &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.\n          &lt;/p&gt;\n      \n          &lt;h2&gt;Picture&lt;/h2&gt;  \n              &lt;img src=\"me.jpg\" alt=\"Your Picture\" width=\"200\"&gt;\n        \n        &lt;/div&gt;\n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#add-footer",
    "href": "03-L01.html#add-footer",
    "title": "3  Lab 1: About Me",
    "section": "3.5 Add Footer",
    "text": "3.5 Add Footer\nWe complete the basic page structure by adding a footer section at the bottom. This creates a clear separation between the main content and the copyright information, giving our page a more professional and complete appearance.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    \n        &lt;div id=\"main-content\"&gt;\n          &lt;h2&gt;Introduction&lt;/h2&gt;  \n          &lt;p&gt;Hi, my name is [Your Name]. Welcome to my personal website!&lt;/p&gt;  \n  \n          &lt;h2&gt;Interests&lt;/h2&gt;  \n          &lt;ul&gt;  \n              &lt;li&gt;Reading&lt;/li&gt;  \n              &lt;li&gt;Traveling&lt;/li&gt;  \n              &lt;li&gt;Cooking&lt;/li&gt;  \n         &lt;/ul&gt;\n         \n          &lt;h2&gt;Contact Information&lt;/h2&gt;\n          &lt;p&gt;\n            You can reach me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;\n          &lt;/p&gt;\n\n          &lt;h2&gt;Find Me Elsewhere&lt;/h2&gt;\n          &lt;p&gt;\n            You can also find me on &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.\n          &lt;/p&gt;\n      \n          &lt;h2&gt;Picture&lt;/h2&gt;  \n              &lt;img src=\"me.jpg\" alt=\"Your Picture\" width=\"200\"&gt;\n        \n        &lt;/div&gt;\n        \n        &lt;div id=\"footer\"&gt;\n          &lt;p&gt;Copyright 2025 by [Your Name]&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#inline-styling",
    "href": "03-L01.html#inline-styling",
    "title": "3  Lab 1: About Me",
    "section": "3.6 Inline Styling",
    "text": "3.6 Inline Styling\nNow we’ll explore our first method of adding visual styling to HTML elements using the style attribute. With inline styling, we write CSS properties directly inside the HTML tags themselves. Notice how we add style=“background-color: lightblue; padding: 15px;” directly to the div element, and style=“text-align: center; color: white;” to the heading. This approach gives us immediate control over individual elements, but each style rule only applies to that specific element. While inline styling is quick for testing or one-off changes, it mixes our content (HTML) with our presentation (CSS), making it harder to maintain and reuse styles across multiple elements.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    \n        &lt;div id=\"main-content\"&gt;\n          &lt;h2&gt;Introduction&lt;/h2&gt;  \n          &lt;p&gt;Hi, my name is [Your Name]. Welcome to my personal website!&lt;/p&gt;  \n  \n          &lt;h2&gt;Interests&lt;/h2&gt;  \n          &lt;ul&gt;  \n              &lt;li&gt;Reading&lt;/li&gt;  \n              &lt;li&gt;Traveling&lt;/li&gt;  \n              &lt;li&gt;Cooking&lt;/li&gt;  \n         &lt;/ul&gt;\n         \n          &lt;h2&gt;Contact Information&lt;/h2&gt;\n          &lt;p&gt;\n            You can reach me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;\n          &lt;/p&gt;\n\n          &lt;h2&gt;Find Me Elsewhere&lt;/h2&gt;\n          &lt;p&gt;\n            You can also find me on &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.\n          &lt;/p&gt;\n      \n          &lt;h2&gt;Picture&lt;/h2&gt;  \n              &lt;img src=\"me.jpg\" alt=\"Your Picture\" width=\"200\"&gt;\n        \n          &lt;div style=\"background-color: lightblue; padding: 15px;\"&gt;\n            &lt;h2 style=\"text-align: center; color: white;\"&gt;Fun Facts&lt;/h2&gt;\n            &lt;p style=\"font-size: 18px; font-style: italic;\"&gt;Did you know I love to skydive and have completed over 20 jumps?&lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;div id=\"footer\"&gt;\n          &lt;p&gt;Copyright 2025 by [Your Name]&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n}",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#styling-using-the-css-stylesheet",
    "href": "03-L01.html#styling-using-the-css-stylesheet",
    "title": "3  Lab 1: About Me",
    "section": "3.7 Styling using the CSS stylesheet",
    "text": "3.7 Styling using the CSS stylesheet\nNow we’ll demonstrate the preferred method of styling by moving our CSS rules to a separate stylesheet. Instead of writing styles directly in our HTML, we create CSS rules that target elements using selectors we’ve already written like #container, #header, and #footer. In the CSS, I’ve added rules that target those IDs.\nI also created two new class-based rules for highlight and bold-font. These classes can be re-used multiple times and you can see in the HTML where I’ve added them to some of the elements.\nThis approach separates our content (HTML) from our presentation (CSS), making our code more organized and maintainable. We can easily change the styling of all highlighted elements by modifying just one CSS rule, rather than updating each inline style individually.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1&gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    \n        &lt;div id=\"main-content\"&gt;\n          &lt;h2&gt;Introduction&lt;/h2&gt;  \n          &lt;p&gt;Hi, my name is &lt;span class=\"highlight bold-font\"&gt;[Your Name]&lt;/span&gt;. Welcome to my personal website!&lt;/p&gt;  \n  \n          &lt;h2&gt;Interests&lt;/h2&gt;  \n          &lt;ul&gt;  \n              &lt;li&gt;Reading&lt;/li&gt;  \n              &lt;li class=\"highlight\"&gt;Traveling&lt;/li&gt;  \n              &lt;li&gt;Cooking&lt;/li&gt;  \n         &lt;/ul&gt;\n         \n          &lt;h2&gt;Contact Information&lt;/h2&gt;\n          &lt;p&gt;\n            You can reach me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;\n          &lt;/p&gt;\n\n          &lt;h2&gt;Find Me Elsewhere&lt;/h2&gt;\n          &lt;p&gt;\n            You can also find me on &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.\n          &lt;/p&gt;\n      \n          &lt;h2&gt;Picture&lt;/h2&gt;  \n              &lt;img src=\"me.jpg\" alt=\"Your Picture\" width=\"200\"&gt;\n        \n          &lt;div style=\"background-color: lightblue; padding: 15px;\"&gt;\n            &lt;h2 style=\"text-align: center; color: white;\"&gt;Fun Facts&lt;/h2&gt;\n            &lt;p style=\"font-size: 18px; font-style: italic;\"&gt;Did you know I love to skydive and have completed over 20 jumps?&lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;div id=\"footer\"&gt;\n          &lt;p&gt;Copyright 2025 by [Your Name]&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {  \n   font-family: Arial, sans-serif;  \n   margin: 0;  \n   padding: 0;  \n}  \n\n/* ID-based styling */   \n#container {  \n  max-width: 960px;  \n  margin: auto;  \n}  \n\n#header {  \n  background-color: #f2f2f2;  \n  padding: 20px;  \n  text-align: center;  \n}  \n\n#main-content {  \n  padding: 20px;  \n  max-width: 750px;  \n  margin: auto;  \n}\n\n#footer {  \n background-color: #f2f2f2;  \n padding: 10px;  \n text-align: center;  \n}  \n\n/* Class-based styling */  \n.highlight {  \n  background-color: yellow;  \n}  \n\n.bold-font {\n  font-weight: bold;\n}\n\n\n\n\n\n\nNow that we’re using both IDs and classes, it’s helpful to understand how CSS decides which styles to apply when there are conflicts:\nID Selectors (#header, #footer):\n\nUse the # symbol\nShould be unique on a page (only one element should have a specific ID)\nHave high specificity - they override most other selectors\nBest for major page sections and unique elements\n\nClass Selectors (.highlight, .bold-font):\n\nUse the . symbol\nCan be reused multiple times on the same page\nHave lower specificity than IDs\nPerfect for styling that you want to apply to multiple elements\n\nElement Selectors (body, h1, p):\n\nUse just the HTML tag name\nApply to all elements of that type\nHave the lowest specificity\nGood for setting default styles\n\nIf multiple rules target the same element, CSS follows this priority order: Inline styles &gt; IDs &gt; Classes &gt; Elements. This is why our .highlight class works even when applied to elements that already have other styling - it adds to or overrides less specific rules.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#custom-fonts-using-google-fonts",
    "href": "03-L01.html#custom-fonts-using-google-fonts",
    "title": "3  Lab 1: About Me",
    "section": "3.8 Custom Fonts Using Google Fonts",
    "text": "3.8 Custom Fonts Using Google Fonts\nThere are a number of ‘browser safe’ fonts that you can use in your webpage. These are fonts that are generally available in most browsers. You can see a list here: https://www.w3schools.com/cssref/css_websafe_fonts.php\nGoogle Fonts (https://fonts.google.com/) provides a number of other interesting fonts that you can add to your webpage. You can search for something you want to add and click ‘Add Font’. On the right side of the screen will be a button called “Get Embed Code”. Clicking that will provide the &lt;link&gt; tags that you need to add to your &lt;head&gt; and the CSS class you need to add to your CSS file.\nI’ve added one google font here and added the class to all of my headers.\n\n\n\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n      &lt;meta charset=\"UTF-8\"&gt;\n      &lt;title&gt;Lab 1: About Me&lt;/title&gt;\n      \n      &lt;link rel=\"preconnect\" href=\"https://fonts.googleapis.com\"&gt;\n      &lt;link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin&gt;\n      &lt;link href=\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\" rel=\"stylesheet\"&gt;\n      \n      &lt;!-- custom CSS --&gt;\n      &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;div id=\"header\"&gt;\n            &lt;h1 class=\"press-start-2p-regular\" &gt;About Me&lt;/h1&gt;\n        &lt;/div&gt;\n    \n        &lt;div id=\"main-content\"&gt;\n          &lt;h2 class=\"press-start-2p-regular\" &gt;Introduction&lt;/h2&gt;  \n          &lt;p&gt;Hi, my name is &lt;span class=\"highlight bold-font\"&gt;[Your Name]&lt;/span&gt;. Welcome to my personal website!&lt;/p&gt;  \n  \n          &lt;h2 class=\"press-start-2p-regular\" &gt;Interests&lt;/h2&gt;  \n          &lt;ul&gt;  \n              &lt;li&gt;Reading&lt;/li&gt;  \n              &lt;li class=\"highlight\"&gt;Traveling&lt;/li&gt;  \n              &lt;li&gt;Cooking&lt;/li&gt;  \n         &lt;/ul&gt;\n         \n          &lt;h2 class=\"press-start-2p-regular\" &gt;Contact Information&lt;/h2&gt;\n          &lt;p&gt;\n            You can reach me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;\n          &lt;/p&gt;\n\n          &lt;h2 class=\"press-start-2p-regular\" &gt;Find Me Elsewhere&lt;/h2&gt;\n          &lt;p&gt;\n            You can also find me on &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.\n          &lt;/p&gt;\n      \n          &lt;h2 class=\"press-start-2p-regular\" &gt;Picture&lt;/h2&gt;  \n              &lt;img src=\"me.jpg\" alt=\"Your Picture\" width=\"200\"&gt;\n        \n          &lt;div style=\"background-color: lightblue; padding: 15px;\"&gt;\n            &lt;h2 style=\"text-align: center; color: white;\"&gt;Fun Facts&lt;/h2&gt;\n            &lt;p style=\"font-size: 18px; font-style: italic;\"&gt;Did you know I love to skydive and have completed over 20 jumps?&lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;div id=\"footer\"&gt;\n          &lt;p&gt;Copyright 2025 by [Your Name]&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt; \n  &lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is a CSS comment. It won't be displayed on the web page. */\nbody {  \n   font-family: Arial, sans-serif;  \n   margin: 0;  \n   padding: 0;  \n}  \n\n/* ID-based styling */   \n#container {  \n  max-width: 960px;  \n  margin: auto;  \n}  \n\n#header {  \n  background-color: #f2f2f2;  \n  padding: 20px;  \n  text-align: center;  \n}  \n\n#main-content {  \n  padding: 20px;  \n  max-width: 750px;  \n  margin: auto;  \n}\n\n#footer {  \n background-color: #f2f2f2;  \n padding: 10px;  \n text-align: center;  \n}  \n\n/* Class-based styling */  \n.highlight {  \n  background-color: yellow;  \n}  \n\n.bold-font {\n  font-weight: bold;\n}\n\n.press-start-2p-regular {\n  font-family: \"Press Start 2P\", system-ui;\n  font-weight: 400;\n  font-style: normal;\n}",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#make-it-your-own",
    "href": "03-L01.html#make-it-your-own",
    "title": "3  Lab 1: About Me",
    "section": "3.9 Make it Your Own",
    "text": "3.9 Make it Your Own\nThat’s it for the examples. The rest is up to you!\nThe challenge is to add some content that tells me about yourself and style it any way you’d like. Feel free to make it as weird or professional as you’d like.\nIf you need some additional inspiration, here are a few more examples below. Remember to use the reference sites like https://www.w3schools.com to look up how you might use different CSS and HTML. Also remember that we’re using standard web programming tools. That means if you don’t know how to do something, you can probably search for it on the internet and find a solution pretty fast (e.g., “Add a background image to my webpage using CSS”).\nTo add your own Google Font to your webpage, follow these steps:\n\nBrowse and Select: Go to Google Fonts and browse through the available fonts. You can filter by categories like serif, sans-serif, or display fonts.\nAdd to Collection: When you find a font you like, click the “+” button or “Select this style” to add it to your collection.\nGet the Embed Code: Click on the “View your selected families” icon (usually in the top right), then click “Embed” to see the code you need.\nCopy the Link Tags: Copy the &lt;link&gt; tags provided and paste them in your HTML &lt;head&gt; section, before your custom CSS link.\nCopy the CSS Rule: Google Fonts will also provide the CSS font-family rule. Copy this and create a new CSS class in your stylesheet\nApply the Class: Add the class to any HTML elements where you want to use the custom font.",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "03-L01.html#some-inspiration",
    "href": "03-L01.html#some-inspiration",
    "title": "3  Lab 1: About Me",
    "section": "3.10 Some Inspiration",
    "text": "3.10 Some Inspiration\n\n3.10.1 1998\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;About Me&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h1&gt;About Me&lt;/h1&gt;\n\n&lt;!-- Page Container --&gt;\n&lt;table&gt;\n    &lt;tr&gt;\n        &lt;!-- Main Content --&gt;\n        &lt;td&gt;\n            &lt;h2&gt;Introduction&lt;/h2&gt;\n            &lt;p&gt;Hi, my name is [Your Name]. Welcome to my rad web page!&lt;/p&gt;\n\n            &lt;h2&gt;Interests&lt;/h2&gt;\n            &lt;ul&gt;\n                &lt;li&gt;Reading&lt;/li&gt;\n                &lt;li&gt;Traveling&lt;/li&gt;\n                &lt;li&gt;Cooking&lt;/li&gt;\n            &lt;/ul&gt;\n\n            &lt;h2&gt;Contact Information&lt;/h2&gt;\n            &lt;p&gt;Email me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;&lt;/p&gt;\n\n            &lt;h2&gt;Find Me Elsewhere&lt;/h2&gt;\n            &lt;p&gt;You can also find me on this new thing called &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;\n\n            &lt;h2&gt;Picture&lt;/h2&gt;\n            &lt;img src=\"me.jpg\" alt=\"My Cool Picture\" width=\"200\"&gt;\n        &lt;/td&gt;\n        &lt;!-- Sidebar --&gt;\n        &lt;td width=\"200\"&gt;\n            &lt;h2&gt;Fun Facts&lt;/h2&gt;\n            &lt;p&gt;Did you know I love to skydive and have completed over 20 jumps?&lt;/p&gt;\n        &lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n\n&lt;!-- Footer --&gt;\n&lt;div class=\"footer\"&gt;\n    &lt;p&gt;Copyright 1998 by [Your Name]&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n        /* General styles */\n        body {\n            background-color: #008080;\n            font-family: \"Comic Sans MS\", sans-serif;\n            margin: 0;\n            padding: 0;\n            color: #000000;\n        }\n        /* Container */\n        table {\n            width: 100%;\n        }\n        td {\n            vertical-align: top;\n            background-color: #ffffff;\n            padding: 10px;\n            border: 2px solid #000000;\n        }\n        /* Header */\n        h1 {\n            background-color: #ffff00;\n            text-align: center;\n            padding: 20px;\n        }\n        /* Main content */\n        h2 {\n            color: #ff0000;\n        }\n        p, ul {\n            margin-bottom: 10px;\n        }\n        ul {\n            list-style-type: disc;\n        }\n        /* Footer */\n        .footer {\n            background-color: #ffff00;\n            text-align: center;\n            padding: 10px;\n        }\n\n\n\n\n\n\n\n\n3.10.2 Hipster\n\nindex.htmlstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;About Me&lt;/title&gt;\n    &lt;link href='https://fonts.googleapis.com/css2?family\\=Poppins:wght@300;400;700&display\\=swap' rel='stylesheet'&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!-- Page Container --&gt;\n&lt;div class=\"container\"&gt;\n\n    &lt;!-- Header Section --&gt;\n    &lt;header&gt;\n        &lt;h1&gt;About Me&lt;/h1&gt;\n    &lt;/header&gt;\n\n    &lt;!-- Main Content --&gt;\n    &lt;div class=\"main-content\"&gt;\n        &lt;h2&gt;Introduction&lt;/h2&gt;\n        &lt;p class=\"highlight\"&gt;Hi, my name is [Your Name]. Welcome to my aesthetically curated space!&lt;/p&gt;\n\n        &lt;h2&gt;Interests&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Reading&lt;/li&gt;\n            &lt;li class=\"highlight\"&gt;Traveling&lt;/li&gt;\n            &lt;li&gt;Cooking&lt;/li&gt;\n        &lt;/ul&gt;\n\n        &lt;h2&gt;Contact Information&lt;/h2&gt;\n        &lt;p&gt;You can reach me at: &lt;a href=\"mailto:email@example.com\"&gt;email@example.com&lt;/a&gt;&lt;/p&gt;\n\n        &lt;h2&gt;Find Me Elsewhere&lt;/h2&gt;\n        &lt;p&gt;You can also find me on &lt;a href=\"https://www.linkedin.com\" target=\"_blank\"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;\n\n        &lt;h2&gt;Picture&lt;/h2&gt;\n        &lt;img src=\"me.jpg\" alt=\"Your Picture\" width=\"200\"&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Fun Facts --&gt;\n    &lt;div class=\"fun-facts\"&gt;\n        &lt;h2&gt;Fun Facts&lt;/h2&gt;\n        &lt;p&gt;Did you know I love to skydive and have completed over 20 jumps?&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Footer --&gt;\n    &lt;footer&gt;\n        &lt;p&gt;Copyright 2023 by [Your Name]&lt;/p&gt;\n    &lt;/footer&gt;\n\n&lt;/div&gt; &lt;!-- End of Page Container --&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n/* General styles */\n        body, h1, h2, p, ul, li {\n            margin: 0;\n            padding: 0;\n        }\n        body {\n            background: linear-gradient(45deg, #f3ec78, #af4261);\n            font-family: 'Poppins', sans-serif;\n            line-height: 1.6;\n            color: #333;\n        }\n        /* Container */\n        .container {\n            max-width: 1000px;\n            margin: 30px auto;\n            background: rgba(255, 255, 255, 0.9);\n            padding: 20px;\n            border-radius: 15px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);\n        }\n        /* Header */\n        header {\n            background: rgba(0, 0, 0, 0.8);\n            color: white;\n            padding: 20px 0;\n            text-align: center;\n            border-radius: 15px 15px 0 0;\n            font-weight: 700;\n            text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.2);\n        }\n        /* Main content */\n        .main-content {\n            padding: 20px;\n        }\n        h1, h2 {\n            margin-bottom: 15px;\n        }\n        p {\n            margin-bottom: 20px;\n        }\n        ul {\n            list-style: square;\n            margin-bottom: 20px;\n        }\n        /* Footer */\n        footer {\n            background: rgba(0, 0, 0, 0.8);\n            color: white;\n            text-align: center;\n            padding: 10px 0;\n            border-radius: 0 0 15px 15px;\n        }\n        /* Class-based styling */\n        .highlight {\n            background-color: #ffe18d;\n            padding: 5px;\n            border-radius: 3px;\n        }\n        .fun-facts {\n            background-color: rgba(0, 128, 128, 0.8);\n            padding: 20px;\n            text-align: center;\n            color: white;\n            margin: 20px 0;\n            border-radius: 15px;\n        }",
    "crumbs": [
      "UNIT 1: Fundamentals (I)",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Lab 1: About Me</span>"
    ]
  },
  {
    "objectID": "04-javascript.html",
    "href": "04-javascript.html",
    "title": "4  Javascript",
    "section": "",
    "text": "4.1 Introduction\nNow we move from structure (HTML) and styling (CSS) to behavior and interactivity. Using our house-building analogy, if HTML is the foundation and framing, and CSS is the paint and interior design, then JavaScript is the electrical system, plumbing, and smart home features that make everything actually work and respond.\nJavaScript is a true programming language, unlike HTML and CSS. This means it can perform calculations, make decisions, respond to user input, manipulate content on the page, communicate with servers, and much more. JavaScript brings your psychology experiments to life by handling participant responses, randomizing stimuli, calculating reaction times, saving data, and controlling the flow of your experiment from one trial to the next.\nIn psychology experiments, JavaScript handles all the dynamic behavior: presenting stimuli at precise times, recording when participants press keys, calculating accuracy and reaction times, randomizing trial orders, adapting the experiment based on participant performance, and saving all the data you need for analysis.\nThis is a tough section to teach because the needs of the student vary quite widely here. Some of you are programmers from other languages who are coming here to learn front end coding. Some of you are totally new to coding and JavaScript will be your first programming language. Just like if you know Spanish already, learning Italian becomes a whole lot easier since you take the same concepts and express them with minor variances. This workshop is optimizing for those totally new to coding and thus we assume no prior knowledge. If you do know another programming language, I invite you instead to skim this section to familiarize with how JavaScript looks. The next sections will be aimed also at you.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#what-is-code",
    "href": "04-javascript.html#what-is-code",
    "title": "4  Javascript",
    "section": "4.2 What is Code?",
    "text": "4.2 What is Code?\nA dumb question but its answer may surprise you. Code is for humans first and computers second. You can think of writing code as essentially writing notes on how to solve a particular problem that just happens to be in a way that computer can understand it.\nWait, why? The why is because you or someone else will have to go back and re-read that code some time in the future, maybe tomorrow or maybe in ten years (I’ve worked on code older than 10 years old, it’s not fun.) As such, it’s important to write code in such a way that it can understood as quickly as is reasonable. Think of it like a textbook: you don’t want to read the entire textbook everytime you want to review a concept, you want to jump right to the page and learn just the thing you’re looking for. Same with code: you want to jump right to the bit of code in question and understand it at a glance without re-reading the whole codebase.\nYou will spend far longer maintaining this code than you will writing it the first time. Be explicit. Be deliberate. The point here is not to be clever but to be simple and to communicate clearly. Code is communication.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#how-javascript-executes",
    "href": "04-javascript.html#how-javascript-executes",
    "title": "4  Javascript",
    "section": "4.3 How JavaScript Executes",
    "text": "4.3 How JavaScript Executes\nOkay, given this, let’s frame how this code works then. When you write code, the computer breaks it down into smaller pieces it can understand and then executes those one bit at a time. With JavaScript, only one thing is ever happening at a time (this is called being single threaded but that is not a term you need to know.) In general, this means it executes line 1, then line 2, then line 3, etc. Let’s see that in action:\n\nJavscriptResult\n\n\nconst monthlyRent = 500;\nconst yearlyRent = monthlyRent * 12;\nconsole.log(yearlyRent);\n\n\n6000\n\n\n\nWe’ll discuss this example in more detail a bit later, but for now it’s enough to understand that the code will run the code on each line, one at a time, from top to bottom. In this case it takes the number 500, multiplies it by 12 and prints the result for us. You’ll notice how this differs from HTML and CSS in that we can perform calculations and store and manipulate data. Whereas the content of the HTML and CSS were static, and did not change, JavaScript is dynamic.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#the-javascript-console",
    "href": "04-javascript.html#the-javascript-console",
    "title": "4  Javascript",
    "section": "4.4 The JavaScript Console",
    "text": "4.4 The JavaScript Console\nBefore we dive into writing JavaScript code, let’s discover the powerful tool that’s built right into your web browser. Every modern browser has a JavaScript console where you can type and execute JavaScript code immediately. Think of it as a playground where you can experiment with code and see results instantly.\n\n4.4.1 Opening the Console\nTo open the JavaScript console:\n\nChrome/Edge: Press F12 or right-click anywhere on a webpage and select “Inspect”, then click the “Console” tab\nFirefox: Press F12 or right-click and select “Inspect Element”, then click “Console”\nSafari: First enable developer tools in Safari &gt; Preferences &gt; Advanced &gt; “Show Develop menu”, then press Option+Cmd+C\nAny browser: Right-click on a webpage, select “Inspect” or “Inspect Element”, then look for the “Console” tab\n\n\n\n4.4.2 Try It Yourself!\nOpen your browser’s console right now and try typing these commands. Press Enter after each one:\nEx. 1\n2+3\nEx. 2\n\"Hello, world!\"\nEx. 3\nMath.random()\nEx. 4\nnew Date()\nYou should see the results appear immediately below each command you type. This is JavaScript executing your code in real-time! Note that Math.random() prints a random number between 0 and 1, and new Date() prints the current date.\nThe console is incredibly useful for:\n\nTesting small pieces of code quickly\nDebugging when something isn’t working\nExploring JavaScript features and functions\nChecking the values of variables in your programs\n\nThroughout this chapter, you can copy any of the JavaScript examples into your console to see them work immediately. This hands-on experimentation is one of the best ways to learn programming.\n\n\n4.4.3 The console.log() Command\nOne of the most important commands you’ll use is console.log(). This command prints whatever you put inside the parentheses to the console. It’s like JavaScript’s way of “showing your work” - it lets you see what’s happening inside your code. Here are some examples you can type into your browser console to try yourself:\nEx. 1\nconsole.log(\"Hello from JavaScript!\")\nEx. 2\nconsole.log(42)\nEx. 3\nconsole.log(2 + 3)\nEx. 4\nconsole.log(2 / 3)\nEx. 5\nconsole.log(\"The answer is:\", 42)\nconsole.log() is incredibly helpful because it acts as your primary tool for understanding what your code is doing. When your program isn’t working as expected, you can use console.log() to check what values your variables contain at any point in your code. You can add console.log() statements throughout your program to trace exactly where problems occur, following the flow of your code step by step. When learning new concepts, you can log values to confirm your code is doing what you think it’s doing, which helps build confidence and understanding. It’s also the easiest way to display the results of calculations or operations, making it perfect for seeing the output of your work.\nThink of console.log() as your window into what JavaScript is thinking. It’s like being able to peek inside the computer’s brain to see the values it’s working with.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#variables-and-basic-syntax",
    "href": "04-javascript.html#variables-and-basic-syntax",
    "title": "4  Javascript",
    "section": "4.5 Variables and Basic Syntax",
    "text": "4.5 Variables and Basic Syntax\nNow that you know how to execute JavaScript code, let’s start learning the language itself. Let’s return to our first example:\n\nJavscriptResult\n\n\nconst monthlyRent = 500;\nconst yearlyRent = monthlyRent * 12;\nconsole.log(yearlyRent);\n\n\n6000\n\n\n\n\n4.5.1 What is a Variable?\nA variable is like a labeled box where you can store information. Just like you might have a box labeled “Winter Clothes” in your closet that contains sweaters and coats, a variable has a name and contains some data that you want to use later.\nIn programming, variables let you store values (like numbers, text, or more complex data) and give them meaningful names so you can refer to them throughout your code. Instead of writing the number 500 everywhere you need it, you can store it in a variable called monthlyRent and use that name instead.\nThink of variables as creating shortcuts with descriptive names. Rather than remembering “that number 500 from line 3,” you can just refer to monthlyRent and immediately understand what that value represents.\n\n\n4.5.2 Declaring Variables\nThe first thing that happens in our example is that we declare a variable, monthlyRent. We use the const keyword to let JavaScript know we’re declaring a variable. There are actually two main ways to declare variables in JavaScript: const and let.\nconst is used for values that won’t change after you create them. Once you set const monthlyRent = 500, you can’t change monthlyRent to a different value later in your code. This is perfect for values that should stay the same throughout your program.\nlet is used for values that might change. If you declared let currentScore = 0 at the beginning of a game, you could update it later with currentScore = 10 or currentScore = 25as the player earns points.\nIn psychology experiments, you might use const for things like the number of trials or instruction text that never change, and let for things like the current trial number or participant responses that update throughout the experiment.\n\n\n4.5.3 Variable Naming Rules\nVariables can be called almost anything. You can’t use keywords. An example would be const (e.g., const = 15). const is a keyword so it can’t be used as a variable name. You do want to give your variables good names, even if they end up being long sometimes. Imagine we have a huge file and 200 lines below we see the variable named monthlyRent: we’ll know instantly what this variable does and we won’t have to go try to read other parts of the code to figure it out. Always, always, always use good variable names. Seriously. Put time into it. Naming things is hard and it’s a big part of your job.\n\n\n4.5.4 Why Use Variables?\nOkay, so after line one, I have a variable named monthlyRent that I can use as much as I want. In this case, it represents the number 500 but it also semantically represents monthly rent. Imagine if I had 1000 lines between where monthlyRent is declared and where yearlyRent is calculated. I could have just put 500 directly in yearlyRent but I don’t because I now understand how that’s calculated just by reading the code. Use variables. Use them everywhere. It makes your code way easier to read. Also, later, if my monthly rent changes, I can change it one place and everywhere I reference monthlyRent and yearlyRent get updated automatically. Powerful stuff.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#working-with-different-types-of-data",
    "href": "04-javascript.html#working-with-different-types-of-data",
    "title": "4  Javascript",
    "section": "4.6 Working with Different Types of Data",
    "text": "4.6 Working with Different Types of Data\nSo far we’ve mostly dealt with numbers. Let’s go further and start working with words and characters. In programming, we refer to these things as strings, as in a string of one-letter characters.\n\n4.6.1 Strings\n\nJavscriptResult\n\n\nlet myName = \"Nick Brosowsky\"\n\nconsole.log(myName);\n\n\n\"Nick Brosowsky\"\n\n\n\nYou can see I use the ” (double quote) to enclose everything I want to be in the string. In JavaScript you can also use ’ (single quote) and ` (back tick) as well to demarcate strings.\nStrings, as you may imagine, are everywhere in programming. We’re constantly keeping track of names, addresses, names of products, cities, etc. and thus constantly need strings.\n\n\n4.6.2 String Concatenation\nStrings let you connect them together through string concatenation. If I want to be able to greet someone based on their name, I might have something like this:\n\nJavascriptResult\n\n\nconst firstName = \"Nick\";\nconst lastName = \"Brosowsky\";\n\nconst sentence = \"Hello \" + firstName + \" \" + lastName + \"! How are you!?\";\n\nconst sentenceWithTemplate = `Hello ${firstName} ${lastName}! How are you!?`;\n\nconsole.log(sentence);\nconsole.log(sentenceWithTemplate);\n\n\n\"Hello Nick Brosowsky! How are you!?\"\n\"Hello Nick Brosowsky! How are you!?\"\n\n\n\nThe first way is the old way. We can use the + to tell JavaScript to connect two strings. Notice how we have to insert the space between firstName and lastName. The computer only does exactly what you tell it to do. If you don’t insert that space, it doesn’t get put there.\nThe second line is the new way of doing this. JavaScript got a large update in 2015 and it made things a lot easier. Now you can use the back tick (notice the first uses a double quote, you must use back ticks to do template strings) to do template strings. If you do that, anything inside of ${yourVariableHere} gets output in the string (Note that you can typically find the backtick key on the top-left of your keyboard).\nWhen we start programming our experiments in JsPsych, we’re often going to be using backticks and template strings.\n\n\n4.6.3 Booleans\nSometimes you just need a simple true or false. These are where booleans are useful. Something like a light switch’s state is best represented by a boolean. A light is either on (true) or off (false). You’d have something like const lightIsOn = true;. Useful and you’ll see them everywhere. Notice that true doesn’t need any quotations around it.\n\nJavaScriptResult\n\n\nlet lightIsOn = true;\nlet doorIsOpen = false;\nlet experimentIsRunning = true;\n\nconsole.log(\"Light is on:\", lightIsOn);\nconsole.log(\"Door is open:\", doorIsOpen);\nconsole.log(\"Experiment running:\", experimentIsRunning);\n\n\n\"Light is on: true\"\n\"Door is open: false\"\n\"Experiment running: true\"",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#controlling-the-flow",
    "href": "04-javascript.html#controlling-the-flow",
    "title": "4  Javascript",
    "section": "4.7 Controlling the Flow",
    "text": "4.7 Controlling the Flow\nSometimes I want to modify the flow of how my program works. By default, JavaScript executes code line by line from top to bottom, but often you need your program to make decisions and take different paths based on different conditions. Maybe you want to show different feedback depending on whether a participant got an answer right or wrong, or perhaps you want to present different stimuli based on their previous responses. This is where conditional statements become very useful for controlling the flow of your program.\n\n4.7.1 Basic if-else Statements\nThe most basic way to control program flow is with an if-else statement. This lets you run one piece of code when a condition is true, and a different piece of code when it’s false. Imagine if we tried this:\n\nJavaScriptResult\n\n\nlet skyIsBlue = true;\n\nif (skyIsBlue) {\n  console.log(\"The sky is blue!\");\n} else {\n  console.log(\"The sky is … not blue?\");\n}\n\n\n\"The sky is blue!\"\n\n\n\nIn the above example, the condition inside of the parentheses is evaluated and if it’s true, the first block is run and the second is skipped. If it is false, the second block is run and the first block is skipped. Paste that code into your browser console and play with it. You also do not have to have an else block.\nOf course, we can go ahead and change the value of skyIsBlue and this would change the output:\n\nJavascriptResult\n\n\nlet skyIsBlue = true;\n\n// change it!\nskyIsBlue = false\n\nif (skyIsBlue) {\n  console.log(\"The sky is blue!\");\n} else {\n  console.log(\"The sky is … not blue?\");\n}\n\n\n\"The sky is … not blue?\"\n\n\n\n\n\n4.7.2 Comparison Operators\nSo far we’ve only used variables that are already true or false, but most of the time you’ll need to compare values to make decisions. JavaScript provides several operators that let you compare numbers, strings, and other values to create true/false conditions.\n\nJavaScriptResult\n\n\n// if you see three lines, it's just three = in a row, ===. the font just combines them into one big character\nif (2 + 2 === 4) {\n  console.log(\n    \"Oh thank god, the fundamental principles of mathematics still hold true.\"\n  );\n} else {\n  console.log(\"Uh, panic?\");\n}\n\n\n\"Oh thank god, the fundamental principles of mathematics still hold true.\"\n\n\n\nYou can put any expression (a technical term, means anything you can stick on the right side of an equal sign, we’ll explore it more as we go) inside of the if statement. In this case, we are asking, is two plus two still equal to four. If this is true (I hope so) then again the first block will be run. If not, the second will be.\nLet’s talk about === for a second. If you use just one = in JavaScript, it means “is assigned to.” So when we have const isBrianCool = true; you can verbalize that as “The variable isBrianCool is assigned to true.” Thus we can’t use that inside of the if statement because that’s not what we mean. We’re trying to ask a question, not assign something. We’re trying to ask “is two plus two equal to four.” Enter the triple equals. Triple equals is the same as asking “is this equal to that.” We use the triple equals instead of the double equals because double equals does a lot of funny business that usually we don’t want it to do. It does what’s called coercion and we’ll talk about that below. But in an example 2 == “2” but it does not 2 === “2”. String 2 is double equal to number 2 but string 2 is not triple equal to number 2.\nThere’s also !==. This is asking “is this not equal to that.” Lastly you can ask with numbers &gt;, &gt;=, &lt;, &lt;= as well to ask if numbers less than or greater than too.\n\n\n4.7.3 Multiple Conditions with else if\nOften you’ll need to check more than just two possibilities. When you have multiple conditions to test, you can chain them together using else if statements. This lets you create a series of checks that run in order until one condition is met.\n\nJavaScriptResult\n\n\nlet friendsAtYourParty = 10;\n\nif (friendsAtYourParty === 0) {\n  console.log(\"Cool, now I have a lot of nachos to myself.\");\n} else if (friendsAtYourParty &lt;= 4) {\n  console.log(\"Perfect amount to play some Mario Kart.\");\n} else {\n  console.log(\"Wooooo turn on the dance music!\");\n}\n\n\n\"Wooooo turn on the dance music!\"",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#applying-flow-control",
    "href": "04-javascript.html#applying-flow-control",
    "title": "4  Javascript",
    "section": "4.8 Applying Flow Control",
    "text": "4.8 Applying Flow Control\nBefore moving on, let’s apply our knowledge and explore how using variables, comparison operators and flow control can be important tools for coding psychology experiments. Every time you need to evaluate participant performance, provide feedback, or make decisions about what to present next, you’re using these concepts. Here are some common examples:\n\n4.8.0.1 Checking Response Accuracy\nWe can check whether a participant’s response was the correct one.\n\nJavaScriptResult\n\n\nlet correctAnswer = \"red\";\nlet participantResponse = \"blue\";\n\nif (participantResponse === correctAnswer) {\n  console.log(\"Correct! Well done.\");\n} else {\n  console.log(\"Incorrect. The correct answer was \" + correctAnswer);\n}\n\n\n\"Incorrect. The correct answer was red\"\n\n\n\n\n\n4.8.0.2 Evaluating Reaction Times\nWe can add multiple conditions to check how long it took someone to respond and provide feedback on whether it was too fast or too slow.\n\nJavaScriptResult\n\n\nlet reactionTime = 400; // milliseconds\n\nif (reactionTime &lt; 200) {\n  console.log(\"Too fast! You may have responded before seeing the stimulus.\");\n} else if (reactionTime &gt; 1000) {\n  console.log(\"Too slow! Try to respond more quickly.\");\n} else {\n  console.log(\"Good reaction time: \" + reactionTime + \"ms\");\n}\n\n\n\"Good reaction time: 400ms\"\n\n\n\n\n\n4.8.1 Combining Multiple Conditions\nWe can even do both at the same time, though it gets a bit complicated.\n\nJavaScriptResult\n\n\nlet accuracy = true;\nlet reactionTime = 450;\n\nif (accuracy === true && reactionTime &lt; 500) {\n  console.log(\"Excellent! Correct and fast response.\");\n} else if (accuracy === true && reactionTime &gt;= 500) {\n  console.log(\"Correct, but try to respond faster next time.\");\n} else if (accuracy === false && reactionTime &lt; 300) {\n  console.log(\"Incorrect and very fast - you may be guessing.\");\n} else {\n  console.log(\"Incorrect response. Take your time to think.\");\n}\n\n\n\"Correct, but try to respond faster next time.\"\n\n\n\nThese conditional statements form the backbone of experiment logic, allowing your programs to adapt and respond intelligently to participant behavior in real-time.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#loops",
    "href": "04-javascript.html#loops",
    "title": "4  Javascript",
    "section": "4.9 Loops",
    "text": "4.9 Loops\nOkay so now what if I want to do one thing multiple times? I could do something like this:\n\nJavaScriptResult\n\n\nlet friendsAtYourParty = 0;\n\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty = friendsAtYourParty + 1;\n\nconsole.log(friendsAtYourParty);\n\n\n10\n\n\n\nThat’s annoying though. I wish there was a better way. Before we explore that, let’s chat about this example a bit more.\n\n4.9.1 let vs const\nWe used let instead of const. Things that are const cannot be reassigned later. In general I find this to be of minor help but others do not so I leave you to make your own judgement call. In general one should try to follow the “principle of least power.” You should always choose the least powerful “thing” to accomplish whatever you’re trying to do. Things with less power tend to be simpler and simple things are less prone to having or causing bugs. Why don’t you cut your hair with garden shears? You could, it’d work, but it’s way easier to screw it up and has worse consequences. Same general idea here. Right tool for the right job.\nWe use let here because you can see on the subsequent lines we do reassign friendsAtYourParty to be a different number. If you used const your code would crash because const won’t let you do that. Thus here we use let. There’s another one called var that is the old way of doing JavaScript. There are differences but I don’t see a reason to use var at all anymore. It behaves more similar to let.\n\n\n4.9.2 Shortcuts for Adding Numbers\nBefore we get to loops, let’s show you a few shortcuts for adding one to a thing:\n\nJavaScriptResult\n\n\nlet friendsAtYourParty = 0;\n\nfriendsAtYourParty = friendsAtYourParty + 1;\nfriendsAtYourParty += 1;\nfriendsAtYourParty++;\n\nconsole.log(friendsAtYourParty);\n\n\n3\n\n\n\nThose three lines are equivalent. They all do the exact same thing: they add one to the existing total. The second one, the plus-equals line, you can put any number there and it’ll add that amount to total, so friendsAtYourParty += 15; would add 15 to the total. It also works with -= (subtraction,) as well as *= (multiplication,) /= (division,) and **= (exponent.) The last one, friendsAtYourParty++;,just signify add one. They more-or-less mean the same thing (there’s a subtle difference of when it adds one that should never matter to you) but suffice to say everyone in the JavaScript community always does the ++ after; I’ve never seen anyone do it before in JavaScript. -- works as well to subtract one.\n\n\n4.9.3 for Loops\nOkay, so now let’s see how to use a loop to achieve the same effect as above without all that repetitive code:\n\nJavaScriptResult\n\n\nlet friendsAtYourParty = 0;\n\nfor (let i = 0; i &lt; 10; i++) {\n  friendsAtYourParty++;\n}\n\nconsole.log(friendsAtYourParty);\n\n\n10\n\n\n\nThis is a for loop which is the most common kind of loop you’ll use. Inside the parentheses are three statements and you need all of them. The let i = 0; is you defining your control variable that will control the loop. For some reason people always use i, not sure why. It’s just tradition. It really could be anything. The second statement i &lt; 10 is just like an if statement condition - as soon as it’s false it breaks the loop. The last statement, i++ is what happens at the end of every loop. In our case, we increment the control variable i so that it creeps closer to the end of the loop each time.\nOf course, what happens inside the loop can be any code at all. It will just run each time the loop completes. For example:\n\nJavaScriptResult\n\n\nfor (let i = 0; i &lt; 3; i++) {\n  console.log(\"Print me 3 times!\")\n}\n\n\n\"Print me 3 times!\"\n\"Print me 3 times!\"\n\"Print me 3 times!\"\n\n\n\nIt’s also important to note that we always have access to the variable i inside the loop. For example, we use our template string with backticks to insert i on each loop:\n\nJavaScriptResult\n\n\nfor (let i = 0; i &lt; 3; i++) {\n  console.log(`This is loop ${i}`)\n}\n\n\n\"This is loop 0\"\n\"This is loop 1\"\n\"This is loop 2\"\n\n\n\nAn important note: in coding, we start counting from 0. In English, we count 1, 2, 3, 4, 5, etc. but in coding we count 0, 1, 2, 3, 4, etc. So the fifth element of a string is index 4 (where index is how we’d refer to where that item is in the string). Index 0 is the first element. It’s weird but you get used to it and it makes a lot of things easier.\n\n\n4.9.4 Avoiding Infinite Loops\nSometimes, if you mess up what’s inside the control condition for the loop, you’ll get a runaway loop that’ll never complete. This is called an infinite loop and it’ll lock up and crash your code. Something like this:\n// DON'T RUN THIS - it will crash your browser!\nlet friendsAtYourParty = 1;\nfor (let i = 0; i &gt; -1; i++) {  // i will never be less than -1\n  friendsAtYourParty++;\n}\nSince i starts at 0 and keeps getting bigger, the condition i &gt; -1 will always be true. Thus it’ll continue going until it crashes your code. Be careful of these. They’re nasty bugs that can lock up your browser. If your browser freezes while running some code, you’ll need to close the browser and re-open it.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#functions",
    "href": "04-javascript.html#functions",
    "title": "4  Javascript",
    "section": "4.10 Functions",
    "text": "4.10 Functions\nA function is a bit of re-usable code. Just how we like to re-use CSS classes, we love to re-use code. Functions let you write a piece of code once and then use it over and over again whenever you need it.\nThink of a function as a set of instructions that you can name and save for later. When you “call” the function (use its name with parentheses), JavaScript runs all the code inside that function. Let’s start with a simple example:\n\nJavaScriptResult\n\n\nfunction sayHello() {\n  console.log(\"Hello there!\");\n  console.log(\"How are you today?\");\n}\n\nsayHello();\nsayHello();\n\n\n\"Hello there!\"\n\"How are you today?\"\n\"Hello there!\"\n\"How are you today?\"\n\n\n\nSee how we defined the function once, but then called it twice? Each time we write sayHello(), JavaScript runs all the code inside the curly braces. This saves us from having to write the same console.log statements over and over.\nNow let’s make functions more powerful by giving them information to work with:\n\nJavaScriptResult\n\n\nfunction addTwo(number) {\n  let result = number + 2;\n  return result;\n}\n\nlet answerOne = addTwo(5);\nconsole.log(answerOne);\n\nlet answerTwo = addTwo(12);\nconsole.log(answerTwo);\n\n\n7\n14\n\n\n\nThis isn’t super useful but hopefully it shows you the mechanics of how a function works. We created a function called addTwo. This function takes in one parameter, number and it returns that number with 2 added to it. We can now use that addTwo function as much as we want! Let’s make something a bit more useful.\n\n4.10.1 Functions with Multiple Parameters\nThe way to call a function is you add parentheses to the end of it, like this: someFunctionName(). If you see parentheses after a variable name, you instantly know that that’s a function. Inside of the parentheses go the parameters. These variables will be passed to the function that is being called in the order that you put them there. These input variables are called parameters.\n\nJavaScriptResult\n\n\nfunction greet(firstName, lastName, honorific, greeting) {\n  return `${greeting} ${honorific} ${lastName}! I'm extremely pleased you could join us, ${firstName}! I hope you enjoy your stay, ${honorific} ${lastName}.`;\n}\n\nconsole.log(greet(\"Nick\", \"Brosowsky\", \"Dr.\", \"Salutations\"));\nconsole.log(greet(\"Jack\", \"Sparrow\", \"Captain\", \"A-hoy\"));\n\n\n\"Salutations Dr. Brosowsky! I'm extremely pleased you could join us, Nick! I hope you enjoy your stay, Dr. Brosowsky.\"\n\"A-hoy Captain Sparrow! I'm extremely pleased you could join us, Jack! I hope you enjoy your stay, Captain Sparrow.\"\n\n\n\nNow rather than have to repeat ourselves over-and-over again with that long string, we can just call greet with the appropriate parameters. Here we use four parameters. The order is important that we send in the parameters because this will be the order the function receives these parameters. You can have as many or as few parameters as you like.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#built-in-functions",
    "href": "04-javascript.html#built-in-functions",
    "title": "4  Javascript",
    "section": "4.11 Built-In Functions",
    "text": "4.11 Built-In Functions\nLots of functions already exist for you! Smart people have created this commonly-used functions for things we often need. For example, say you have a string and you want to make everything lowercase, you can do this:\n\nJavaScriptResult\n\n\nlet sentence = \"ThIs HaS wEiRd CaSiNg On It\";\nlet lowerCaseSentence = sentence.toLowerCase();\nconsole.log(lowerCaseSentence);\n\n\n\"this has weird casing on it\"\n\n\n\nBuiltins that manipulate your data often follow the format of variableName.function(), where you add a dot to the end of your variable name and write the name of the builtin function after. However, there is also a set of Math and Date builtins that can be useful and follow a different format. There are actually so many builtins there’s no way we could ever cover all of them.\nInstead, I’ve created an appendix for your reference that you can use later. I still haven’t included everything available, but do include the ones that I’ve found most useful.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#arrays",
    "href": "04-javascript.html#arrays",
    "title": "4  Javascript",
    "section": "4.12 Arrays",
    "text": "4.12 Arrays\nSo far we’ve been working with individual pieces of data such as single numbers, strings, or booleans. But in psychology experiments (and many other coding contexts), you often need to work with collections of data. Maybe you want to store a list of all the stimuli you’ll present, or keep track of all the participant’s responses. This is where arrays and objects become incredibly useful for organizing and storing multiple pieces of related information.\nAn array is like a list that can hold multiple values. Think of it as a container where you can store many pieces of data in a specific order. Arrays are defined using square brackets with each item in the array separated by a comma. For example:\nlet myList = [\"zero\", \"one\", \"two\"]\nEach item in the array has a position (called an index) starting from 0. Once we’ve defined an array like let myList = [\"zero\", \"one\", \"two\"], we can later access it by referring to different positions in the array like this:\nmyList[0]\nmyList[2]\nHere are some examples to illustrate this point:\n\nJavaScriptResult\n\n\nlet colors = [\"red\", \"blue\", \"green\", \"yellow\"];\nlet reactionTimes = [450, 523, 389, 612, 445];\nlet responses = [true, false, true, true, false];\n\nconsole.log(\"First color:\", colors[0]);\nconsole.log(\"Third reaction time:\", reactionTimes[2]);\nconsole.log(\"Fifth response\", responses[4]);\n\n\n\"First color: red\"\n\"Third reaction times: 389\"\n\"Fifth response: false\"\n\n\n\nRemember that arrays start counting from 0, so the first item is at index 0, the second item is at index 1, and so on. You can access any item by putting its index number in square brackets after the array name. The length property tells you how many items are in the array.\n\n4.12.1 Array Built-In Functions\nArrays come with many built-in functions that are extremely useful for manipulating data inside an array (see Section A.4).\nFor example, it is quite simple to add something to the end of an array, like adding a new response time to the end of an array of response times using push. It’s also quite simple to join to arrays together using concat.\n\nJavaScriptResult\n\n\nlet responseTimes = [321, 444, 1023]\n\nresponseTimes.push(657)\n\nconsole.log(responseTimes)\n\nlet newResponseTimes = [1120, 990]\n\nlet allResponseTimes = responseTimes.concat(newResponseTimes)\n\nconsole.log(allResponseTimes)\n\n\n[ 321, 444, 1023, 657 ]\n[ 321, 444, 1023, 657, 1120, 990 ]\n\n\n\nMake sure you have a look through the built-in function appendix to get an idea of what is possible.\n\n\n4.12.2 Looping Through an Array\nOne of the most common things you’ll do with arrays is go through each item one by one. This is called “looping” or “iterating” through the array. Here’s how you can do it:\n\nJavaScriptResult\n\n\n\nconst colors = [\"red\", \"blue\", \"green\", \"yellow\"];\n\n// Loop through each color and print it\nfor (let i = 0; i &lt; colors.length; i++) {\n  console.log(colors[i]);\n}\n\n\n\"red\"\n\"blue\"\n\"green\"\n\"yellow\"\n\n\n\nLet’s break down what’s happening here:\n\ni is our counter variable that keeps track of which position we’re at in the array\ncolors.length gives us the total number of items in the array (4 in this case)\ncolors[i] uses the current value of i to access the item at that position in the array\nThe loop starts with i = 0 (first position), and continues as long as i &lt; colors.length\nEach time through the loop, i++ increases i by 1, moving us to the next position\n\nSo when i is 0, colors[i] gives us colors[0] which is “red”. When i is 1, colors[i] gives us colors[1] which is “blue”, and so on.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#objects",
    "href": "04-javascript.html#objects",
    "title": "4  Javascript",
    "section": "4.13 Objects",
    "text": "4.13 Objects\nObjects are like containers that store related information using names (called keys or properties; I’ll use property) instead of numbered positions. Think of an object as a way to group related data together, like all the information about a single participant or trial.\nTo define an object, you use curly brackets. Inside the curly brackets, you define both the property and the value that is stored in the property. It follows this format:\nlet newVariable = {\n  key1: \"value1\",\n  key2: \"value2\",\n  key3: \"value3\"\n}\nHere’s some examples of storing different kinds of information within each key, accessing and printing out the values of properties.\n\nJavaScriptResult\n\n\nconst participant = {\n  id: \"P001\",\n  age: 22,\n  condition: \"experimental\",\n  completed: true\n};\n\nconst trialData = {\n  stimulus: \"red circle\",\n  response: \"left\",\n  reactionTime: 450,\n  correct: true\n};\n\nconsole.log(\"Participant ID:\", participant.id);\nconsole.log(\"Trial stimulus:\", trialData.stimulus);\nconsole.log(\"Was response correct?\", trialData.correct);\n\n\n\"Participant ID: P001\"\n\"Trial stimulus: red circle\"\n\"Was response correct? true\"\n\n\n\nYou access object properties using dot notation (objectName.propertyName) or bracket notation (objectName[\"propertyName\"]). Objects are perfect for storing related information together in a organized way.\nAs with any other kind of data we store, we can manipulate objects.\n\nJavaScriptResult\n\n\nlet experimentData = {\n  participantCount: 0,\n  status: \"not started\"\n};\n\nexperimentData.participantCount = 25;  // Change existing property\nexperimentData.startDate = \"2025-08-07\";  // Add new property\nconsole.log(\"Updated experiment data:\", experimentData);\n\n// You can also use bracket notation\nexperimentData[\"endDate\"] = \"2025-08-14\";\nconsole.log(\"With end date:\", experimentData);\n\n\n\"Updated experiment data: {participantCount: 25, status: 'not started', startDate: '2025-08-07'}\"\n\"With end date: {participantCount: 25, status: 'not started', startDate: '2025-08-07', endDate: '2025-08-14'}\"\n\n\n\n\n4.13.1 Nested Arrays and Objects\nIt’s important to note that we can mix and match how data is stored. We can put arrays into objects, objects into arrays, and so forth. When we get to jsPsych in the next chapter, you’re going to see many examples of nested structures, so it’s good to see a simple version of that right now.\nHere’s one example of how we might store some participant data. We can see they have one id, but we need arrays to store their responses and their response times. Arrays are useful here because presumably this comes from a series of trials and we want to maintain their order in the data.\n\nJavaScriptResult\n\n\nlet participantData = {\n  id: 100,\n  responses: [\"blue\", \"red\", \"green\", \"red\"],\n  responseTimes: [564, 989, 520, 1020]\n};\n\nconsole.log(\"Participant ID:\", participantData.id);\nconsole.log(\"First response:\", participantData.responses[0]);\nconsole.log(\"Last reaction time:\", participantData.responseTimes[3]);\n\n\n\"Participant ID: 100\"\n\"First response: blue\"\n\"Last reaction time: 1020\"\n\n\n\nAnd perhaps we have many participants. In which case, we could store each participant’s data in an object, and put all those objects inside an array:\n\nJavaScriptResult\n\n\nlet allData = [\n  {\n    id: 100,\n    responses: [\"blue\", \"red\", \"green\", \"red\"],\n    responseTimes: [564, 989, 520, 1020]\n  },\n  {\n    id: 200,\n    responses: [\"green\", \"red\", \"blue\", \"red\"],\n    responseTimes: [332, 123, 500, 558]\n  },\n  {\n    id: 300,\n    responses: [\"red\", \"red\", \"blue\", \"red\"],\n    responseTimes: [668, 1200, 2554, 852]\n  }\n];\n\nconsole.log(\"Number of participants:\", allData.length);\nconsole.log(\"Second participant's ID:\", allData[1].id);\nconsole.log(\"Third participant's first response:\", allData[2].responses[0]);\n\n\n\"Number of participants: 3\"\n\"Second participant's ID: 200\"\n\"Third participant's first response: red\"\n\n\n\nWhen working with nested structures, you chain together the access methods. To get the first response from the second participant, you would use allData[1].responses[0]. Let’s break this down:\n\nallData[1] gets the second participant object\n.responses gets the responses array from that participant\n[0] gets the first response from that array\n\nFinally, many students get tripped up by the syntax when we mix formats like this. Pay careful attention to:\n\nBrackets and braces: Each [ must have a matching ], and each { must have a matching }\nCommas: Separate items in arrays and properties in objects (but no comma after the last item)\nQuotes: String values must be in quotes, property names can be with or without quotes\n\nYou’ll also notice how I indented the lines to help visualize the structure. This isn’t necessary because JavaScript ignores whitespace, but it’s important for readability. The indentation helps you see where each object and array opens and closes, and how they are nested together.\nThis nested structure is extremely common in psychology experiments where you need to organize complex data with multiple levels of information.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "04-javascript.html#applying-loops-functions-and-data-storage",
    "href": "04-javascript.html#applying-loops-functions-and-data-storage",
    "title": "4  Javascript",
    "section": "4.14 Applying Loops, Functions and Data Storage",
    "text": "4.14 Applying Loops, Functions and Data Storage\nOK, now let’s try to put some these concepts together and see how we might need to use them.\n\n4.14.1 Loops\nHere’s a simple example of how might store three participants data, then calculate the average accuracy across all three of them using a loop:\n\nJavaScriptResult\n\n\nconst participants = [\n  { id: \"P001\", age: 22, accuracy: 85, avgRT: 450 },\n  { id: \"P002\", age: 19, accuracy: 92, avgRT: 380 },\n  { id: \"P003\", age: 25, accuracy: 78, avgRT: 520 }\n];\n\n// Access some of the data\nconsole.log(\"First participant:\", participants[0].id);\nconsole.log(\"Second participant's accuracy:\", participants[1].accuracy + \"%\");\n\n// Calculate average accuracy across all participants\nlet totalAccuracy = 0;\n// 1. loop through and add the accuracy scores all together\nfor (let i = 0; i &lt; participants.length; i++) {\n  totalAccuracy += participants[i].accuracy;\n}\n// 2. divide the total accuracy by the number of participants\nconst avgAccuracy = totalAccuracy / participants.length;\nconsole.log(\"Average accuracy across participants:\", avgAccuracy + \"%\");\n\n\n\"First participant: P001\"\n\"Second participant's accuracy: 92%\"\n\"Average accuracy across participants: 85%\"\n\n\n\n\n\n4.14.2 A Data Validation Function\nFunctions are perfect for tasks you need to repeat many times in an experiment, like checking and validating trial data. Here’s a function that takes a trial object and performs several data quality checks, changing the feedback depending on what the participant did. Note the use of if statements and how we can change what is ‘returned’ inside the if statements.\n\nJavaScriptResult\n\n\n\nfunction validateTrialData(trial) {\n  // Check if response time is too slow (over 2 seconds)\n  if (trial.responseTime &gt; 2000) {\n    return \"Too slow\";\n  }\n\n  // Check if response time is suspiciously fast (under 200ms)\n  if (trial.responseTime &lt; 200) {\n    return \"Too fast\";\n  }\n\n  // Check accuracy by comparing response to correct answer\n  if (trial.response === trial.correctAnswer) {\n    return \"Correct\";\n  } else {\n    return \"Incorrect\";\n  }\n}\n\n// Example trial data\nconst trial1 = {\n  stimulus: \"red circle\",\n  correctAnswer: \"left\",\n  response: \"left\",\n  responseTime: 450\n};\n\nconst trial2 = {\n  stimulus: \"blue square\", \n  correctAnswer: \"right\",\n  response: \"left\",\n  responseTime: 650\n};\n\nconst trial3 = {\n  stimulus: \"green triangle\",\n  correctAnswer: \"right\", \n  response: \"right\",\n  responseTime: 2500\n};\n\nconsole.log(\"Trial 1:\", validateTrialData(trial1));\nconsole.log(\"Trial 2:\", validateTrialData(trial2));\nconsole.log(\"Trial 3:\", validateTrialData(trial3));\n\n\n\"Trial 1: Correct\"\n\"Trial 2: Incorrect\"\n\"Trial 3: Too slow\"\n\n\n\n\n\n4.14.3 Looping a Data Validation Function\nWe can expand on that, to create something a bit more complicated. In the example below, we have four trials all stored in an array. We’re going to loop through them and count how many times they were correct/incorrect/slow/fast. See if you can read through the code below and understand the steps we’ve taken to accomplish that.\n\nJavaScriptResult\n\n\nfunction validateTrialData(trial) {\n  // Check if response time is too slow (over 2 seconds)\n  if (trial.responseTime &gt; 2000) {\n    return \"Too slow\";\n  }\n\n  // Check if response time is suspiciously fast (under 200ms)\n  if (trial.responseTime &lt; 200) {\n    return \"Too fast\";\n  }\n\n  // Check accuracy by comparing response to correct answer\n  if (trial.response === trial.correctAnswer) {\n    return \"Correct\";\n  } else {\n    return \"Incorrect\";\n  }\n}\n\n// Array of trial data from an experiment\nconst experimentData = [\n  { stimulus: \"red\", correctAnswer: \"left\", response: \"left\", responseTime: 345 },\n  { stimulus: \"blue\", correctAnswer: \"right\", response: \"right\", responseTime: 189 },\n  { stimulus: \"green\", correctAnswer: \"left\", response: \"right\", responseTime: 567 },\n  { stimulus: \"yellow\", correctAnswer: \"right\", response: \"right\", responseTime: 2100 }\n];\n\n// Validate each trial and count results\n// start each coutner at 0\nlet correctCount = 0;\nlet incorrectCount = 0;\nlet tooSlowCount = 0;\nlet tooFastCount = 0;\n\n// loop through the experimentData array\nfor (let i = 0; i &lt; experimentData.length; i++) {\n  const result = validateTrialData(experimentData[i]);\n  console.log(`Trial ${i + 1}: ${result}`);\n\n  if (result === \"Correct\") {\n    correctCount++;\n  } else if (result === \"Incorrect\") {\n    incorrectCount++;\n  } else if (result === \"Too slow\") {\n    tooSlowCount++;\n  } else if (result === \"Too fast\") {\n    tooFastCount++;\n  }\n}\n\nconsole.log(`\\nSummary:`);\nconsole.log(`Correct: ${correctCount}`);\nconsole.log(`Incorrect: ${incorrectCount}`);\nconsole.log(`Too slow: ${tooSlowCount}`);\nconsole.log(`Too fast: ${tooFastCount}`);\n\n\n\"Trial 1: Correct\"\n\"Trial 2: Too fast\"\n\"Trial 3: Incorrect\"\n\"Trial 4: Too slow\"\n\n\"Summary:\"\n\"Correct: 1\"\n\"Incorrect: 1\"\n\"Too slow: 1\"\n\"Too fast: 1\"",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Javascript</span>"
    ]
  },
  {
    "objectID": "05-debugging-javascript.html",
    "href": "05-debugging-javascript.html",
    "title": "5  Debugging JavaScript",
    "section": "",
    "text": "5.1 How JavaScript Handles Errors\nDebugging is an essential skill for any programmer. When your code doesn’t work as expected, systematic debugging helps you identify and fix the problem quickly. As a beginner, you’ll encounter certain types of errors frequently. Learning to recognize and resolve them will make you a more confident programmer.\nImportant: When JavaScript encounters an error, it stops executing your code at that exact point. This behavior is actually helpful for debugging because it tells you precisely where the problem occurred.\nConsole output:\nNotice that the last two console.log() statements never execute because JavaScript stopped when it hit the error on line 3.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Debugging JavaScript</span>"
    ]
  },
  {
    "objectID": "05-debugging-javascript.html#how-javascript-handles-errors",
    "href": "05-debugging-javascript.html#how-javascript-handles-errors",
    "title": "5  Debugging JavaScript",
    "section": "",
    "text": "console.log(\"This line runs\");\nconsole.log(\"This line also runs\");\nlet result = someUndefinedVariable + 5;  // Error occurs here\nconsole.log(\"This line NEVER runs\");     // Code stops at the error above\nconsole.log(\"Neither does this line\");\n\nThis line runs\nThis line also runs\nReferenceError: someUndefinedVariable is not defined\n    at script.js:3:14\n\n\n5.1.1 Using This to Your Advantage\nYou can use JavaScript’s “stop on error” behavior to narrow down where problems occur:\nconsole.log(\"Step 1: Starting the program\");\n\nlet numbers = [1, 2, 3];\nconsole.log(\"Step 2: Created array\");\n\nlet sum = 0;\nconsole.log(\"Step 3: Initialized sum\");\n\n// If you see \"Step 3\" but not \"Step 4\" in the console,\n// you know the error is in the next line\nfor (let i = 0; i &lt;= numbers.length; i++) {  // Bug: should be &lt; not &lt;=\n    console.log(\"Step 4: In loop, i =\", i);\n    sum += numbers[i];  // This will error when i = 3 (undefined)\n}\n\nconsole.log(\"Step 5: Loop finished\");  // This won't run if there's an error above\nIf you see steps 1-3 but the program stops there, you know the problem is in the loop.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Debugging JavaScript</span>"
    ]
  },
  {
    "objectID": "05-debugging-javascript.html#common-types-of-javascript-errors",
    "href": "05-debugging-javascript.html#common-types-of-javascript-errors",
    "title": "5  Debugging JavaScript",
    "section": "5.2 Common Types of JavaScript Errors",
    "text": "5.2 Common Types of JavaScript Errors\n\n5.2.1 Syntax Errors\nThese occur when your code violates JavaScript’s grammar rules. The browser can’t even run your code when syntax errors are present. These are often the most frustrating for beginners because they prevent any code from running.\n\n5.2.1.1 Missing or Mismatched Quotation Marks\nSingle vs. Double Quote Mismatches:\n// Wrong - mixing quote types\nlet message = \"Hello world';  // Error: starts with \" but ends with '\nlet name = 'Alice\";           // Error: starts with ' but ends with \"\n\n// Correct - matching quote types\nlet message = \"Hello world\";  // Both double quotes\nlet name = 'Alice';           // Both single quotes\n\n\n5.2.1.2 Missing Brackets and Braces\nArray Brackets [ ]:\n// Wrong - missing closing bracket\nlet colors = [\"red\", \"blue\", \"green\";  // Error: missing ]\nlet numbers = [1, 2, 3, 4, 5;          // Error: missing ]\n\n// Wrong - missing opening bracket\nlet colors = \"red\", \"blue\", \"green\"];  // Error: missing [\n\n// Correct\nlet colors = [\"red\", \"blue\", \"green\"];\nObject Braces { }:\n// Wrong - missing closing brace\nlet person = {\n    name: \"Alice\",\n    age: 25\n;  // Error: missing }\n\n// Wrong - missing opening brace\nlet person = \n    name: \"Alice\",\n    age: 25\n};  // Error: missing {\n\n// Correct\nlet person = {\n    name: \"Alice\",\n    age: 25\n};\nFunction Parentheses ( ) and Braces { }:\n// Wrong - missing closing parenthesis\nfunction greet(name {  // Error: missing )\n    console.log(\"Hello \" + name);\n}\n\n// Wrong - missing closing brace\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n  // Error: missing }\n\n// Correct\nfunction greet(name) {\n    console.log(\"Hello \" + name);\n}\n\n\n5.2.1.3 Complex Nested Structures\nWhen you combine arrays, objects, and strings, tracking matching symbols becomes challenging:\nWrong - Multiple syntax errors:\nlet students = [\n    {\n        name: \"Alice,          // Error: missing closing quote\n        grades: [85, 92, 78,   // Error: missing closing bracket\n        info: \"Honor student\"\n    },  // Error: missing closing brace for first object\n    {\n        name: \"Bob\",\n        grades: [76, 88, 91],\n        info: \"Regular student\"\n    }\n;  // Error: missing closing bracket for arra\nCorrect version:\nlet students = [\n    {\n        name: \"Alice\",         // Fixed: added closing quote\n        grades: [85, 92, 78],  // Fixed: added closing bracket\n        info: \"Honor student\"\n    },                         // Fixed: proper object closing\n    {\n        name: \"Bob\",\n        grades: [76, 88, 91],\n        info: \"Regular student\"\n    }\n];                            // Fixed: added closing bracket for array\nOther Common Syntax Errors:\n// Missing semicolon (usually not critical, but good practice)\nlet name = \"John\"\nconsole.log(name)\n\n// Missing comma in arrays or objects\nlet colors = [\"red\" \"blue\", \"green\"];  // Missing comma after \"red\"\nlet person = {\n    name: \"Alice\"\n    age: 25  // Missing comma after \"Alice\"\n};\nHow to spot syntax errors: They usually prevent your code from running at all, and the browser console will show error messages like:\n\nSyntaxError: Unexpected token\nSyntaxError: Unterminated string literal\nSyntaxError: Unexpected end of input\nSyntaxError: Missing ) after argument list\n\n\n\n\n5.2.2 Reference Errors\nThese happen when you try to use a variable that doesn’t exist or hasn’t been declared yet.\n// Using a variable before declaring it\nconsole.log(userName);  // ReferenceError: userName is not defined\nlet userName = \"Alice\";\n\n// Misspelling a variable name\nlet favoriteColor = \"blue\";\nconsole.log(favoritColor);  // ReferenceError: favoritColor is not defined\n\n\n5.2.3 Type Errors\nThese occur when you try to perform an operation on a value that doesn’t support that operation.\n// Trying to call a method on undefined\nlet person;\nconsole.log(person.name);  // TypeError: Cannot read property 'name' of undefined\n\n// Treating a number like a function\nlet age = 25;\nage();  // TypeError: age is not a function\n\n\n5.2.4 Logic Errors\nThese are the trickiest because your code runs without error messages, but it doesn’t do what you intended.\n// Wrong comparison operator\nlet score = 85;\nif (score = 90) {  // Should be == or ===, not =\n    console.log(\"Perfect score!\");\n}\n\n// Off-by-one errors in loops\nfor (let i = 1; i &lt;= 5; i++) {  // If you meant to start at 0\n    console.log(\"Item \" + i);\n\n\n5.2.5 Matching and Closing Syntax Errors\nThese are among the most common syntax errors beginners encounter, especially when working with complex data structures that mix text, arrays, and objects. JavaScript requires that every opening symbol has a matching closing symbol.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Debugging JavaScript</span>"
    ]
  },
  {
    "objectID": "05-debugging-javascript.html#debugging-strategies",
    "href": "05-debugging-javascript.html#debugging-strategies",
    "title": "5  Debugging JavaScript",
    "section": "5.3 Debugging Strategies",
    "text": "5.3 Debugging Strategies\n\n5.3.1 Read Error Messages Carefully\nError messages might seem intimidating, but they contain valuable information:\nError message example: ReferenceError: userName is not defined // at script.js:5:13\nThis tells you:\n\nType of error: ReferenceError\nWhat’s wrong: userName is not defined\nWhere: script.js, line 5, character 13\n\n\n\n5.3.2 Use console.log() for Debugging\nThis is your best friend for understanding what your code is actually doing:\nlet numbers = [1, 2, 3, 4, 5];\nlet sum = 0;\n\nconsole.log(\"Starting sum:\", sum);  // Check initial value\n\nfor (let i = 0; i &lt; numbers.length; i++) {\n    console.log(\"Current number:\", numbers[i]);  // Check each iteration\n    sum += numbers[i];\n    console.log(\"Sum so far:\", sum);  // Check running total\n}\n\nconsole.log(\"Final sum:\", sum);  // Check final result\n\n\n5.3.3 Visual Debugging for Syntax Errors\nUse proper indentation to see structure clearly:\n// Hard to debug - poor indentation\nlet data = [{name: \"Alice\", scores: [85, 92]}, {name: \"Bob\", scores: [76, 88]}];\n\n// Easy to debug - good indentation\nlet data = [\n    {\n        name: \"Alice\", \n        scores: [85, 92]\n    }, \n    {\n        name: \"Bob\", \n        scores: [76, 88]\n    }\n];\nCount your symbols. Every opening symbol needs a closing one:\nlet complex = [        // 1 opening [\n    {                  // 1 opening {\n        name: \"test\",  // quotes match ✓\n        data: [1, 2]   // 1 opening [, 1 closing ] ✓\n    }                  // 1 closing } ✓\n];                     // 1 closing ] ✓\nUse your code editor’s features:\n\nMost editors highlight matching brackets/braces\nMany editors show syntax errors with red underlines\nSome editors auto-complete closing symbols\n\n\n\n5.3.4 Check Your Variable Values\nOften bugs happen because variables don’t contain what you think they do:\nlet userInput = \"25\";  // This is a string, not a number!\nlet age = userInput + 5;\nconsole.log(\"Age:\", age);  // Output: \"255\" (string concatenation)\n\n// Debug by checking the type\nconsole.log(\"Type of userInput:\", typeof userInput);\nconsole.log(\"Value of userInput:\", userInput);\n\n// Fix by converting to number\nlet age = parseInt(userInput) + 5;\nconsole.log(\"Corrected age:\", age);  // Output: 30\n\n\n5.3.5 Isolate the Problem\nWhen you have a lot of code, narrow down where the problem occurs:\n// Instead of running everything at once, test parts separately\nfunction calculateTotal(price, tax) {\n    console.log(\"Price:\", price, \"Tax:\", tax);  // Debug inputs\n    let total = price + (price * tax);\n    console.log(\"Calculated total:\", total);    // Debug output\n    return total;\n}\n\n// Test with known values\nlet result = calculateTotal(100, 0.08);\nconsole.log(\"Final result:\", result);\n\n\n5.3.6 Use the Browser Developer Tools\nOpening Developer Tools: - Chrome/Edge: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac) - Firefox: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac)\nConsole Tab: Shows error messages and console.log() output\nSources Tab: Lets you set breakpoints to pause code execution\n\n\n5.3.7 Step-by-Step Debugging Process\nWhen you encounter a bug, follow this systematic approach:\n\nRead the error message (if there is one) and note the line number\nCheck that line and the lines around it for obvious mistakes\nFor syntax errors: Count opening and closing symbols - they should match\nAdd console.log() statements before and after the problematic area\nRun your code and examine the console output\nCompare expected vs. actual values in your console logs\nMake one small change at a time and test again\nRemove debugging console.log() statements once the bug is fixed\n\n\n\n5.3.8 Prevention Tips\n\nWrite code in small pieces and test each piece before moving on\nUse meaningful variable names to avoid confusion\nBe consistent with your coding style (indentation, spacing, naming)\nComment your code to remember what each part does\nTest with different inputs to catch edge cases\n\n\n\n5.3.9 Common Beginner Debugging Mistakes\n\nAssuming the error is complex when it’s often something simple like a typo\nChanging multiple things at once instead of testing one change at a time\nNot reading error messages carefully\nForgetting to save files before testing changes\nLooking at the wrong file or line number\n\nRemember: every programmer, no matter how experienced, spends time debugging. It’s a normal and important part of the development process. The key is to approach it systematically and learn from each bug you encounter.",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Debugging JavaScript</span>"
    ]
  },
  {
    "objectID": "05-debugging-javascript.html#debugging-example",
    "href": "05-debugging-javascript.html#debugging-example",
    "title": "5  Debugging JavaScript",
    "section": "5.4 Debugging Example",
    "text": "5.4 Debugging Example\nLet’s walk through debugging a common beginner mistake:\n// Buggy code: trying to calculate average\nlet scores = [85, 92, 78, 96, 88];\nlet total = 0;\n\nfor (let i = 0; i &lt;= scores.length; i++) {  // Bug: should be &lt; not &lt;=\n    total += scores[i];\n}\n\nlet average = total / scores.length;\nconsole.log(\"Average:\", average);  // Output: NaN (Not a Number)\nDebugging steps:\n// Step 1: Add debugging to see what's happening\nlet scores = [85, 92, 78, 96, 88];\nlet total = 0;\n\nconsole.log(\"Array length:\", scores.length);  // Debug: check array size\n\nfor (let i = 0; i &lt;= scores.length; i++) {\n    console.log(\"Index:\", i, \"Value:\", scores[i]);  // Debug: check each iteration\n    total += scores[i];\n    console.log(\"Total so far:\", total);  // Debug: check running total\n}\n\nlet average = total / scores.length;\nconsole.log(\"Final total:\", total);  // Debug: check final total\nconsole.log(\"Average:\", average);\nConsole output reveals the problem:\nArray length: 5\nIndex: 0 Value: 85\nTotal so far: 85\nIndex: 1 Value: 92\nTotal so far: 177\nIndex: 2 Value: 78\nTotal so far: 255\nIndex: 3 Value: 96\nTotal so far: 351\nIndex: 4 Value: 88\nTotal so far: 439\nIndex: 5 Value: undefined  // Problem! Index 5 doesn't exist\nTotal so far: NaN          // Adding undefined makes total NaN\nThe fix:\n// Change &lt;= to &lt; in the loop condition\nfor (let i = 0; i &lt; scores.length; i++) {  // Fixed!\n    total += scores[i];\n}",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Debugging JavaScript</span>"
    ]
  },
  {
    "objectID": "06-L02.html",
    "href": "06-L02.html",
    "title": "6  Lab 2: JS Exercises",
    "section": "",
    "text": "6.1 Instructions\nThis Unit’s lab focuses on building your JavaScript programming fundamentals through hands-on practice. You’ll work through a series of targeted exercises designed to reinforce the core concepts covered in this chapter.\nLet’s examine the contents of your Lab 2 folder. This lab contains multiple files to help you practice different JavaScript concepts systematically:\n📂 L02\n--  📄 index.html\n--  📄 style.css\n--  📄 ex01.js\n--  📄 ex02.js\n--  📄 ex03.js\n--  📄 ex04.js\n--  📄 ex05.js\n--  📄 ex06.js\n--  📄 ex07.js\n--  📄 ex08.js\n--  📄 ex09.js\n--  📄 ex10.js\n--  📄 ex11.js\n--  📄 ex12.js\n--  📄 bonus1.js\n--  📄 bonus2.js\n--  📄 bonus3.js\n--  📄 bonus4.js\n--  📄 bonus5.js\nWhen you browse the files should see:",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Lab 2: JS Exercises</span>"
    ]
  },
  {
    "objectID": "06-L02.html#instructions",
    "href": "06-L02.html#instructions",
    "title": "6  Lab 2: JS Exercises",
    "section": "",
    "text": "index.htmlstyle.cssex1.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;JavaScript Puzzles&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"container\"&gt;\n        &lt;h1&gt;Javascript Practice Exercises&lt;/h1&gt;\n        &lt;p&gt;To open the JavaScript console:&lt;/p&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;strong&gt;Chrome/Edge:&lt;/strong&gt; Press F12 or right-click anywhere on a webpage and select \"Inspect\", then click the \"Console\" tab&lt;/li&gt;\n            &lt;li&gt;&lt;strong&gt;Firefox:&lt;/strong&gt; Press F12 or right-click and select \"Inspect Element\", then click \"Console\"&lt;/li&gt;\n            &lt;li&gt;&lt;strong&gt;Safari:&lt;/strong&gt; First enable developer tools in Safari &gt; Preferences &gt; Advanced &gt; \"Show Develop menu\", then press Option+Cmd+C&lt;/li&gt;\n            &lt;li&gt;&lt;strong&gt;Any browser:&lt;/strong&gt; Right-click on a webpage, select \"Inspect\" or \"Inspect Element\", then look for the \"Console\" tab&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n\n    &lt;script src=\"ex01.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex02.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex03.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex04.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex05.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex06.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex07.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex08.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex09.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex10.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex11.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"ex12.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n/* This is where your CSS rules would go */\nbody {\n    font-family: \"Courier New\", monospace;\n    margin: 25px;\n    background-color: aliceblue;\n}\n\n\n// Note: This will print a header\nconsole.log(\"%cExercise 1: Your First Variables\", \"font-size: 1.25rem; font-weight: bold; color:blue\");\n\n// Exercise 1: Your First Variables\n//\n// Goal: Get comfortable creating variables and seeing output\n//\n// 1. Create a variable called favoriteColor with your favorite color\n// 2. Create a variable called age with any age\n// 3. Create a variable called isStudent with the value true\n// 4. Use console.log() to display each variable\n\n\n// Expected Output:\n// blue\n// 22\n// true\n\n\n\n\n\n\n\n6.1.1 How to Complete the Exercises\n\nOpen each JavaScript file (e.g., ex01.js) in your code editor\nRead the instructions provided as comments at the top of each file\nWrite your code directly in the JavaScript file following the given instructions\nSave the file and refresh your webpage to see the results\nCheck your output in the browser’s JavaScript console (not the webpage itself)\n\nImportant: Your code output will appear in the JavaScript console, not on the webpage. Make sure you have the developer tools open to see your results.\n\n\n6.1.2 Exercise Format\nEach exercise follows a consistent structure with clear instructions and expected output:\nInstructions (as comments):\n// 1. Create a variable called favoriteColor with your favorite color\n// 2. Create a variable called age with any age\n// 3. Create a variable called isStudent with the value true\n// 4. Use console.log() to display each variable\nExpected Output:\n// Expected Output:\n// blue\n// 22\n// true\n\n\n6.1.3 Getting Help\nEach exercise targets specific concepts from this Unit’s reading material. If you encounter difficulties:\n\nReview the relevant sections in the previous chapter\nCheck that your syntax matches the examples provided\nEnsure you’re viewing the console output, not the webpage\nVerify that you’ve saved your changes before refreshing\n\nWork through the exercises in order, as they build upon each other progressively. Good luck!",
    "crumbs": [
      "UNIT 2: Fundamentals (II)",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Lab 2: JS Exercises</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html",
    "href": "07-jspsych.html",
    "title": "7  jsPsych",
    "section": "",
    "text": "7.1 Introduction\nThis week, we’ll harness our web development skills to craft behavioral experiments. However, there’s no need to start from scratch. jsPsych is a JavaScript library specifically designed for psychologists to achieve this very purpose.",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html#introduction",
    "href": "07-jspsych.html#introduction",
    "title": "7  jsPsych",
    "section": "",
    "text": "7.1.1 What is a Library?\nBefore we dive into jsPsych, let’s understand what a “library” means in programming. Think of it like a real library, but instead of books, it contains pre-written code that solves common problems.\nImagine you wanted to bake a cake from scratch. You could:\n\nMill your own flour from wheat\nExtract sugar from sugar cane\nChurn your own butter\nRaise chickens for eggs\n\nOr, you could go to the grocery store and buy these ingredients that someone else has already prepared. A programming library works the same way in that it provides pre-made “ingredients” (functions and tools) that you can use in your code.\nWithout a library, creating a psychology experiment would require you to write all the JavaScript code needed to control the HTML and CSS. For example, if you wanted an image to suddenly appear on the display for 2 seconds, you’d need to write a function to show/hide the image HTML, then write more code to create a timer to trigger the show/hide behavior. If you wanted participants to respond to the image, you’d need to write functions that listened for keyboard inputs and recorded timestamps. You’d also need functions to store the data, code to loop through multiple images… This would quickly become overwhelming for even a simple experiment.\nWith a library like jsPsych, someone has already written all this code for you! You just need to learn how to use their pre-built tools.\nThink of it this way:\n\nHTML gave you building blocks (headings, paragraphs, buttons)\nCSS gave you styling tools (colors, fonts, layouts)\nJavaScript gave you programming logic (variables, functions, loops)\njsPsych gives you psychology experiment tools (trials, data collection, timing)\n\n\n\n7.1.2 Loading JsPsych\njsPsych is organized into a base library containing core functionality and a series of ‘plugins’ that add specific features like displaying images or handling mouse inputs. This modular approach is useful because experiments only need certain functions—by using plugins, we only load what we need. For example, if your experiment uses only text stimuli, there’s no reason to load the image display plugin.\nLet’s look at an example of loading jsPsych in our HTML page:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\nNotice we loaded two files in our &lt;head&gt;:\n\njspsych.js - The main JavaScript library stored in a jspsych folder\njspsych.css - Basic styling that jsPsych provides (centering displays, font sizes, etc.)\n\nThis organization will be our standard approach for loading jsPsych. We’re loading the library locally from folders stored on our server. In your lab materials folder, you’ll find the same folder structure.\n\n📂 L03\n--  📄 index.html\n--  📄 exp.js\n--  📂 jspsych\n\nThis standardized organization means that once you understand how to load jsPsych in one lab, you’ll know how to do it in all the others. Each lab folder contains:\n\nHTML file: The main webpage (usually index.html)\nJavaScript file: Your experiment code (names vary: helloWorld.js, exp.js, etc.)\njsPsych folder: A complete copy of the jsPsych library with all necessary files\n\n\n7.1.2.1 About the jsPsych Library\nThe jsPsych library included in your lab folders was downloaded from the official jsPsych website. While there are other ways to load jsPsych, we’re using local copies for several reasons:\n\nReliability: Your experiments will work even without an internet connection\nVersion consistency: Everyone uses the same version, avoiding compatibility issues\nLearning clarity: You can see exactly which files are being loaded and where they’re located\n\nWe’ll explore the official jsPsych documentation later in this chapter, but for now, it’s sufficient to know that each lab folder contains everything you need to run jsPsych experiments. This self-contained approach makes it easy to understand the file structure and ensures your experiments will run consistently across different environments.\n\n\n\n7.1.3 Loading jsPsych Plugins\nReturning to our example, the previous HTML only loads the basic library without any plugins. For most experiments, we’ll need additional plugins. A common one is the keyboard response plugin, which enables participants to press keys while jsPsych records their responses.\nLet’s add that plugin:\n\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n\n\n7.1.4 Loading the Experiment JavaScript\nThe final piece we need is a place to write our own JavaScript code to tell jsPsych what to do. We’ll load this in an external JavaScript file inside the &lt;body&gt;:\n\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script src=\"helloWorld.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nRemember that files loaded in the &lt;head&gt; run before the page loads, while files inside the &lt;body&gt; run after the page loads. By putting our code in the body, we ensure it loads AFTER jsPsych and the basic page HTML have loaded. This is important because our code will depend on jsPsych being available.",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html#example-hello-world",
    "href": "07-jspsych.html#example-hello-world",
    "title": "7  jsPsych",
    "section": "7.2 Example: Hello World",
    "text": "7.2 Example: Hello World\nNow let’s see a complete example in action. This is the 01_helloWorld example you’ll find in your demos folder. In the “Result” tab you’ll find a live version of Hello World. In this demo, the text “Hello World!” is displayed and when you press any key on your keyboard, it disappears. Note that for these embedded demos, you’ll need to click on the frame to be able to provide any input.\nGo ahead and try it out! You can click the refresh button to reload the page and do it again if you’d like.\n\nindex.htmlhelloWorld.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"helloWorld.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst hello_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Hello world!'\n}\n\njsPsych.run([hello_trial]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate keyboard input\n\nRefresh\n\n\n\n\n\n\n\n7.2.1 Breaking Down the JavaScript Code\nLet’s examine what each line of JavaScript does in our helloWorld.js file:\nconst jsPsych = initJsPsych();\n\nconst hello_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Hello world!'\n}\n\njsPsych.run([hello_trial]);\n\n7.2.1.1 Line 1: Initialize jsPsych\n\nconst jsPsych = initJsPsych();\n\nThis line creates our jsPsych instance. Think of initJsPsych() as starting up the jsPsych “engine” that will control our experiment. We store this in a constant called jsPsych that we’ll use throughout our code.\nThe initJsPsych() function:\n\nSets up the internal systems for timing, data collection, and display management\nPrepares the HTML page for experiment content\nReturns an object with methods we can use to control the experiment\n\nThis will always be the first thing you need to do in your code.\n\n\n7.2.1.2 Lines 3-6: Define a Trial\n\nconst hello_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Hello world!'\n}\n\nHere we’re creating a trial object. A ‘trial’ is the fundamental building block of jsPsych experiments. Every trial is a JavaScript object that describes what should happen during that part of the experiment. In jsPsych, they use the word ‘trial’ to refer to any event that could occur in the experiment. I tend to think of them as ‘events’ rather than ‘trials’ because, as we’ll see in the next example, we can present instructions, or anything at all, using the trial object.\nThis trial object has two properties:\n\ntype: Specifies which jsPsych plugin to use. jsPsychHtmlKeyboardResponse tells jsPsych to use the HTML keyboard response plugin we loaded earlier. This plugin displays HTML content and waits for a keyboard response. The type always follows the same format: it is the plugin name but converted from the hyphenated name version to camel case (ie., no spaces and capital letters) with jsPsych at the beginning. E.g., html-keyboard-response = jsPsychHtmlKeyboardResponse\nstimulus: The content to display to the participant. In this case, it’s the text “Hello world!”\n\nWhen this trial runs, jsPsych will:\n\nDisplay “Hello world!” on the screen\nWait for the participant to press any key\nRecord the response time and which key was pressed\nMove to the next trial (or end the experiment if this is the last trial)\n\n\n\n7.2.1.3 Line 8: Run the Experiment\n\njsPsych.run([hello_trial]);\n\nThis line starts the experiment. The jsPsych.run() method takes an array of trials as its argument. Even though we only have one trial, we still need to put it in an array (notice the square brackets []).\nWhen run() is called, jsPsych:\n\nTakes control of the webpage\nExecutes each trial in the array sequentially\nHandles all the timing, display, and data collection automatically\nStores the results for later retrieval\n\nThis will always be the final line in your code because it is the one that triggers the start of the experiment.\nWe now have a general template for how all of our experiments will be programmed:\n// 1. Initialize jsPsych\n\n\n// 2. Define our trials/events\n\n\n// 3. Run jsPsych with our trials",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html#example-the-shortest-experiment",
    "href": "07-jspsych.html#example-the-shortest-experiment",
    "title": "7  jsPsych",
    "section": "7.3 Example: The Shortest Experiment",
    "text": "7.3 Example: The Shortest Experiment\nLet’s look at one more example. This one will have a few more trials, but follows our general template.\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst instructions = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'This is a test of your reflexes. When the experiment begins, you will see a letter on the screen. Your task is to press that letter on your keyboard as quickly as possible. When you are ready, press any key on the keyboard to begin.'\n}\n\nconst letter = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'H'\n}\n\nconst debrief = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Great job! You just completed the shortest experiment!'\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  letter,\n  debrief\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate keyboard input\n\nRefresh",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html#jspsych-documentation",
    "href": "07-jspsych.html#jspsych-documentation",
    "title": "7  jsPsych",
    "section": "7.4 JsPsych Documentation",
    "text": "7.4 JsPsych Documentation\nThe official jsPsych documentation is your most valuable resource for learning about the library’s capabilities. You can find it at https://www.jspsych.org/v8/. The documentation is well-organized and includes everything from basic tutorials to advanced features.\n\n7.4.1 Using the Correct Version\nImportant: Always make sure you’re viewing the documentation for the correct version of jsPsych. The labs in this course use jsPsych version 8, but the documentation site defaults to the latest version (which may be newer).\nTo ensure you’re viewing the v8 documentation:\n\nGo to https://www.jspsych.org\nLook for the version dropdown at the top of the page\nSelect “v8” from the dropdown menu\nThe URL should change to https://www.jspsych.org/v8/\n\nUsing the wrong version’s documentation can lead to confusion, as newer versions may have different parameter names, new features, or changed syntax that won’t work with the version installed in your lab materials.\n\n\n7.4.2 Key Documentation Sections\nThe documentation is structured into several main areas:\n\nOverview: Introduction to jsPsych concepts and getting started guides\nTutorials: Step-by-step walkthroughs for common experiment types\nPlugins: Detailed reference for each available plugin\nExtensions: Additional functionality that can be added to experiments\nAPI Reference: Complete technical documentation of all jsPsych functions\n\n\n\n7.4.3 Using Plugin Documentation\nEach plugin has its own documentation page that follows a consistent structure:\n\nDescription: What the plugin does and when to use it\nParameters: All available options you can configure\nData Generated: What information the plugin records\nExamples: Working code samples\nSimulation Mode: How the plugin behaves during testing\n\nFor example, the HTML Keyboard Response plugin documentation shows you can control things like:\n\nWhich keys are valid responses\nHow long to wait for a response\nWhether to show a prompt\nCustom CSS styling\n\n\n\n7.4.4 Finding What You Need\nWhen working on an experiment, you’ll typically:\n\nBrowse plugins to find the right tool for your task (image display, audio playback, surveys, etc.)\nCheck parameters to see what options are available\nReview examples to understand the syntax\nLook at data output to plan your analysis\n\nThe search function on the documentation site is particularly helpful for finding specific features or troubleshooting issues.",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html#trial-parameters",
    "href": "07-jspsych.html#trial-parameters",
    "title": "7  jsPsych",
    "section": "7.5 Trial Parameters",
    "text": "7.5 Trial Parameters\nEvery jsPsych trial is defined by parameters that control its behavior. Understanding these parameters is crucial for creating effective experiments.\n\n7.5.1 General Parameters\nIn the previous examples, when we created our trial object, we added a couple of options called “parameters”. These parameters define what happens in our trial according to the jsPsych documentation. There are general parameters that are available to any trial we create and there are plugin-specific parameters that are only available to certain types. The type parameter is always required, because this is the parameter that tells jsPsych what kind of trial it is, and which plugin should be used.\nFirst, let’s review the general parameters. I’ve recreated the table from the documentation, you’d normally find here: https://www.jspsych.org/latest/overview/plugins/#parameters-available-in-all-plugins\n\n\n\n\n\n\n\n\n\nParameter\nType\nDefault Value\nDescription\n\n\n\n\ndata\nobject\nundefined\nAn object containing additional data to store for the trial. See the Data page for more details.\n\n\npost_trial_gap\nnumeric\nnull\nSets the time, in milliseconds, between the current trial and the next trial. If null, there will be no gap.\n\n\non_start\nfunction\nfunction(){ return; }\nA callback function to execute when the trial begins, before any loading has occurred. See the Event-Related Callbacks page for more details.\n\n\non_finish\nfunction\nfunction(){ return; }\nA callback function to execute when the trial finishes, and before the next trial begins. See the Event-Related Callbacks page for more details.\n\n\non_load\nfunction\nfunction(){ return; }\nA callback function to execute when the trial has loaded, which typically happens after the initial display of the plugin has loaded. See the Event-Related Callbacks page for more details.\n\n\ncss_classes\nstring\nnull\nA list of CSS classes to add to the jsPsych display element for the duration of this trial. This allows you to create custom formatting rules (CSS classes) that are only applied to specific trials.\n\n\nsave_trial_parameters\nobject\n{}\nAn object containing any trial parameters that should or should not be saved to the trial data. Each key is the name of a trial parameter, and its value should be true or false, depending on whether or not its value should be saved to the data.\n\n\nsave_timeline_variables\nboolean or array\nfalse\nIf set to true, then all timeline variables will have their current value recorded to the data for this trial. If set to an array, then any variables listed in the array will be saved.\n\n\nrecord_data\nboolean\ntrue\nIf set to false, then the data for this trial will not be recorded.\n\n\n\n\n7.5.1.1 Column 1: Parameter\nThis column shows the name of the parameter which is exactly what you would type in your trial object. These are the property names you can add to any trial, regardless of which plugin you’re using.\nFor example, if you see data in this column, you would use it like this:\nconst trial = {   \n  type: jsPsychHtmlKeyboardResponse,   \n  stimulus: 'Hello',   \n  data: { \n    condition: 'practice' \n    }  \n  } \n\n\n7.5.1.2 Column 2: Type\nThis tells you what kind of value the parameter expects. Understanding data types is crucial for writing correct code:\n\nobject: A JavaScript object with curly braces {} containing key-value pairs\nnumeric: A number (like 1000 for milliseconds)\nfunction: A JavaScript function that will be executed at a specific time\nstring: Text enclosed in quotes\nboolean: Either true or false\narray: A list of items in square brackets []\n\ndata: { trial_type: 'test' },         // object\npost_trial_gap: 2000,                 // numeric  \non_start: function() { ... },         // function\ncss_classes: 'my-custom-class',       // string\nrecord_data: false,                   // boolean\nsave_timeline_variables: ['condition'] // array\n\n\n7.5.1.3 Column 3: Default Value\nThis shows what happens if you don’t specify the parameter. jsPsych will use this default value automatically.\n\nundefined: The parameter won’t exist unless you add it\nnull: The parameter exists but has no value (often means “disabled”)\nfalse: The feature is turned off by default\n{}: An empty object\nfunction(){ return; }: A function that does nothing\n\nUnderstanding defaults helps you know which parameters are optional (most of them), what the ‘normal’ behaviour is, and when you need to override them.\nFor example, record_data defaults to true, so trials are normally saved. You only need to specify record_data: false if you want to prevent saving.\n\n\n7.5.1.4 Column 4: Description\nThis explains what the parameter does and when you might use it. This is where you learn the practical purpose of each parameter.\nKey things to look for in descriptions:\n\nWhen the parameter takes effect (trial start, trial end, etc.)\nWhat it controls or modifies\nReferences to other documentation pages for more details\nSpecial behaviors or limitations\n\n\n\n7.5.1.5 Putting It All Together\nLet’s look at one row as a complete example:\n\n\n\n\n\n\n\n\n\nParameter\nType\nDefault Value\nDescription\n\n\n\n\npost_trial_gap\nnumeric\nnull\nSets the time, in milliseconds, between the current trial and the next trial. If null, there will be no gap.\n\n\n\nThis tells us:\n\nName: Use post_trial_gap in your trial object\nType: Expects a number (milliseconds)\nDefault: null means no gap between trials normally\nPurpose: Controls timing between trials\n\nSo you could use it like:\nconst trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Press any key',\n  post_trial_gap: 1500  // 1.5 second pause after this trial\n}\n\n\n\n7.5.2 Plugin Parameters\nIn addition to the Each plugin defines its own specific parameters. Let’s examine the HTML Keyboard Response plugin as an example. You’d find this table here: https://www.jspsych.org/latest/plugins/html-keyboard-response/.\n\n\n\n\n\n\n\n\n\nParameter\nType\nDefault Value\nDescription\n\n\n\n\nstimulus\nHTML string\nundefined\nThe string to be displayed.\n\n\nchoices\narray of strings\n“ALL_KEYS”\nThis array contains the key(s) that the participant is allowed to press in order to respond to the stimulus. Keys should be specified as characters (e.g., ‘a’, ‘q’, ’ ‘, ’Enter’, ‘ArrowDown’) - see this page and this page (event.key column) for more examples. Any key presses that are not listed in the array will be ignored. The default value of “ALL_KEYS” means that all keys will be accepted as valid responses. Specifying “NO_KEYS” will mean that no responses are allowed.\n\n\nprompt\nstring\nnull\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n\n\nstimulus_duration\nnumeric\nnull\nHow long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.\n\n\ntrial_duration\nnumeric\nnull\nHow long to wait for the participant to make a response before ending the trial in milliseconds. If the participant fails to make a response before this timer is reached, the participant’s response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, then the trial will wait for a response indefinitely.\n\n\nresponse_ends_trial\nboolean\ntrue\nIf true, then the trial will end whenever the participant makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the participant to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\n\nThis table follows the same interpretation of the General Parameters table. However, it’s important to note that any parameter that has a ‘Default Value’ of undefined is required. That means, for the HTML keyboard response plugin, we must specify a stimulus, otherwise our code will fail to run and we will receive an error.\nAll other parameters are optional and, if you don’t need to change the default, then you don’t need to refer to them at all.\nFor example, I could run either of these two:\nconst trial_a = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'BLUE'\n}\n\nconst trial_b = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'BLUE',\n  prompt: '&lt;p&gt;Press the first letter of this word&lt;/p&gt;'\n}\nTrial A will not have any prompt displayed below the trial stimulus and Trial B will have the prompt printed below the trial stimulus.\nAnd finally, to provide a full example, using all the HTML keyboard response parameters:\nconst complex_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;div style=\"font-size: 48px; color: blue;\"&gt;TARGET&lt;/div&gt;',\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for blue, J for red&lt;/p&gt;',\n  stimulus_duration: 2000,\n  trial_duration: 5000,\n  response_ends_trial: false\n}\nIn this example, the trial:\n-Shows a large blue “TARGET” -Only accepts ‘f’ or ‘j’ key presses -Displays “Press F for blue, J for red” below the target stimulus -Displays the target stimulus for 2 seconds (and then removes it after 2 seconds) -Times out after 5 seconds and automatically proceeds to the next trial -Prevents the response from ending the trial",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "07-jspsych.html#styling",
    "href": "07-jspsych.html#styling",
    "title": "7  jsPsych",
    "section": "7.6 Styling",
    "text": "7.6 Styling\njsPsych provides default styling that works well for most experiments, but you can customize the appearance to match your research needs or institutional branding. Default jsPsych Styling\nThe jspsych.css file provides: - Centered content display - Consistent fonts and spacing - Responsive design for different screen sizes - Basic button and form styling\njsPsych automatically applies specific CSS classes to different parts of your experiment. Understanding these classes is key to effective styling because they represent the different components of the jsPsych interface.\n\n7.6.1 Core Structure Classes\n\n7.6.1.1 .jspsych-display-element\nThis is the main container for your entire experiment. It wraps all content and is where you’d set global styles like background colors, fonts, or overall layout properties.\n\n\n7.6.1.2 .jspsych-content\nThis contains the actual content of each trial (the stimulus, buttons, etc.). It’s centered within the display element and is where you’d control the maximum width, padding, or alignment of your experiment content.\n\n\n7.6.1.3 .jspsych-btn / .jspsych-btn:hover\nApplied to all buttons created by jsPsych plugins (like multiple choice responses). This is where you’d style button appearance, hover effects, and spacing.\n\n\n\n7.6.2 Customizing the Display\nYou can add your own CSS rules to modify the appearance. We can also rewrite these jsPsych classes if we want to change the overall look of our experiment. In our style.css file, for example, we could re-write the classes, and if this file is loaded after the jspsych.css file, it would override any styling already applied. Here’s an example:\n.jspsych-display-element {\n  background-color: #f8f9fa;\n  font-family: 'Arial', sans-serif;\n  color: #333;\n}\n\n.jspsych-content {\n  max-width: 800px;\n  margin: auto;\n  padding: 20px;\n  background-color: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n}\n\n.jspsych-btn {\n  background-color: #007bff;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  margin: 8px;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n}\n\n/* Buttons change their style when you hover over them. Here, the background-color changes on hover */\n.jspsych-btn:hover {\n  background-color: #0056b3;\n}\n\n/* Buttons that are temporarily disabled get this state. You can style disabled buttons differently to provide visual feedback */\n.jspsych-btn:disabled {\n  background-color: #6c757d;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n\n7.6.3 Creating a Dark Theme\nMany experiments benefit from a dark theme, especially those involving visual stimuli or long sessions where eye strain is a concern. The default jsPsych styling uses black text on a white background, which can cause eye fatigue during extended experimental sessions. However, we should avoid simply inverting to pure white text on a black background, as this creates harsh contrast that can be equally uncomfortable.\nA better approach is to use light grey text on a dark background, which provides excellent readability while being much gentler on the eyes. We can achieve this by overwriting the default CSS, targeting both standard HTML tags (like h1 or p) and jsPsych’s specific CSS classes.\nHere’s how we would do that by writing CSS in an external file and linking to it in our HTML:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lexical Decision&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;h1&gt;Dark Theme Experiment&lt;/h1&gt;\n             &lt;p&gt;This experiment uses a dark theme with light grey text to reduce eye strain.&lt;/p&gt;\n             &lt;p&gt;Press any key to continue.&lt;/p&gt;`,\n  choices: 'ALL_KEYS',\n  post_trial_gap: 500\n}\n\nconst instructions = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;h2&gt;Instructions&lt;/h2&gt;\n             &lt;p&gt;You'll be shown a series of words and asked to respond.&lt;/p&gt;\n             &lt;p&gt;Notice how the dark background is easier on your eyes during longer sessions.&lt;/p&gt;\n             &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: 'ALL_KEYS',\n  post_trial_gap: 500\n}\n\nconst word_trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;div style='font-size: 48px; font-weight: bold;'&gt;\n               pulchritudinous\n             &lt;/div&gt;\n             &lt;p&gt;Press 'R' if this is a real word, 'F' if it's fake&lt;/p&gt;`,\n  choices: ['r', 'f'],\n  post_trial_gap: 250\n}\n\nconst word_trial_2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;div style='font-size: 48px; font-weight: bold;'&gt;\n               psychotomimetic\n             &lt;/div&gt;\n             &lt;p&gt;Press 'R' if this is a real word, 'F' if it's fake&lt;/p&gt;`,\n  choices: ['r', 'f'],\n  post_trial_gap: 250\n}\n\nconst button_trial = {\n  type: jsPsychHtmlButtonResponse,\n  stimulus: `&lt;h3&gt;How comfortable was the dark theme?&lt;/h3&gt;`,\n  button_layout: 'grid',\n  grid_rows: 3,\n  choices: ['Great!', 'Ok', 'Terrible!'],\n  post_trial_gap: 500\n}\n\nconst debrief = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;h2&gt;Thank You!&lt;/h2&gt;\n             &lt;p&gt;You've completed the dark theme experiment.&lt;/p&gt;\n             &lt;p&gt;Notice how the light grey text (#e0e0e0) on dark background (#1a1a1a) provides good contrast without being harsh.&lt;/p&gt;\n             &lt;p&gt;This is much more comfortable than pure white on black.&lt;/p&gt;`,\n  choices: \"NO_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  instructions,\n  word_trial,\n  button_trial,\n  debrief\n]);\n\n\n\n/* Headings with subtle color accents */\nh1 {\n  color: #4a9eff; /* Soft blue */\n  text-align: center;\n  font-size: 32px;\n}\n\nh2 {\n  color: #66d9ef; /* Soft cyan */\n  text-align: center;\n}\n\nh3 {\n  color: #a6e22e; /* Soft green */\n  text-align: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n}\n\n/* Paragraph styling */\np {\n  font-size: 18px;\n  line-height: 1.6;\n  text-align: center;\n  color: #e0e0e0;\n}\n\n/* Main container - dark background */\n.jspsych-display-element {\n  background-color: #1a1a1a;\n  color: #e0e0e0; /* Light grey instead of pure white */\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n\n}\n\n/* Content area */\n.jspsych-content {\n  color: #e0e0e0;\n  max-width: 500px;\n}\n\n\n/* Button styling for dark theme */\n.jspsych-btn {\n  background-color: #404040;\n  color: #e0e0e0;\n  border: 1px solid #606060;\n  padding: 12px 24px;\n  margin: 8px;\n  border-radius: 6px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.jspsych-btn:hover {\n  background-color: #505050;\n  border-color: #4a9eff;\n  color: #ffffff;\n}\n\n.jspsych-btn:disabled {\n  background-color: #2a2a2a;\n  color: #808080;\n  border-color: #404040;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate keyboard input\n\nRefresh",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>jsPsych</span>"
    ]
  },
  {
    "objectID": "08-L03.html",
    "href": "08-L03.html",
    "title": "8  Lab 3: Language & Thought",
    "section": "",
    "text": "8.1 Research in Brief: Lexical Decision-Making",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 3: Language & Thought</span>"
    ]
  },
  {
    "objectID": "08-L03.html#research-in-brief-lexical-decision-making",
    "href": "08-L03.html#research-in-brief-lexical-decision-making",
    "title": "8  Lab 3: Language & Thought",
    "section": "",
    "text": "8.1.1 The Research Area\nThe relationship between language and thought has fascinated researchers for decades. One particularly intriguing aspect of this relationship involves how the timing of word learning affects our ability to process language throughout our lives. When we encounter a word, whether reading it silently or saying it aloud, our brain must rapidly access stored knowledge about that word’s meaning, pronunciation, and spelling. But does it matter when in our lives we first learned that word?\nThis question touches on fundamental issues in cognitive psychology: How is linguistic knowledge organized in memory? Do words learned early in childhood enjoy some special status in our mental lexicon? And what can patterns of word recognition tell us about the architecture of language processing systems?\n\n\n8.1.2 The Research Design\nCortese and Khanna (2007) employed a correlational design to investigate these questions, examining how individual word characteristics relate to processing performance across a large sample of words. This approach treats each word as a case, allowing researchers to identify which word properties predict faster or more accurate recognition.\nThe researchers used two classic experimental paradigms:\nLexical Decision Task: Participants view letter strings on a computer screen and must quickly decide whether each string forms a real English word (like “table”) or a made-up nonword (like “blark”). This task requires accessing stored word knowledge to make the word/nonword judgment.\nNaming Task: Participants see real words and must pronounce them aloud as quickly and accurately as possible. This task requires converting visual letter patterns into spoken sounds.\n\n8.1.2.1 Individual Differences Methodology\nRather than manipulating variables experimentally, this study examined naturally occurring variation across 2,342 monosyllabic English words. Each word varied on multiple dimensions:\n\nAge of acquisition (when people typically learn the words\nFrequency (how often the word appears in written English)\nImageability (how easily the word evokes mental images)\nLength, spelling patterns, and phonological characteristics\n\nThe researchers used hierarchical multiple regression to determine which word characteristics uniquely predict processing speed and accuracy, while statistically controlling for other factors. This correlational approach allows researchers to identify the independent contribution of each variable to word recognition performance.\n\n\n\n8.1.3 Key Findings\nThe study’s central finding was that words learned earlier in life are processed faster than words learned later, even after controlling for 22 other important factors including word frequency, length, and imageability. This “age of acquisition effect” appeared in both tasks but was stronger for lexical decisions than naming.\nTheir key findings were:\n\nAge of acquisition predicted performance above and beyond 22 other variables, demonstrating its unique importance in word processing\nThe effect was stronger for lexical decisions than naming, suggesting age of acquisition particularly influences semantic (meaning-based) processing\nEarly-learned words maintained their processing advantage throughout adulthood, indicating that childhood language learning creates lasting effects on the mental lexicon\n\n\n\n8.1.4 Implications\nThese findings support the semantic locus hypothesis, the idea that age of acquisition effects arise because early-learned words form the foundation of our semantic memory system. According to this view, words learned in childhood become deeply embedded in our conceptual knowledge, with later-learned words building upon this established foundation.\nThe stronger effects in lexical decision (which requires accessing word meaning) compared to naming (which primarily requires converting spelling to sound) suggests that age of acquisition particularly influences the arbitrary mappings between word forms and their meanings, rather than the more systematic relationships between spelling and pronunciation.\nThis research contributes to our understanding of how language knowledge is organized and accessed in the mind. The persistent advantage for early-learned words suggests that there may be critical or sensitive periods in language development, with implications for education, second language learning, and understanding individual differences in language processing abilities.\nThe correlational approach demonstrates how individual differences research can reveal fundamental principles of cognitive organization. By examining natural variation across many words, researchers can identify which factors matter most for language processing, informing both theoretical models and practical applications in education and clinical settings.\n\n\n8.1.5 Further Reading\nBoroditsky, L. (2000). Metaphoric structuring: Understanding time through spatial metaphors. Cognition, 75(1), 1-28.\nChristianson, K., Hollingworth, A., Halliwell, J. F., & Ferreira, F. (2001). Thematic roles assigned along the garden path linger. Cognitive Psychology, 42(4), 368-407.\nCortese, M. J., & Khanna, M. M. (2007). Age of acquisition predicts naming and lexical-decision performance above and beyond 22 other predictor variables: An analysis of 2,342 words. Quarterly Journal of Experimental Psychology, 60(8), 1072-1082.\nEnochson, K., & Culbertson, J. (2015). Collecting psycholinguistic response time data using Amazon Mechanical Turk. PLoS ONE, 10(3), e0116946.",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 3: Language & Thought</span>"
    ]
  },
  {
    "objectID": "08-L03.html#program-a-lexical-decision-task",
    "href": "08-L03.html#program-a-lexical-decision-task",
    "title": "8  Lab 3: Language & Thought",
    "section": "8.2 Program a Lexical Decision Task",
    "text": "8.2 Program a Lexical Decision Task\nOur exercise this week, is to use jsPsych to program a simplified version of the lexical decision task.\nBefore we begin, let’s have a look at what’s included in our Lab 3 folder:\n\n📂 L03\n--  📄 index.html\n--  📄 exp.js\n--  📄 style.css\n--  📂 jspsych\n\nWe have three files in the main folder, an index.html, exp.js and style.css. These are the files we will be editing to create our first jsPsych experiment. As always, we have another folder called jspsych which contains all the jsPsych library code. We will not be editing these files and can leave them as is.\nThe three files are basically empty, since we haven’t done anything yet. If you load up your Lab 3 website, you’ll currently just find a blank screen:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n8.2.1 Basic jsPsych Setup\nLet’s first begin by loading our (1) jsPsych JavaScript and CSS files, (2) our custom JavaScript and CSS files, and (3) our keyboard plugin. We’ll do this by editing the index.html file to link to all of our external files.\nI’ve highlighted the changes I’ve made and also added some organizational comments to keep things neat and organized.\nOf course, just loading empty files won’t actually change anything, so the result is still a blank page so far.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n   &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n8.2.2 Initiate jsPsych\nTo begin our experiment, let’s edit our exp.js file to initiate jsPsych, create a ‘welcome’ screen to start, and run the experiment with our one, welcome screen.\nImportant Note: I’ve decided to use the backticks around the stimuli text rather than quotation marks. This will become more important later, but for now let’s make sure you’re using backticks ` ` and not other kinds of quotation marks. One reason is that sometimes when we’re writing text we want to be able to use the quotation marks (e.g., she said \"Hello! Why don't you come over?\") and we can only do that if we’re wrapping our stimuli in backticks like this `she said \"Hello! Why don't you come over?\"`.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n8.2.3 Add a Trial\nNow, let’s add a trial. In the lexical decision task, participants are presented with either words or non-words (e.g., “book” versus “berv”) and must determine whether the presented string is a word by pressing one of two keys.\nLet’s create a trial using the word “HERO” and then add it to our timeline. Note that we change our keyboard response choices from \"ALL_KEYS\", which allowed participants to press anything to [\"w\",\"n\"]. This is an array (list) that restricts the allowable keys to “w” or “n”. If you hit any other key, nothing will happen.\nParticipants would press “W” if it’s a word and “N” if it’s a non-word.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n   &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HERO`,\n  choices: [\"w\", \"n\"]\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  trial_1\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n8.2.4 Add More Trials\nOk, let’s follow the same format so that there are now four trials: “HERO”, “DIET”, “HESA”, and “MIEL”.\nThe words are carefully paired, such that one represents an early age of acquisition and the other a late age of acquisition. Specifically, “HERO” is acquired early in language development, whereas “DIET” is acquired later. The non-words, “HESA” and “MIEL”, were crafted by altering two letters of their corresponding words.\nThis procedure is a simplified version used in previous studies such as Cortese and Khanna (2007).\nBefore you look at the code below, you think about how you would adapt your code to add these three additional trials.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n   &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HERO`,\n  choices: [\"w\", \"n\"]\n}\n\nconst trial_2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `DIET`,\n  choices: ['w', 'n']\n}\n\nconst trial_3 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HESA`,\n  choices: ['w', 'n']\n}\n\nconst trial_4 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `MIEL`,\n  choices: ['w', 'n']\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  trial_1,\n  trial_2,\n  trial_3,\n  trial_4\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n8.2.5 Debrief\nLet’s add a final, “debrief” screen at the end of the experiment, to let the participant know they are finished. Since this is the final screen and we don’t want participants doing anything else after, I’ve changed the choices to NO_KEYS. This disables the keyboard for that trial.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n   &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HERO`,\n  choices: [\"w\", \"n\"]\n}\n\nconst trial_2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `DIET`,\n  choices: ['w', 'n']\n}\n\nconst trial_3 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HESA`,\n  choices: ['w', 'n']\n}\n\nconst trial_4 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `MIEL`,\n  choices: ['w', 'n']\n}\n\nconst debrief = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Great! You've completed your first experiment. You can refresh the page to do it again.`,\n  choices: \"NO_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  trial_1,\n  trial_2,\n  trial_3,\n  trial_4,\n  debrief\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n8.2.6 Adding Trial Parameters\nThe experiment is technically finished! But we can add a few more things to make it a bit better.\nLet’s add a brief gap between each of our trials. It seems a bit abrupt to have each word appear right after the other. One of the general trial parameters available to us is post_trial_gap which takes a number in milliseconds for how long that gap should be. Let’s add a longer one after our welcome screen, then shorter ones after each trial.\nWhen you add the post_trial_gap: 1000, don’t forget to add the comma that goes on the line before it. The comma indicates that there will be another item.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n   &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\",\n  post_trial_gap: 1000\n}\n\nconst trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HERO`,\n  choices: [\"w\", \"n\"],\n  post_trial_gap: 500\n}\n\nconst trial_2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `DIET`,\n  choices: ['w', 'n'],\n  post_trial_gap: 500\n}\n\nconst trial_3 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `HESA`,\n  choices: ['w', 'n'],\n  post_trial_gap: 500\n}\n\nconst trial_4 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `MIEL`,\n  choices: ['w', 'n'],\n  post_trial_gap: 500\n}\n\nconst debrief = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Great! You've completed your first experiment. You can refresh the page to do it again.`,\n  choices: \"NO_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  trial_1,\n  trial_2,\n  trial_3,\n  trial_4,\n  debrief\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n8.2.7 Replace Text with HTML\nThe final thing we will do is replace our text with HTML. By replacing it with HTML, we have more control over the layout and how it is styled by adding inline styles.\nFirst, I added &lt;p&gt; tags around our welcome and debrief messages to create separate paragraphs. You’ll notice how I added line breaks inside the backticks. These line breaks are ignored when the HTML is rendered, but makes it much easier to read.\nThen, I added a &lt;span&gt; tag around our word stimuli and changed the font size using inline styling.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 3: Language & Thought&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n   &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n             &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\",\n  post_trial_gap: 1000\n}\n\nconst trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;span style=\"font-size:48px;\"&gt;HERO&lt;/span&gt;`,\n  choices: [\"w\", \"n\"],\n  post_trial_gap: 500\n}\n\nconst trial_2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;span style=\"font-size:48px;\"&gt;DIET&lt;/span&gt;`,\n  choices: ['w', 'n'],\n  post_trial_gap: 500\n}\n\nconst trial_3 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;span style=\"font-size:48px;\"&gt;HESA&lt;/span&gt;`,\n  choices: ['w', 'n'],\n  post_trial_gap: 500\n}\n\nconst trial_4 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;span style=\"font-size:48px;\"&gt;MIEL&lt;/span&gt;`,\n  choices: ['w', 'n'],\n  post_trial_gap: 500\n}\n\nconst debrief = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Great! You've completed your first experiment.&lt;/p&gt;\n             &lt;p&gt;You can refresh the page to do it again.&lt;/p&gt;`,\n  choices: \"NO_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  trial_1,\n  trial_2,\n  trial_3,\n  trial_4,\n  debrief\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 3: Language & Thought</span>"
    ]
  },
  {
    "objectID": "08-L03.html#stretch-goals",
    "href": "08-L03.html#stretch-goals",
    "title": "8  Lab 3: Language & Thought",
    "section": "8.3 Stretch Goals",
    "text": "8.3 Stretch Goals\nNow that you’ve programmed a simple lexical decision task, there are many things that can be added or modified to improve the experiment. Here are a few that you can try on your own:\n\n8.3.1 Add instructions\nThere are currently no instructions for participants! Try adding a few more pages of instructions that tell participants what they will be doing in the experiment and how they will respond.\n\n\n8.3.2 Add a fixation before each trial\nOften, we put a “fixation cross” between trials to prepare participants for the upcoming stimulus. A fixation cross is just a “+” sign. Can you add the fixation cross before each trial? Note, that participants shouldn’t be able to respond during a fixation cross and it should automatically proceed without a response. The fixation may also need to have a larger font set.\nHint: You’ll need to set the choices parameter to “NO_KEYS”, so they cannot respond. You’ll also need to set the trial_duration parameter to something like 500, trial_duration: 500. This will cause the fixation to appear for 500ms and then disappear without a keypress.\n\n\n8.3.3 Replace our inline style with a re-usable class\nIf you noticed, we repeated the same CSS code four times. This is a good case for creating a class and using that instead. Can you create a CSS class called “wordStyle”, define it in the style.css file, and apply it to our trials?\nOnce you’ve successfully added that class, try changing other styling for our word style. Two you could try are font-weight: bold; and font-family: monospace.",
    "crumbs": [
      "UNIT 3: Intro to JsPsych",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Lab 3: Language & Thought</span>"
    ]
  },
  {
    "objectID": "09-timelines.html",
    "href": "09-timelines.html",
    "title": "9  Timelines",
    "section": "",
    "text": "9.1 Introduction\nIn the previous chapter, you learned to create individual trials by defining trial objects with specific parameters. While this approach works well for simple experiments, real psychological studies typically involve many trials that follow similar patterns with slight variations. Imagine having to manually code 100 individual trials for a lexical decision experiment where each trial requires separate lines of code. This approach quickly becomes unwieldy and error-prone. Another problem with manually coding each trial is that they always appear in the same order. We typically want some randomization to control for order effects. We can’t easily do this when we manually code each trial.\nThis is where timelines become important A timeline in jsPsych is the backbone of your experiment. It defines the structure and sequence of all trials. Think of it as the experimental protocol that organizes how your study unfolds from start to finish.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#why-use-timelines",
    "href": "09-timelines.html#why-use-timelines",
    "title": "9  Timelines",
    "section": "9.2 Why Use Timelines?",
    "text": "9.2 Why Use Timelines?\n\n9.2.1 The Problem with Individual Trial Objects\nConsider the lexical decision task from the previous chapter, where participants see a string of letters and decide whether it forms a real word or not. A typical experiment might test 50 words and 50 nonwords. Using the individual trial approach, you would need to create 100 separate trial objects:\n// Word trials\nconst trial_1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;div style=\"font-size: 48px;\"&gt;HOUSE&lt;/div&gt;',\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;'\n};\n\nconst trial_2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;div style=\"font-size: 48px;\"&gt;TABLE&lt;/div&gt;',\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;'\n};\n\n// Nonword trials\nconst trial_3 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;div style=\"font-size: 48px;\"&gt;BLAFE&lt;/div&gt;',\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;'\n};\n\nconst trial_4 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;div style=\"font-size: 48px;\"&gt;GLINT&lt;/div&gt;',\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;'\n};\n\n\njsPsych.run([\n trial_1,\n trial_2,\n trial_3,\n trial_4\n]);\nThis approach creates several problems. First, you’re writing essentially the same code over and over, which is repetitive and time-consuming. Second, it’s error-prone because it’s easy to make typos or forget to change parameters. Third, if you want to modify something like the font size or the response keys, you need to edit 100 different objects. Finally, the order of the trials is hard-coded, which means everyone sees the same order of trials every time.\n\n\n9.2.2 The Timeline Solution\nTimelines solve these problems by allowing you to define procedures once and apply them to multiple stimuli, organize trials hierarchically with nested structures, easily modify parameters that apply to multiple trials, and implement randomization efficiently.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#basic-timeline-structure",
    "href": "09-timelines.html#basic-timeline-structure",
    "title": "9  Timelines",
    "section": "9.3 Basic Timeline Structure",
    "text": "9.3 Basic Timeline Structure\n\n9.3.1 A Single Trial Timeline\nLet’s start by reviewing the way we’ve already been programming our experiments, but discuss it in terms of being a timeline. The simplest timeline contains just one trial. Instead of running a trial directly, you embed it in an array. This should look familiar:\nconst trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the experiment.'\n};\n\nconst timeline = [trial];\njsPsych.run(timeline);\n\n\n9.3.2 Multiple Trials Timeline\nFor multiple trials, simply add more trial objects to the timeline array. Again, this should look fairly familiar:\nconst timeline = [];\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the lexical decision experiment. Press any key to continue.'\n};\n\nconst instruction_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'You will see letter strings. Press F if it is a real word, J if it is not a real word. Press any key to begin.'\n};\n\nconst ready_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Ready? Press SPACE to start.',\n  choices: [' ']\n};\n\nlet timeline = [\n welcome_trial,\n instruction_trial,\n ready_trial\n]\n\njsPsych.run(timeline);\nThis is a timeline because jsPsych will run this in the order you input them in the array. If I were to change the order of this timeline, it would change the order of the events.\nlet timeline = [\n ready_trial,   // first\n welcome_trial   // second\n instruction_trial // third\n]",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#nested-timelines",
    "href": "09-timelines.html#nested-timelines",
    "title": "9  Timelines",
    "section": "9.4 Nested Timelines",
    "text": "9.4 Nested Timelines\nNow, let’s expand on this basic principle to create more complex experimental procedures. One of the most powerful features of timelines is the ability to nest them. This allows you to define common parameters once and apply them to multiple trials. Again, think of our lexical decision task. Everything about each trial is identical other than the word stimulus itself. The nested timeline will allow us to write all of that code once, and indicate that the word should change each time.\n\n9.4.1 Basic Nested Timeline\nInstead of creating individual trial objects, we can define the procedure once:\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst lexical_decision = {\n  type: jsPsychHtmlKeyboardResponse,\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;',\n  timeline: [\n    {stimulus: 'HOUSE'},\n    {stimulus: 'TABLE'},\n    {stimulus: 'BLAFE'},\n    {stimulus: 'GLINT'}\n  ]\n};\n\nconst timeline = [welcome_trial, lexical_decision]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nThis creates four trials that all share the same type, choices, and prompt parameters, but each displays a different letter string. When we write a nested timeline like this we can put parameters in the trial object, which then are applied to all the trials in the timeline. In this example, type, choices and prompt are applied to all four trials in the timeline. We can also put parameters inside each individual trial inside the timeline, which will just apply to that trial. In this case, we’re changing the stimulus on each trial. At the moment, the timeline still runs in the order they’re written: HOUSE –&gt; TABLE –&gt; BLAFE –&gt;GLINT .\n\n\n9.4.2 Overriding Parameters\nYou can override shared parameters for specific trials when needed:\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst lexical_decision = {\n  type: jsPsychHtmlKeyboardResponse,\n  choices: ['f', 'j'],\n  prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;',\n  timeline: [\n    {stimulus: 'HOUSE'},\n    {stimulus: 'TABLE'},\n    {\n     stimulus: 'BLAFE',\n     prompt: \"&lt;p&gt;This is an attention check: Press F.&lt;/p&gt;\"\n    },\n    {stimulus: 'GLINT'}\n  ]\n};\n\nconst timeline = [welcome_trial, lexical_decision]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nThe third trial will display the custom prompt instead of the default one.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#timeline-variables",
    "href": "09-timelines.html#timeline-variables",
    "title": "9  Timelines",
    "section": "9.5 Timeline Variables",
    "text": "9.5 Timeline Variables\nThe nested timeline approach we just learned is a good first step, but we’re still not being as efficient as we could be. If we wanted to change the font size or color, we’d need to edit every single stimulus line. If we wanted to add a fixation before each trial, we’d have to write it out each time. More importantly, we have no easy way to randomize the order of these trials or to add additional information about each stimulus that might be useful for our analysis.\nTimeline variables solve these problems by separating the experimental procedure from the specific values that change from trial to trial. Instead of hardcoding each variation, we define what varies and let jsPsych handle the repetition for us.\n\n9.5.1 Understanding Timeline Variables\nTimeline variables work on a simple principle: you define your experimental procedure once, then specify a list of variables and their values for each trial. jsPsych automatically runs through your procedure multiple times, using different variable values each time.\nThink of it like a mail merge in a word processor. You write a letter template once (“Dear [NAME], thank you for your [DONATION_AMOUNT] donation”), then provide a list of names and donation amounts. The software creates personalized letters by filling in the variables. Timeline variables work the same way for experiments.\n\n\n9.5.2 Basic Timeline Variables Examples\nLet’s start by rewriting our lexical decision task using timeline variables. We’ll create the same lexical_decision object with a timeline, except instead of writing each trial inside the timeline, I’ll just write one trial and for the stimulus, I’ll put in a placeholder function called jsPsych.timelineVariable(). Then, I create a new array called timeline_variables. This array contains objects with key-value pairs. These can be anything I want, and in this case, I make the key word and the values will be the words that change on each trial.\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst lexical_decision = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('word'),\n      choices: ['f', 'j'],\n      prompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;'\n    }\n  ],\n  timeline_variables: [\n    { word: 'HOUSE' },\n    { word: 'TABLE' },\n    { word: 'BLAFE' },\n    { word: 'GLINT' }\n  ]\n};\n\nconst timeline = [welcome_trial, lexical_decision]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nThis creates a complete procedure that will run four times, once for each item in the timeline_variables array.\njsPsych.timelineVariable('word'): Use this to reference timeline variables in trial parameters. It creates a placeholder that jsPsych evaluates at the right time. This placeholder simply tells jsPsych to take whatever is in word and place it in the stimulus on that trial.\nYou can combine multiple timeline variables and replace any of the trial parameters that we want to change on that trial.\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst lexical_decision = {\n  type: jsPsychHtmlKeyboardResponse,\n  choices: ['f', 'j'],\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('word'),\n      choices: jsPsych.timelineVariable('myChoices'),\n      prompt: jsPsych.timelineVariable('myPrompt')\n    }\n  ],\n  timeline_variables: [\n    {\n     word: 'HOUSE', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    },\n    {\n     word: 'TABLE', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    },\n    {\n     word: 'BLAFE', \n     myPrompt: '&lt;p&gt;This is an attention check: Press X.&lt;/p&gt;', \n     myChoices: ['f', 'j', 'x']\n    },\n    {\n     word: 'GLINT', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    }\n  ]\n};\n\nconst timeline = [welcome_trial, lexical_decision]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nNotice how I can replace any of my trial parameters and define it for that particular trial inside my timeline_variables. Also notice that I still have to follow the format required for that parameter: stimulus and prompt take text or HTML and choices requires an array.\n\n\n9.5.3 Adding More Events\nOne of the benefits of defining our timeline this way is that we can add more events to our timeline loop. For instance, we often put a ‘fixation’ cross before our stimulus. The fixation cross shows the participant where they should pay attention and get ready for the trial. To add a fixation to every trial, we just need to insert it into our timline loop:\n\n\n\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst lexical_decision = {\n  type: jsPsychHtmlKeyboardResponse,\n  choices: ['f', 'j'],\n  timeline: [\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `&lt;span style=\"font-size: 48px\"&gt; + &lt;/span&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 1000\n    },\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: jsPsych.timelineVariable('word'),\n     choices: jsPsych.timelineVariable('myChoices'),\n     prompt: jsPsych.timelineVariable('myPrompt')\n    }\n  ],\n  timeline_variables: [\n    {\n     word: 'HOUSE', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    },\n    {\n     word: 'TABLE', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    },\n    {\n     word: 'BLAFE', \n     myPrompt: '&lt;p&gt;This is an attention check: Press X.&lt;/p&gt;', \n     myChoices: ['f', 'j', 'x']\n    },\n    {\n     word: 'GLINT', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    }\n  ]\n};\n\nconst timeline = [welcome_trial, lexical_decision]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nThe timeline always goes in order fixation –&gt; word, then loops and repeats to go through each of our timeline_variables. We can add as many more events as we’d like:\n\n\n\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst lexical_decision = {\n  type: jsPsychHtmlKeyboardResponse,\n  choices: ['f', 'j'],\n  timeline: [\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `&lt;span style=\"font-size: 48px\"&gt; + &lt;/span&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 1000\n    },\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: jsPsych.timelineVariable('word'),\n     choices: jsPsych.timelineVariable('myChoices'),\n     prompt: jsPsych.timelineVariable('myPrompt')\n    },\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `&lt;span style='font-size: 48px; color: Tomato'&gt; Next Trial in... 3 &lt;/span&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 500\n    },\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `&lt;span style='font-size: 48px; color: Gold'&gt; Next Trial in... 2 &lt;/span&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 500\n    },\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `&lt;span style='font-size: 48px; color: MediumSeaGreen'&gt; Next Trial in... 1 &lt;/span&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 500\n    }\n  ],\n  timeline_variables: [\n    {\n     word: 'HOUSE', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    },\n    {\n     word: 'TABLE', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    },\n    {\n     word: 'BLAFE', \n     myPrompt: '&lt;p&gt;This is an attention check: Press X.&lt;/p&gt;', \n     myChoices: ['f', 'j', 'x']\n    },\n    {\n     word: 'GLINT', \n     myPrompt: '&lt;p&gt;Press F for word, J for nonword&lt;/p&gt;', \n     myChoices: ['f', 'j']\n    }\n  ]\n};\n\nconst timeline = [welcome_trial, lexical_decision]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nAn important note to remember is that each event in our timeline has access to our timeline_variables. This means we can define multiple parts of our experiment and change them on a trial-to-trial basis.\nFor example, in some experiments we present a ‘cue’ then a target to see what effect the cue might have on performance. Both the cue and the target need to change each trial. We can do that fairly easily using our timeline_variables. In this example, you see an arrow cue (e.g., →) followed by a word LEFT or RIGHT. The task is to ignore the arrow and indicate whether the word is LEFT or RIGHT by pressing “Z” for left and “M” for right.\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst attention_task = {\n  timeline: [\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `+`,\n     prompt: `&lt;p&gt;Press 'Z' if the word is LEFT. Press 'M' if the word is RIGHT&lt;/p&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 1000\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('cue'),\n      prompt: `&lt;p&gt;Press 'Z' if the word is LEFT. Press 'M' if the word is RIGHT&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 200\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('target'),\n      prompt: `&lt;p&gt;Press 'Z' if the word is LEFT. Press 'M' if the word is RIGHT&lt;/p&gt;`,\n      choices: ['z', 'm']\n    }\n  ],\n  timeline_variables: [\n    { cue: '→', target: 'LEFT' },\n    { cue: '→', target: 'RIGHT' },\n    { cue: '←', target: 'LEFT' },\n    { cue: '←', target: 'RIGHT' }\n  ]\n};\n\nconst timeline = [welcome_trial, attention_task]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#quick-randomization-and-repetition",
    "href": "09-timelines.html#quick-randomization-and-repetition",
    "title": "9  Timelines",
    "section": "9.6 Quick Randomization and Repetition",
    "text": "9.6 Quick Randomization and Repetition\nAnother benefit to using a list of timeline_variables is that we can quickly add some randomization to our experiment. One of the parameters available to us is called randomize_order, which we can set to true or false. By setting it to true jsPsych will go through our four trials, but in a random order.\nWe can also tell jsPsych how many times we want it to go through our timeline_variables by setting repetitions.\nJust keep in mind that the randomization occurs within each repetition. That is, if I set it to repeat twice, it will present all four trials in a random order, then repeat.\n\n\n\n\nJavaScriptResult\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: 'Welcome to the. Press any key to continue.'\n};\n\nconst attention_task = {\n  timeline: [\n    {\n     type: jsPsychHtmlKeyboardResponse,\n     stimulus: `+`,\n     prompt: `&lt;p&gt;Press 'Z' if the word is LEFT. Press 'M' if the word is RIGHT&lt;/p&gt;`,\n     choices: 'NO_KEYS',\n     trial_duration: 1000\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('cue'),\n      prompt: `&lt;p&gt;Press 'Z' if the word is LEFT. Press 'M' if the word is RIGHT&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 200\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('target'),\n      prompt: `&lt;p&gt;Press 'Z' if the word is LEFT. Press 'M' if the word is RIGHT&lt;/p&gt;`,\n      choices: ['z', 'm']\n    }\n  ],\n  timeline_variables: [\n    { cue: '→', target: 'LEFT' },\n    { cue: '→', target: 'RIGHT' },\n    { cue: '←', target: 'LEFT' },\n    { cue: '←', target: 'RIGHT' }\n  ],\n  randomize_order: true,\n  repetitions: 2\n};\n\nconst timeline = [welcome_trial, attention_task]\njsPsych.run(timeline)\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nIn a later Unit we’ll discuss more complex methods for randomization. For now, simply randomizing the order of our stimuli is good enough for most situations.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#best-practices-for-timeline-design",
    "href": "09-timelines.html#best-practices-for-timeline-design",
    "title": "9  Timelines",
    "section": "9.7 Best Practices for Timeline Design",
    "text": "9.7 Best Practices for Timeline Design\n\n9.7.1 Plan Your Experimental Structure First\nBefore coding, sketch out your experimental procedure. What is the basic trial structure? What parameters vary between trials? What parameters stay constant? How many repetitions do you need?\n\n\n9.7.2 Use Meaningful Variable Names\nChoose descriptive names for your timeline variables:\n// Good\ntimeline_variables: [\n  { target_word: 'cat', distractor_word: 'dog', condition: 'related' },\n  { target_word: 'car', distractor_word: 'pen', condition: 'unrelated' }\n]\n\n// Less clear\ntimeline_variables: [\n  { stim1: 'cat', stim2: 'dog', cond: 'rel' },\n  { stim1: 'car', stim2: 'pen', cond: 'unrel' }\n]\n\n\n9.7.3 Include Useful Information in Timeline Variables\nAdd information that will help you understand your experiment structure:\ntimeline_variables: [\n  { \n    stimulus: 'HOUSE', \n    item_type: 'word',\n    frequency: 'high',\n    length: 5\n  },\n  { \n    stimulus: 'BLAFE', \n    item_type: 'nonword',\n    frequency: 'na',\n    length: 5\n  }\n]\n\n\n9.7.4 Keep Procedures Modular\nBreak complex experiments into separate timeline procedures:\nconst instructions_timeline = [...];\nconst practice_timeline = [...];\nconst main_experiment_timeline = [...];\nconst debriefing_timeline = [...];\n\nconst full_experiment = [\n  instructions_timeline,\n  practice_timeline, \n  main_experiment_timeline,\n  debriefing_timeline\n];",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "09-timelines.html#summary",
    "href": "09-timelines.html#summary",
    "title": "9  Timelines",
    "section": "9.8 Summary",
    "text": "9.8 Summary\nTimelines are the foundation of well-structured jsPsych experiments. They allow you to organize trials hierarchically using nested timelines, eliminate repetitive code by defining procedures once, create flexible experiments using timeline variables, and maintain clean, readable code that’s easy to modify.\nTimeline variables are particularly powerful for psychological research because they match how we typically think about experiments: repeating the same procedure with different stimuli or conditions. Instead of creating dozens of individual trial objects, you define the experimental procedure once and specify the varying parameters in the timeline_variables array.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Timelines</span>"
    ]
  },
  {
    "objectID": "10-plugins.html",
    "href": "10-plugins.html",
    "title": "10  More Plugins",
    "section": "",
    "text": "10.1 Introduction\nIn this chapter, we’re going to take a closer look at adding plugins to your jsPsych experiments and learning how to read the official documentation. We’ll focus on two specific plugins: the html-button-response plugin, which lets participants click on buttons to respond, and the instructions plugin plugin, which creates multi-page instruction screens.\nSince this book can’t cover every single plugin, our main goal here is to teach you how to read and understand the documentation. Once you master this skill, you’ll be able to add any plugin you need to your experiments, even ones we haven’t discussed.\nThink of plugin documentation as a recipe book. Each plugin page tells you exactly what ingredients (parameters) you need, which ones are required versus optional, and how to put them together to create the trial you want.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>More Plugins</span>"
    ]
  },
  {
    "objectID": "10-plugins.html#the-instructions-plugin",
    "href": "10-plugins.html#the-instructions-plugin",
    "title": "10  More Plugins",
    "section": "10.2 The Instructions Plugin",
    "text": "10.2 The Instructions Plugin\n\n10.2.1 Documentation Overview\nWhen you visit the instructions plugin documentation, you’ll see several important sections. Let’s walk through each one so you know what to look for.\n\n10.2.1.1 Parameters\nThe most important part of any plugin documentation is the parameters table. This table tells you everything you can customize about how the plugin works.\n\n\n\n\n\n\n\n\n\n\nParameter\nType\nDefault Value\nDescription\n\n\n\n\npages\narray\nundefined\nEach element of the array is the content for a single page. Each page should be an HTML-formatted string.\n\n\nkey_forward\nstring\n‘ArrowRight’\nThis is the key that the participant can press in order to advance to the next page. This key should be specified as a string (e.g., ‘a’, ‘ArrowLeft’, ’ ‘, ’Enter’).\n\n\nkey_backward\nstring\n‘ArrowLeft’\nThis is the key that the participant can press to return to the previous page. This key should be specified as a string (e.g., ‘a’, ‘ArrowLeft’, ’ ‘, ’Enter’).\n\n\nallow_backward\nboolean\ntrue\nIf true, the participant can return to previous pages of the instructions. If false, they may only advace to the next page.\n\n\nallow_keys\nboolean\ntrue\nIf true, the participant can use keyboard keys to navigate the pages. If false, they may not.\n\n\nshow_clickable_nav\nboolean\nfalse\nIf true, then a Previous and Next button will be displayed beneath the instructions. Participants can click the buttons to navigate.\n\n\nbutton_label_previous\nstring\n‘Previous’\nThe text that appears on the button to go backwards.\n\n\nbutton_label_next\nstring\n‘Next’\nThe text that appears on the button to go forwards.\n\n\nshow_page_number\nboolean\nfalse\nIf true, and clickable navigation is enabled, then Page x/y will be shown between the nav buttons.\n\n\npage_label\nstring\n‘Page’\nThe text that appears before x/y pages displayed when show_page_number is true.\n\n\non_page_change\nfunction\nfunction (current_page) {}\nThe function that is called every time the page changes. This function receives a single argument current_page, which is the index of the current page after page change, and starts at 0. The function is also called when going forward from the last page, i.e., finishing the trial.\n\n\n\n\nThe pages parameter is the most important one. Notice that its default value is listed as undefined. This is a programming way of saying “nothing.” When you see “undefined” as a default value, it means this parameter is required. You must include it, or your trial won’t work. The pages parameter expects an array (a list) of content for each instruction page. Each item in your list becomes one page of instructions.\nThe show_clickable_nav parameter has a default value of false, which means by default, participants can only use keyboard keys to navigate through instructions. If you want to show “Previous” and “Next” buttons that participants can click, you need to change this to true.\nOther parameters like button_label_next and button_label_previous let you customize what text appears on those navigation buttons. The default values are “Next” and “Previous,” but you might want to change them to something like “Continue” and “Back” depending on your experiment.\n\n\n10.2.1.2 Install\nThe documentation also shows you how to load the plugin into your experiment. You’ll see a few options: loading it from a local file on your computer, or loading it from the internet using something called a CDN (Content Delivery Network).\nLocal method:\n&lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\nUsing the (online) CDN-hosted file:\n&lt;script src=\"https://unpkg.com/@jspsych/plugin-instructions@2.1.0\"&gt;&lt;/script&gt;\nThe CDN method is often easier because you don’t need to download and manage the plugin files yourself, but it requires an internet connection.\nHowever, for this book, we’re using a local copy to ensure everyone is using the same version of jsPsych.\n\n\n10.2.1.3 Examples\nFurther down the page, we can see a couple examples of creating an instructions trial object:\nvar trial = {\n    type: jsPsychInstructions,\n    pages: [\n    'Welcome to the experiment. Click next to begin.',\n    'This is the second page of instructions.',\n    'This is the final page.'\n    ],\n    show_clickable_nav: true\n}\nEvery jsPsych plugin follows the same naming pattern in your code. You take the plugin name (like “instructions”) and convert it to what programmers call “camelCase”. This means you capitalize the first letter of each word except the first, then add “jsPsych” to the beginning.\nSo the “instructions” plugin becomes jsPsychInstructions in your code. The “html-button-response” plugin becomes jsPsychHtmlButtonResponse. This might seem confusing at first, but once you see the pattern, it becomes automatic.\nAlso notice how we’re following the parameter requirements from the documentation. We specify the type as jsPsychInstructions, provide the required pages parameter with an array of three text strings, and set show_clickable_nav to true so participants can click buttons to navigate.\nEach item in the pages array becomes one screen of instructions. Participants will see the first item first, then can navigate forward to see the second item, and so on.\n\n\n\n10.2.2 A Working Example\nOk, let’s load it up and see it in action:\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;!-- Base JsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- Plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n   var trial = {\n    type: jsPsychInstructions,\n    pages: [\n    'Welcome to the experiment. Click next to begin.',\n    'This is the second page of instructions.',\n    'This is the final page.'\n    ],\n    show_clickable_nav: true,\n    show_page_number: true,\n    button_label_previous: \"Back\",\n    button_label_next: \"Next\"\n   }\n\njsPsych.run([trial])\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n10.2.3 Adding HTML and Styling\nPlain text instructions work fine, but sometimes you want more control over how your instructions look. Since the pages parameter accepts HTML, you can include formatting like headers, paragraphs, lists, and even custom styling.\nHere’s a more sophisticated example:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;!-- Base JsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- Plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    \n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nvar trial = {\n    type: jsPsychInstructions,\n    pages: [\n            `&lt;div class=\"instructions\"&gt;\n              &lt;h2&gt;Welcome to the Memory Experiment!&lt;/h2&gt;\n              &lt;p&gt;In this study, you will be testing your working memory capacity using a digit span task. Use the arrow keys or buttons below to navigate through these instructions.&lt;/p&gt;\n            &lt;/div&gt;`,\n\n            `&lt;div class=\"instructions\"&gt;\n              &lt;h2&gt;How the Task Works&lt;/h2&gt;\n              &lt;p&gt;You will see a sequence of numbers presented one at a time on the screen.&lt;/p&gt;\n              &lt;p&gt;Your job is to remember the numbers in the &lt;strong&gt;exact order&lt;/strong&gt; they appeared. After the sequence ends, you will be asked to type the numbers back in the correct order.&lt;/p&gt;\n            &lt;/div&gt;`,\n\n            `&lt;div class=\"instructions\"&gt;\n              &lt;h2&gt;Example&lt;/h2&gt;\n              &lt;p&gt;If you see the sequence: &lt;code&gt;3 → 7 → 1 → 9&lt;/code&gt;&lt;/p&gt;\n              &lt;p&gt;You should type: &lt;code&gt;3719&lt;/code&gt;&lt;/p&gt;\n              &lt;p&gt;The sequences will start short and gradually get longer as you progress through the experiment.&lt;/p&gt;\n            &lt;/div&gt;`,\n\n            `&lt;div class=\"instructions\"&gt;\n              &lt;h2&gt;Important Guidelines&lt;/h2&gt;\n              &lt;ul&gt;\n                &lt;li&gt;Pay close attention to each number as it appears&lt;/li&gt;\n                &lt;li&gt;Do not write anything down during the presentation&lt;/li&gt;\n                &lt;li&gt;Type your response as soon as the input box appears&lt;/li&gt;\n                &lt;li&gt;If you're unsure, make your best guess&lt;/li&gt;\n              &lt;/ul&gt;\n            &lt;/div&gt;`,\n\n            `&lt;div class=\"instructions\"&gt;\n              &lt;h2&gt;Ready to Begin?&lt;/h2&gt;\n              &lt;p&gt;The experiment will take approximately 10-15 minutes to complete.&lt;/p&gt;\n              &lt;p&gt;Make sure you're in a quiet environment where you can concentrate.&lt;/p&gt;\n              &lt;p&gt;Click 'Next' when you're ready to start the practice trials.&lt;/p&gt;\n            &lt;/div&gt;`\n          ],\n    show_clickable_nav: true\n   }\n\njsPsych.run([trial])\n\n\n.jspsych-content-wrapper {\n      background-color: '#DCE2F0';\n      color: '#50586C';\n    }\n\n.jspsych-content {\n      width: 100%;\n      max-width: 700px;\n    }\n\n.jspsych-btn {\n      background-color: #4A5568; \n      color: #FFFFFF;\n      border: 1px solid #2D3748;\n    }\n    \n.jspsych-btn:hover {\n      background-color: #2D3748;\n    }\n\n.instructions {\n      margin-left: 1em;\n      margin-right: 1em;\n      text-align: left;\n    }\n    \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nNotice a few important things about this example. First, I’m using backticks (`) instead of regular quotation marks around the HTML content. Backticks allow you to write text that spans multiple lines and includes quotation marks without causing problems in your code.\nSecond, I’ve wrapped each page’s content in a &lt;div&gt; with a class called instructions. This gives me a way to apply consistent styling to all my instruction pages using CSS.\nThird, I’ve added the show_page_number parameter and set it to true. This will display something like “Page 1/3” to help participants understand how many instruction pages there are.\nFor the CSS, I’ve added some styling to our external stylesheet called style.css. I decided to change a few things about the jspsych classes, including the colors. This styling will apply to the entire experiment.\nThen, I added our custom .instructions class and added some styling that will only apply to the instructions HTML.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>More Plugins</span>"
    ]
  },
  {
    "objectID": "10-plugins.html#the-html-button-response-plugin",
    "href": "10-plugins.html#the-html-button-response-plugin",
    "title": "10  More Plugins",
    "section": "10.3 The html-button-response Plugin",
    "text": "10.3 The html-button-response Plugin\nNow let’s move on to the html-button-response, which allows you to show HTML content and give participants buttons to click as their response.\n\n10.3.1 Documentation Overview\nWhen you look at the html-button-response, you’ll see it has quite a few parameters. Don’t let this overwhelm you as most of them are optional, and you only need to understand the ones relevant to your specific experiment\n\n10.3.1.1 Parameters\n\n\n\n\n\n\n\n\n\n\nParameter\nType\nDefault Value\nDescription\n\n\n\n\nstimulus\nHTML string\nundefined\nThe HTML content to be displayed.\n\n\nchoices\narray of strings\n[]\nLabels for the buttons. Each different string in the array will generate a different button.\n\n\nbutton_html\nfunction\n(choice: string, choice_index: number)=&gt; &lt;button class=\"jspsych-btn\"&gt;${choice}&lt;/button&gt;\nA function that generates the HTML for each button in the choices array. The function gets the string and index of the item in the choices array and should return valid HTML. If you want to use different markup for each button, you can do that by using a conditional on either parameter. The default parameter returns a button element with the text label of the choice.\n\n\nprompt\nstring\nnull\nThis string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press).\n\n\ntrial_duration\nnumeric\nnull\nHow long to wait for the participant to make a response before ending the trial in milliseconds. If the participant fails to make a response before this timer is reached, the participant’s response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.\n\n\nstimulus_duration\nnumeric\nnull\nHow long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to hidden after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends.\n\n\nbutton_layout\nstring\n'grid'\nSetting to ‘grid’ will make the container element have the CSS property display: grid and enable the use of grid_rows and grid_columns. Setting to ‘flex’ will make the container element have the CSS property display: flex. You can customize how the buttons are laid out by adding inline CSS in the button_html parameter.\n\n\ngrid_rows\nnumber\n1\nThe number of rows in the button grid. Only applicable when button_layout is set to ‘grid’. If null, the number of rows will be determined automatically based on the number of buttons and the number of columns.\n\n\ngrid_columns\nnumber\nnull\nThe number of columns in the button grid. Only applicable when button_layout is set to ‘grid’. If null, the number of columns will be determined automatically based on the number of buttons and the number of rows.\n\n\nresponse_ends_trial\nboolean\ntrue\nIf true, then the trial will end whenever the participant makes a response (assuming they make their response before the cutoff specified by the trial_duration parameter). If false, then the trial will continue until the value for trial_duration is reached. You can set this parameter to false to force the participant to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n\n\nenable_button_after\nnumeric\n0\nHow long the button will delay enabling in milliseconds.\n\n\n\n\nThe two most important parameters are stimulus and choices. Both of these have undefined as their default value, which means they’re required.\nThe stimulus parameter is where you put the content you want to show to participants. This could be a simple question, an image, a paragraph of text, or complex HTML with multiple elements. Think of this as the “question” part of your trial.\nThe choices parameter is an array (list) of the response options you want to give participants. Each item in this array becomes a clickable button. For example, if you want participants to choose between “Yes” and “No,” your choices array would be ['Yes', 'No'].\nThe button_html parameter is particularly interesting because it’s listed as a “function” rather than simple text. This parameter lets you completely control how your buttons look and behave. The default function creates a standard button with the choice text, but you can write your own function to create custom button designs. Don’t worry if this seems complicated right now. You can just use the default setting and still create perfectly functional experiments.\nThe prompt parameter allows you to add additional text that appears below your main stimulus. This is useful for providing extra instructions or reminders that apply to that specific trial. For example, you might use the stimulus to show a picture and the prompt to ask “What emotion is this person expressing?”\nThe timing parameters give you precise control over your experiment’s flow. The stimulus_duration parameter controls how long the main content stays visible. After this time, the content becomes invisible, but the buttons remain so participants can still respond. The trial_duration parameter sets a maximum time limit for the entire trial. That is, if participants don’t respond within this time, the trial ends automatically and their response is recorded as null (no response).\nThe response_ends_trial parameter is usually set to true, meaning that as soon as a participant clicks a button, the trial ends and the experiment moves on. You might set this to false if you want to show feedback after they respond but before moving to the next trial, or if you want to ensure participants see the stimulus for a minimum amount of time even if they respond quickly.\nThe newer version of this plugin includes more sophisticated layout controls. The button_layout parameter can be set to either ‘grid’ or ‘flex’, which are different ways of arranging your buttons on the screen. The ‘grid’ option (which is the default) lets you specify exactly how many rows and columns of buttons you want using the grid_rows and grid_columns parameters.\nThe enable_button_after parameter is useful when you want to prevent participants from responding too quickly. If you set this to 1000, for example, the buttons will be disabled for the first 1000 milliseconds (1 second) of the trial, forcing participants to look at the stimulus before they can respond.\n\n\n10.3.1.2 Install\nThe installation is always the same for every plugin. Again, we can use a local or CDN method. We’re using the local method for this book.\nLocal method:\n&lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\nUsing the (online) CDN-hosted file:\n&lt;script src=\"https://unpkg.com/@jspsych/plugin-html-button-response@2.1.0\"&gt;&lt;/script&gt;\n\n\n10.3.1.3 Examples\nHere’s one of the examples they provide:\nvar trial = {\n  type: jsPsychHtmlButtonResponse,\n  stimulus: '&lt;p style=\"font-size:48px; color:red;\"&gt;GREEN&lt;/p&gt;',\n  choices: ['Red', 'Green', 'Blue'],\n  prompt: \"&lt;p&gt;What color is the ink?&lt;/p&gt;\"\n};\nThis creates a trial that shows the question “Which color do you prefer?” with three buttons labeled “Red,” “Blue,” and “Green.” When a participant clicks any button, the trial ends and their response is recorded. The plugin automatically handles all the timing and data collection for you.\n\n\n\n10.3.2 A Working Example\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;!-- Base JsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- Plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    \n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\n// Create the timeline procedure\nvar quiz = {\n    timeline: [\n      {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: jsPsych.timelineVariable('statement'),\n        choices: ['True', 'False', 'I Dont Know'],\n        post_trial_gap: 300\n      }\n    ],\n    timeline_variables: [\n    {\n        statement: `&lt;p&gt;The human brain has more neurons than there are stars in the Milky Way galaxy.&lt;/p&gt;`\n    },\n    {\n        statement: `&lt;p&gt;Goldfish have a memory span of only 3 seconds.&lt;/p&gt;`\n    },\n    {\n        statement: `&lt;p&gt;We only use 10% of our brain capacity.&lt;/p&gt;`\n    },\n    {\n        statement: `&lt;p&gt;Humans share about 50% of their DNA with bananas.&lt;/p&gt;`\n    },\n    {\n        statement: `&lt;p&gt;Lightning never strikes the same place twice.&lt;/p&gt;`\n    }\n  ],\n  randomize_order: true\n}\n\n// Run the experiment\njsPsych.run([quiz]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n10.3.3 Styling Buttons\nWe can customize our buttons in a few different ways. The first is to just change the style of all the buttons.\nThe button_html parameter actually takes a function that modifies the button HTML for each of the choice buttons.\nI’ve created a new class called my-btn and added it to the &lt;button&gt; HTML. I’ve kept the original jspsych-btn class and just added the custom class to the end. This means that any CSS in jspsych-btn will carry over, but if there’s CSS in the custom class it will overwrite that CSS.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;!-- Base JsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- Plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    \n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\n// Create the timeline procedure\nvar styled_quiz_procedure = {\n    timeline: [\n      {\n          type: jsPsychHtmlButtonResponse,\n          stimulus: jsPsych.timelineVariable('statement'),\n          choices: ['True', 'False', `I Don't Know`],\n          post_trial_gap: 300,\n          button_html: function(choice, choice_index) {\n              return `&lt;button class='jspsych-btn my-btn'&gt;${choice}&lt;/button&gt;`;\n          }\n      }\n    ],\n    timeline_variables: [\n        {\n            statement: `&lt;p&gt;The human brain has more neurons than there are stars in the Milky Way galaxy.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;Goldfish have a memory span of only 3 seconds.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;We only use 10% of our brain capacity.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;Humans share about 50% of their DNA with bananas.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;Lightning never strikes the same place twice.&lt;/p&gt;`\n        }\n    ],\n    randomize_order: true\n}\n\n// Run the experiment\njsPsych.run([styled_quiz_procedure]);\n\n\n.my-btn {\n  background-color: #6c757d;\n  color: white;\n  padding: 15px 25px;\n  border: none;\n  border-radius: 10px;\n  margin: 8px;\n  font-size: 16px;\n  font-weight: bold;\n  box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.my-btn:hover {\n  background-color: #5a6268;\n}\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nThe second method is to customize each of the buttons according to what the button label (or choice) is.\nSince this a function, we can add in our if-else logic to check what choice is, then change the style depending on the value. I’ll use a series of if-else statements to check and change the class.\nFor the CSS, I’ve created a base-btn class that contains all the CSS that is shared across the three buttons. Then I created separate classes for the red, green, and grey buttons.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;My experiment&lt;/title&gt;\n    &lt;!-- Base JsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- Plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    \n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\n// Create the timeline procedure\nvar styled_quiz_procedure = {\n    timeline: [\n      {\n          type: jsPsychHtmlButtonResponse,\n          stimulus: jsPsych.timelineVariable('statement'),\n          choices: [\"True\", \"False\", \"I Don't Know\"],\n          post_trial_gap: 300,\n          button_html: function(choice, choice_index) {\n            if (choice === \"True\") {\n                    return `&lt;button class='jspsych-btn base-btn green-btn'&gt;${choice}&lt;/button&gt;`;\n                } else if (choice === \"False\") {\n                    return `&lt;button class='jspsych-btn base-btn red-btn'&gt;${choice}&lt;/button&gt;`;\n                } else if (choice === \"I Don't Know\") {\n                    return `&lt;button class='jspsych-btn base-btn gray-btn'&gt;${choice}&lt;/button&gt;`;\n                }   \n            }\n      }\n    ],\n    timeline_variables: [\n        {\n            statement: `&lt;p&gt;The human brain has more neurons than there are stars in the Milky Way galaxy.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;Goldfish have a memory span of only 3 seconds.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;We only use 10% of our brain capacity.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;Humans share about 50% of their DNA with bananas.&lt;/p&gt;`\n        },\n        {\n            statement: `&lt;p&gt;Lightning never strikes the same place twice.&lt;/p&gt;`\n        }\n    ],\n    randomize_order: true\n    \n}\n\n// Run the experiment\njsPsych.run([styled_quiz_procedure]);\n\n\n.base-btn {\n    color: white;\n    padding: 15px 25px;\n    border: none;\n    border-radius: 10px;\n    margin: 8px;\n    font-size: 16px;\n    font-weight: bold;\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n}\n\n.base-btn:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(0,0,0,0.3);\n}\n\n\n.green-btn {\n  background-color: #28a745;\n}\n\n.green-btn:hover {\n  background-color: #218838;\n}\n\n.red-btn {\n  background-color: #dc3545;\n}\n\n.red-btn:hover {\n    background-color: #c82333;\n}\n\n\n.gray-btn {\n  background-color: #6c757d;\n}\n\n.gray-btn:hover {\n    background-color: #5a6268;\n}\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>More Plugins</span>"
    ]
  },
  {
    "objectID": "11-L04.html",
    "href": "11-L04.html",
    "title": "11  Lab 4: Memory",
    "section": "",
    "text": "11.1 Research in Brief: Associative Memory Illusions and the DRM Paradigm",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lab 4: Memory</span>"
    ]
  },
  {
    "objectID": "11-L04.html#research-in-brief-associative-memory-illusions-and-the-drm-paradigm",
    "href": "11-L04.html#research-in-brief-associative-memory-illusions-and-the-drm-paradigm",
    "title": "11  Lab 4: Memory",
    "section": "",
    "text": "11.1.1 The Research Area\nMemory is not a perfect recording device. Instead, it operates as a reconstructive system that can create vivid recollections of events that never actually occurred. One of the most striking demonstrations of this phenomenon comes from research on associative memory illusions, where people confidently “remember” words, events, or details that were never presented but are strongly related to what they actually experienced.\nThis research area challenges our intuitive beliefs about memory’s accuracy and reveals fundamental principles about how our minds organize and retrieve information. The findings have profound implications for understanding eyewitness testimony, therapeutic memory recovery, and the general reliability of human recollection.\n\n\n11.1.2 The Research Design\nThe Deese-Roediger-McDermott (DRM) paradigm employs a repeated measures experimental design where the same participants are tested on multiple types of items, allowing researchers to directly compare performance across different item categories within the same individuals.\nThe DRM methodology begins with a study phase where participants hear lists of 15 words that are all strongly associated with a critical word that is never presented. For example, they might hear: bed, rest, awake, tired, dream, wake, snooze, blanket, doze, slumber, snore, nap, peace, yawn, drowsy (all related to the unpresented word “sleep”).\nDuring the test phase, participants complete memory tests using two different retrieval methods. In free recall tests, participants are given blank paper and asked to write down as many words as they can remember from the study lists, in any order. No cues or prompts are provided - they must generate the words entirely from memory. In recognition tests, participants are presented with a list of words including studied items, critical lures, and unrelated lures, and must decide whether each word was presented during the study phase. They typically respond “yes” (old) or “no” (new) for each item, often with confidence ratings.\nBoth test types include three categories of items that allow for within-subjects comparisons: critical lures (the unpresented words that were thematically related to the study list), studied items (words that were actually presented during the study phase), and unrelated lures (new words that have no relationship to the study lists). This repeated measures approach allows researchers to compare participants’ responses to these different item types within the same test session and across different retrieval conditions.\n\n\n11.1.3 Key Findings\nThe comparison between free recall and recognition reveals striking patterns that demonstrate the robustness of false memory illusions. In free recall tests, false recall rates reach 40-65% for critical lures across different word lists. Critical lures are often recalled with high confidence and in primacy or recency positions, with participants sometimes recalling critical lures first, suggesting strong activation. Remarkably, false recall occurs even when participants are warned about the possibility of false memories.\nRecognition results show even more dramatic effects, with false recognition rates often exceeding 80% for critical lures. False recognition can be higher than true recognition for some studied items, and confidence ratings for false recognition approach those for true recognition. Participants frequently give “remember” responses for critical lures, indicating they experience vivid recollections of these never-presented words.\nImportant differences emerge between test types, however. Recognition typically shows higher false memory rates than free recall, likely because recognition provides more external cues that can trigger false memories. Free recall requires more effortful retrieval, potentially allowing more monitoring of memory accuracy. While both test types demonstrate the illusion, recognition makes it more pronounced, suggesting that different retrieval processes contribute to false memory formation.\n\n\n11.1.4 Implications\nThese findings provide strong support for dual-process theories that distinguish between familiarity-based and recollection-based memory processes. Critical lures feel familiar due to their semantic relationship with studied items, leading to high false recognition through familiarity-based processes. Simultaneously, these same items can trigger vivid but false recollections of their “presentation” during study through recollection-based processes.\nThe occurrence of false memories in both recall and recognition is particularly significant because it demonstrates that false memories are not simply due to guessing or response bias. The fact that people generate critical lures during free recall, where they must produce responses without external cues, shows that they genuinely believe they remember experiencing events that never occurred.\nThe comparison between test types reveals that while different retrieval conditions can influence the magnitude of false memories, the underlying illusion remains robust across testing methods. This robustness has important implications for understanding how false memories might emerge in different real-world contexts. Situations resembling recognition tests, such as eyewitness identification procedures, may be particularly prone to false memories due to the availability of external cues. Conversely, contexts more similar to free recall, such as therapeutic memory recovery sessions, may produce false memories through different mechanisms but remain vulnerable to the same underlying reconstructive processes that characterize human memory.\n\n\n11.1.5 Further Reading\nCrump, M. J. C. (2021). Memory I. In M. J. C. Crump, Instances of Cognition: Questions, Methods, Findings, Explanations, Applications, and Implications (Chapter 8). https://crumplab.com/cognition/textbook\nCrump, M. J. C. (2021). Memory II. In M. J. C. Crump, Instances of Cognition: Questions, Methods, Findings, Explanations, Applications, and Implications (Chapter 9). https://crumplab.com/cognition/textbook\nRoediger, H. L., & McDermott, K. B. (1995). Creating false memories: Remembering words not presented in lists. Journal of Experimental Psychology: Learning, Memory, and Cognition, 21(4), 803-814.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lab 4: Memory</span>"
    ]
  },
  {
    "objectID": "11-L04.html#program-a-recognition-drm-task",
    "href": "11-L04.html#program-a-recognition-drm-task",
    "title": "11  Lab 4: Memory",
    "section": "11.2 Program a Recognition DRM Task",
    "text": "11.2 Program a Recognition DRM Task\nOur exercise this week, is to use jsPsych to program a simplified version of the recognition version of the DRM task.\nBefore we begin, let’s have a look at what’s included in our Lab 4 folder:\n\n📂 L04\n--  📄 index.html\n--  📄 exp.js\n--  📄 style.css\n--  📂 jspsych\n\nThis should look familiar: have three files in the main folder, an index.html, exp.js and style.css. These are the files we will be editing to create our DRM experiment. We also have another folder called jspsych which contains all the jsPsych library code. We will not be editing these files and can leave them as is.\nThe three files are basically empty, since we haven’t done anything yet. If you load up your Lab 4 website, you’ll currently just find a blank screen:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Memory&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n11.2.1 Basic jsPsych Setup\nLet’s first begin by loading our (1) jsPsych JavaScript and CSS files, (2) our custom JavaScript and CSS files, and (3) our keyboard plugin. We’ll do this by editing the index.html file to link to all of our external files. The experiment is still blank, so the webpage will be blank.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.2 Initiate jsPsych\nTo begin our experiment, let’s edit our exp.js file to initiate jsPsych, create a ‘welcome’ screen to start,, and run the experiment with our one, welcome screen.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n       &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.3 Add a Single Study Trial\nThere are two phases to our memory experiment: the study phase and the recognition phase.\nLet’s make a single trial of the study phase using the jsPsychKeyboardResponse plugin.\nFirst, the study trial should be a word displayed for a set amount of time. No responses are required and the trial should move on after the set time has passed. It should look like the welcome message, but we need to change choices: \"NO_KEYS\" and add trial_duration: 1000.\nI’m going to put our single trial in a timeline, which we’ll need later.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"BED\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000\n    }\n  ]\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  study\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.4 Add a Single Test Trial\nNow we’ll add a single test phase trial. For this one, we use the jsPsychButtonResponse plugin. We’ll set the stimulus, the post_trial_gap again. We’ll also add the button labels with choices.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"BED\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000\n    }\n  ]\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: \"AWAKE\",\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"]\n    }\n  ]\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  study,\n  test\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.5 Replace with Timelines\nIn the original study, they presented 15 words during the study phase and 32 words during the test phase (half old, half new). This is common practice is word recognition experiments.\nIt would take us quite a while to type out 47 trials, so instead, we will use jsPsych timeline and timeline_variables present all the words.\nFor both the study and test phases, we replace the stimulus with our placeholder jsPsych.timelineVariable(\"word\") and put our word stimuli in the timeline_variables instead.\nLet’s start by adding two words each. We’ll also set randomize_order: true to randomize the order for us.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500,\n}\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000\n    }\n  ],\n  timeline_variables: [\n    {word: \"BED\"},\n    {word: \"REST\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"]\n    }\n  ],\n  timeline_variables: [\n    {word: \"BED\"},\n    {word: \"REST\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  study,\n  test\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.6 Add Full Word List\nLet’s finish adding all the words now. The study list will have 15 words. The test list will have the 15 OLD words, plus 15 NEW words. One of the new words will be our ‘critical lure’.\nI’ve added some comments inside my lists for my own organization.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000\n    }\n  ],\n  timeline_variables: [\n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"]\n    }\n  ],\n  timeline_variables: [\n         // OLD WORDS \n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"},\n        // NEW WORDS\n        {word: \"DOCTOR\"},\n        {word: \"NURSE\"},\n        {word: \"SICK\"},\n        {word: \"LAWYER\"},\n        {word: \"MEDICINE\"},\n        {word: \"HEALTH\"},\n        {word: \"HOSPITAL\"},\n        {word: \"DENTIST\"},\n        {word: \"PHYSICIAN\"},\n        {word: \"ILL\"},\n        {word: \"PATIENT\"},\n        {word: \"OFFICE\"},\n        {word: \"STETHOSCOPE\"},\n        {word: \"SURGEON\"},\n        {word: \"CLINIC\"},\n        {word: \"CURE\"},\n        // critical word \n        {word: \"SLEEP\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  study,\n  test\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.7 Add Fixation Cross\nOur experiment is essentially complete! But we can always add a few more elements to make it a better experience.\nFirst, let’s add a fixation cross to our Study phase. This will get added to the Study timeline so it appears on every trial.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"+\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 250,\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000\n    }\n  ],\n  timeline_variables: [\n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"]\n    }\n  ],\n  timeline_variables: [\n         // OLD WORDS \n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"},\n        // NEW WORDS\n        {word: \"DOCTOR\"},\n        {word: \"NURSE\"},\n        {word: \"SICK\"},\n        {word: \"LAWYER\"},\n        {word: \"MEDICINE\"},\n        {word: \"HEALTH\"},\n        {word: \"HOSPITAL\"},\n        {word: \"DENTIST\"},\n        {word: \"PHYSICIAN\"},\n        {word: \"ILL\"},\n        {word: \"PATIENT\"},\n        {word: \"OFFICE\"},\n        {word: \"STETHOSCOPE\"},\n        {word: \"SURGEON\"},\n        {word: \"CLINIC\"},\n        {word: \"CURE\"},\n        // critical word \n        {word: \"SLEEP\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  study,\n  test\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.8 Add Instructions\nWe’re going to use the Instructions plugin (type: jsPsychInstructions) to add some instructions to the beginning of our experiment.\nWe’ll need to edit our index.html to load the plugin, then create the instructions trial object in the exp.js file. We also need to add our new instructions to our experiment timeline when we run it.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    \n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    // Page 1: Welcome and Overview\n    `&lt;div&gt;\n      &lt;p&gt;You will participate in a memory experiment with two phases:&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 1:&lt;/strong&gt; Study a list of words&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 2:&lt;/strong&gt; Decide if words are OLD or NEW&lt;/p&gt;\n     &lt;p&gt;Click Next to continue.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 2: Study Phase Instructions  \n    `&lt;div&gt;\n      &lt;p&gt;During the study phase, you will see words appear one at a time. Read each word carefully and try to remember it.&lt;/p&gt;\n     &lt;p&gt;Each word appears for 1 second.You will study about 15 words total.&lt;/p&gt;\n     &lt;p&gt;You do not need to press any keys during this phase.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 3: Test Phase Instructions\n    `&lt;div&gt;\n      &lt;p&gt;During the test phase, you will see words one at a time. Some words are OLD (from the study list). Some words are NEW (not from the study list).&lt;/p&gt;\n     &lt;p&gt;Press the 'OLD' button if the word was old.&lt;/p&gt;\n     &lt;p&gt;Press the 'NEW' button if the word was new&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 4: Stay focused\n    `&lt;div&gt;\n      &lt;p&gt;Trust your first instinct.&lt;/p&gt;\n      &lt;p&gt;If unsure, make your best guess.&lt;/p&gt;\n    &lt;/div&gt;`,\n\n    // Page 5: Final Instructions\n    `&lt;div&gt;\n      &lt;p&gt;Try to stay focused throughout the experiment. The experiment only takes a few minutes.&lt;/p&gt;\n      &lt;p&gt;Click Next to start the study phase.&lt;/p&gt;\n     &lt;/div&gt;`\n  ],\n  key_forward: 'ArrowRight',\n  key_backward: 'ArrowLeft',\n  allow_backward: true,\n  show_clickable_nav: true,\n  button_label_previous: 'Back',\n  button_label_next: 'Next'\n};\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"+\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 250,\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000\n    }\n  ],\n  timeline_variables: [\n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"]\n    }\n  ],\n  timeline_variables: [\n         // OLD WORDS \n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"},\n        // NEW WORDS\n        {word: \"DOCTOR\"},\n        {word: \"NURSE\"},\n        {word: \"SICK\"},\n        {word: \"LAWYER\"},\n        {word: \"MEDICINE\"},\n        {word: \"HEALTH\"},\n        {word: \"HOSPITAL\"},\n        {word: \"DENTIST\"},\n        {word: \"PHYSICIAN\"},\n        {word: \"ILL\"},\n        {word: \"PATIENT\"},\n        {word: \"OFFICE\"},\n        {word: \"STETHOSCOPE\"},\n        {word: \"SURGEON\"},\n        {word: \"CLINIC\"},\n        {word: \"CURE\"},\n        // critical word \n        {word: \"SLEEP\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  instructions,\n  study,\n  test\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n11.2.9 Styling\nFinally, we can change the style of our experiment display and the words being presented.\nTo add custom styling to our word stimuli, I’ll create a new CSS class called wordStyle in my style.css and then we add the class name using a parameter called css_classes in our study and test objects, which we’ll point to our newly created style that we named wordStyle.\nTo add custom styling to our instruction HTML, I’ve created a new CSS class called instructionStyle in the style.css and then added that CSS class to each of the instruction pages in the &lt;div&gt; (i.e., &lt;div class='instructionStyle'&gt;).\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    // Page 1: Welcome and Overview\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;You will participate in a memory experiment with two phases:&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 1:&lt;/strong&gt; Study a list of words&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 2:&lt;/strong&gt; Decide if words are OLD or NEW&lt;/p&gt;\n     &lt;p&gt;Click Next to continue.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 2: Study Phase Instructions  \n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;During the study phase, you will see words appear one at a time. Read each word carefully and try to remember it.&lt;/p&gt;\n     &lt;p&gt;Each word appears for 1 second.You will study about 15 words total.&lt;/p&gt;\n     &lt;p&gt;You do not need to press any keys during this phase.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 3: Test Phase Instructions\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;During the test phase, you will see words one at a time. Some words are OLD (from the study list). Some words are NEW (not from the study list).&lt;/p&gt;\n     &lt;p&gt;Press the 'OLD' button if the word was old.&lt;/p&gt;\n     &lt;p&gt;Press the 'NEW' button if the word was new&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 4: Stay focused\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;Trust your first instinct.&lt;/p&gt;\n      &lt;p&gt;If unsure, make your best guess.&lt;/p&gt;\n    &lt;/div&gt;`,\n\n    // Page 5: Final Instructions\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;Try to stay focused throughout the experiment. The experiment only takes a few minutes.&lt;/p&gt;\n      &lt;p&gt;Click Next to start the study phase.&lt;/p&gt;\n     &lt;/div&gt;`\n  ],\n  key_forward: 'ArrowRight',\n  key_backward: 'ArrowLeft',\n  allow_backward: true,\n  show_clickable_nav: true,\n  button_label_previous: 'Back',\n  button_label_next: 'Next'\n};\n\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"+\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 250,\n      trial_duration: 500,\n      css_classes: \"wordStyle\"\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000,\n      css_classes: \"wordStyle\"\n    }\n  ],\n  timeline_variables: [\n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"],\n      css_classes: \"wordStyle\"\n    }\n  ],\n  timeline_variables: [\n         // OLD WORDS \n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"},\n        // NEW WORDS\n        {word: \"DOCTOR\"},\n        {word: \"NURSE\"},\n        {word: \"SICK\"},\n        {word: \"LAWYER\"},\n        {word: \"MEDICINE\"},\n        {word: \"HEALTH\"},\n        {word: \"HOSPITAL\"},\n        {word: \"DENTIST\"},\n        {word: \"PHYSICIAN\"},\n        {word: \"ILL\"},\n        {word: \"PATIENT\"},\n        {word: \"OFFICE\"},\n        {word: \"STETHOSCOPE\"},\n        {word: \"SURGEON\"},\n        {word: \"CLINIC\"},\n        {word: \"CURE\"},\n        // critical word \n        {word: \"SLEEP\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  instructions,\n  study,\n  test\n]);\n\n\n.wordStyle {\n  font-size: 36pt;\n  font-family: monospace;\n  line-height: 1em;\n}\n\n.instructionStyle {\n  max-width: 750px;\n  text-align: left;\n}\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lab 4: Memory</span>"
    ]
  },
  {
    "objectID": "11-L04.html#stretch-goals",
    "href": "11-L04.html#stretch-goals",
    "title": "11  Lab 4: Memory",
    "section": "11.3 Stretch Goals",
    "text": "11.3 Stretch Goals\n\n11.3.1 Add a final screen\nUse the jsPsychKeyboardResponse plugin to add a final screen to our experiment that says “The experiment is finished. Thank you for completing our study!”. Make sure the choices is set to “NO_KEYS” so they can’t advance any further.\n\n\n11.3.2 Add a transition screen\nUse the jsPsychKeyboardResponse plugin to add a screen between our study and test phase that says “You are now about to begin the memory test phase. Press any key to begin.”\n\n\n11.3.3 Update the fixation style\nAdd a new CSS class called fixationStyle and apply it only to the fixation trial to make the fixation bigger (48pt).\n\n\n11.3.4 Style the old/new buttons\nUse the button_html function to Style the OLD and NEW buttons so that they are different colors.",
    "crumbs": [
      "UNIT 4: Timelines",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lab 4: Memory</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html",
    "href": "12-multimedia.html",
    "title": "12  Multimedia",
    "section": "",
    "text": "12.1 Introduction to Multimedia in Online Experiments\nMultimedia content (e.g., images, audio, and video) opens up many possibilities for psychological research. But here’s the thing: presenting multimedia in web-based experiments is fundamentally different from traditional lab software like E-Prime or PsychoPy. When participants access your experiment through a web browser, multimedia files must be downloaded from your server to their device before they can be displayed. This creates potential timing issues, loading delays, and compatibility problems that could seriously compromise your data quality if not handled properly.\nThink about a simple reaction time study where participants respond to visual stimuli as quickly as possible. If your image takes 200ms to load on one trial but 500ms on another, your reaction time measurements become meaningless—the variability from inconsistent loading times would completely swamp any cognitive effects you’re trying to measure. Similarly, if audio files fail to play on certain browsers, you’ll lose data from those participants in ways that might systematically bias your results.\nWhat makes this even worse, in terms of data collection, is that this could happen and we would never know if the image was delayed or by how much. If we wanted to know how fast someone took to respond to an image, our data would become useless because we wouldn’t know when exactly when the image appeared.\nThe good news is that jsPsych provides excellent tools for managing these challenges. By understanding how to properly preload multimedia assets, choose appropriate plugins, and handle cross-platform compatibility, you can create experiments that maintain the precision required for psychological research while taking advantage of the accessibility and scalability of web-based testing.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#image-plugins",
    "href": "12-multimedia.html#image-plugins",
    "title": "12  Multimedia",
    "section": "12.2 Image Plugins",
    "text": "12.2 Image Plugins\nLet’s start with the most commonly used multimedia plugin: jsPsychImageKeyboardResponse. This plugin displays an image and waits for a keyboard response, making it perfect for tasks where participants need to make quick categorical judgments.\n\n12.2.1 Basic Image Presentation\nHere’s a straightforward example of how to present an image and collect a keyboard response:\nconst stroop_trial = {\n type: jsPsychImageKeyboardResponse,\n stimulus: 'images/stroop_red_word.png',\n choices: ['r', 'g', 'b', 'y'],\n prompt: '&lt;p&gt;Press the first letter of the &lt;strong&gt;color&lt;/strong&gt; the word is written in.&lt;/p&gt;',\n stimulus_width: 400\n};\nThe key parameters here are pretty intuitive and similar to those we’ve already discussed. For example, choices defines which keys participants can press, and prompt lets you add instructions below the image.\nThe stimulus parameter points to the location of your image file. It’s important to point it to the proper location so the browser can find it and load it. If the stimulus was simply stroop_red_word.png it would look for the file in the same folder as your experiment files. Like this:\n\n📂 my_experiment\n-- 📄 index.html\n-- 📄 exp.js\n-- 📄 style.css\n-- 🖼 stroop_red_word.png\n-- 📂 jspsych\n\nIn this case, it is images/stroop_red_word.png which indicates that it is inside a folder called image, so it expects it to be inside an additional folder called images:\n\n📂 my_experiment\n-- 📄 index.html\n-- 📄 exp.js\n-- 📄 style.css\n-- 📂 images\n    -- 🖼 stroop_red_word.png\n-- 📂 jspsych\n\nAgain, this organization is important, because if it cannot find the image file, it will not load!\nThere are other parameters available. In the previous example, we also used stimulus_width (stimulus_height is also available). You only need to set one and it will keep the original aspect ratio to automatically adjust the other.\nWe won’t review all of the other parameters available, however I suggest reviewing the documentation on your own.\n\n\n12.2.2 Other Image Response Types\nWhile keyboard responses work great for most experiments, sometimes you need different response methods. jsPsych provides two main alternatives:\nButton Responses (jsPsychImageButtonResponse): Perfect for rating scales, multiple choice questions, or when you want a more intuitive interface. Participants click on labeled buttons instead of remembering key mappings.\nSlider Responses (jsPsychImageSliderResponse): Ideal for continuous ratings like attractiveness, confidence, or emotional intensity. Instead of forcing responses into discrete categories, participants can position a slider along a continuum.\nBoth of these plugins work very similarly to the keyboard version and they just change how responses are collected. You can find detailed examples and parameter lists in the documentation for each: https://www.jspsych.org/v8/plugins/image-button-response/ and https://www.jspsych.org/v8/plugins/image-slider-response/.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#audio-plugins",
    "href": "12-multimedia.html#audio-plugins",
    "title": "12  Multimedia",
    "section": "12.3 Audio Plugins",
    "text": "12.3 Audio Plugins\nAudio stimuli are essential for language research, auditory perception studies, and providing feedback to participants. The jsPsychAudioKeyboardResponse plugin (https://www.jspsych.org/v8/plugins/audio-keyboard-response/) handles audio playback while collecting keyboard responses.\n\n12.3.1 Basic Audio Presentation\nHere’s how to present an audio stimulus and collect a response:\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-audio-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt; \n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst preload = {\n type: jsPsychPreload,\n audio: ['media/speech_green.mp3']\n}\n\nconst welcome = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;h2&gt;Welcome to the Auditory Study&lt;/h2&gt;\n      &lt;p&gt;This experiment includes audio content.&lt;/p&gt;\n      &lt;p&gt;Please ensure your speakers or headphones are connected.&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Press the spacebar to begin.&lt;/strong&gt;&lt;/p&gt;\n    &lt;/div&gt;`,\n   choices: 'ALL_KEYS', \n   post_trial_gap: 500\n}\n\nconst word_recognition_trial = {\n  type: jsPsychAudioKeyboardResponse,\n  stimulus: 'media/speech_green.mp3',\n  choices: ['1', '2', '3', '4'],\n  prompt: '&lt;p&gt;How many syllables did you hear?&lt;/p&gt;',\n  response_ends_trial: true,\n  trial_ends_after_audio: false,\n  response_allowed_while_playing: false\n};\n\njsPsych.run([\n   preload,\n   welcome,\n   word_recognition_trial\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n12.3.2 Handling Browser Audio Policies\nHere’s something that may trip you up: modern browsers won’t play audio automatically until the user has interacted with the page. This is a security feature to prevent websites from blasting unwanted sounds, but it can disrupt your experiment if not handled properly.\nThe solution is simple: make sure participants interact with your experiment before any audio trials begin. In the previous example, I had a “Welcome” screen appear first. This required you to interact with the site before the first trial.\nThis initial interaction satisfies the browser’s requirement while also giving you a chance to remind participants about audio settings.\n\n\n12.3.3 Audio Format Compatibility\nDifferent browsers support different audio formats, though MP3 files work almost everywhere. For maximum compatibility, you can provide multiple formats and let the browser pick the first one it supports:\nconst cross_platform_audio = {\n    type: jsPsychAudioKeyboardResponse,\n    stimulus: [\n        'audio/word.mp3',  // Primary format\n        'audio/word.wav'   // Fallback option\n    ],\n    choices: ['y', 'n']\n};\nIf, for some reason, the participant’s browser does not support the .mp3 format, it will try the next option which is a .wav format. Keep in mind these different files need to be present in your folder in order for this to work!\n\n\n12.3.4 Other Audio Response Types\nLike the image plugins, audio also has button and slider response variants (jsPsychAudioButtonResponse and jsPsychAudioSliderResponse) that work the same way but collect different types of responses.\nYou can read more about those in the documentation: https://www.jspsych.org/v8/plugins/audio-button-response/ and https://www.jspsych.org/v8/plugins/canvas-slider-response/.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#video-plugins",
    "href": "12-multimedia.html#video-plugins",
    "title": "12  Multimedia",
    "section": "12.4 Video Plugins",
    "text": "12.4 Video Plugins\nThe jsPsychVideoKeyboardResponse plugin provides comprehensive video playback control.\n\n12.4.1 Basic Video Presentation\nHere’s a basic video trial:\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-video-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst preload = {\n type: jsPsychPreload,\n video: ['media/starfield.mp4']\n}\n\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;h2&gt;Welcome to the Video Study&lt;/h2&gt;\n      &lt;p&gt;This experiment includes video content.&lt;/p&gt;\n      &lt;p&gt;Please ensure your speakers or headphones are connected.&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Press the spacebar to begin.&lt;/strong&gt;&lt;/p&gt;\n    &lt;/div&gt;`,\n  choices: 'ALL_KEYS', \n  post_trial_gap: 500\n}\n\nconst video_trial = {\n  type: jsPsychVideoKeyboardResponse,\n  stimulus: ['media/starfield.mp4'],\n  choices: ['r', 'g', 'b'],\n  prompt: `&lt;p&gt;What is the dominant color? (R = red, G = green B = blue).&lt;/p&gt;`,\n  width: 320,\n  height: 240,\n  autoplay: true,\n  controls: false, // Hide video controls from participants\n};\n\njsPsych.run([\n preload,\n welcome,\n video_trial\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n12.4.2 Advanced Video Control\nVideos offer more sophisticated timing options than images or audio. You can show specific segments, adjust playback speed, and control exactly when participants can respond:\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-video-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst preload = {\n type: jsPsychPreload,\n video: ['media/starfield_long.mp4']\n}\n\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;h2&gt;Welcome to the Video Study&lt;/h2&gt;\n      &lt;p&gt;This experiment includes video content.&lt;/p&gt;\n      &lt;p&gt;Please ensure your speakers or headphones are connected.&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Press the spacebar to begin.&lt;/strong&gt;&lt;/p&gt;\n    &lt;/div&gt;`,\n  choices: 'ALL_KEYS', \n  post_trial_gap: 500\n}\n\nconst video_trial = {\n  type: jsPsychVideoKeyboardResponse,\n  stimulus: ['media/starfield_long.mp4'],\n  choices: ['r', 'g', 'b'],\n  prompt: `&lt;p&gt;What is the dominant color? (R = red, G = green B = blue).&lt;/p&gt;`,\n  width: 320,\n  height: 240,\n  autoplay: true,\n  controls: false, // Hide video controls from participants\n  \n  start: 15, // Start 15 seconds into video\n  stop: 25,  // Stop at 25 seconds (10-second clip)\n  rate: 1.2, // Play at 1.2x speed\n\n  response_allowed_while_playing: true,\n  response_ends_trial: true\n};\n\njsPsych.run([\n preload,\n welcome,\n video_trial\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n12.4.3 Video Optimization\nVideo files are typically the largest multimedia assets in your experiment. MP4 files with H.264 encoding provide the best browser compatibility, while WebM offers a good open-source alternative. Like with the images plugin, we can provide fallback formats if we’re concerned about browser compatibility:\nconst optimized_video_trial = {\n    type: jsPsychVideoKeyboardResponse,\n    sources: [\n        'video/interaction.mp4',    // Primary format\n        'video/interaction.webm'    // Fallback format\n    ],\n    choices: ['1', '2', '3', '4', '5']\n};\n\n\n12.4.4 Other Video Response Types\nAs with other multimedia plugins, video also has button and slider response variants available in the jsPsych documentation.\nYou can read more about those in the documentation: https://www.jspsych.org/v8/plugins/video-button-response/ and https://www.jspsych.org/v8/plugins/video-slider-response/.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#the-importance-of-preloading",
    "href": "12-multimedia.html#the-importance-of-preloading",
    "title": "12  Multimedia",
    "section": "12.5 The Importance of Preloading",
    "text": "12.5 The Importance of Preloading\nNow that you understand how to present multimedia content, let’s talk about why preloading is incredibly important for any experiment using images, audio, or video.\n\n12.5.1 What Happens Without Preloading\nImagine this scenario: you’ve created a beautiful reaction time experiment, but you haven’t preloaded all of your images. Take a look at this example below, that simulates what could happen if you preloaded your first trial image, but did NOT preload the second trial image.\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-audio-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst welcome = {\n type: jsPsychHtmlKeyboardResponse,\n stimulus: `Press any key to begin the first trial!`,\n choices: 'ALL_KEYS', \n post_trial_gap: 500\n}\n\nconst preload = {\n type: jsPsychPreload,\n images: ['media/noodle_cropped.jpg']\n}\n\nconst image_1 = {\n type: jsPsychImageKeyboardResponse,\n stimulus: 'media/noodle_cropped.jpg',\n stimulus_width: 150,\n prompt: `&lt;p&gt;Is this cat happy or sad? Press 'e' for happy and 'i' for sad.&lt;/p&gt;`,\n choices: ['e', 'i'],\n post_trial_gap: 500\n}\n\nconst welcome_2 = {\n type: jsPsychHtmlKeyboardResponse,\n stimulus: `Press any key to begin the second trial!`,\n choices: 'ALL_KEYS', \n post_trial_gap: 500\n}\n\nconst image_2 = {\n type: jsPsychImageKeyboardResponse,\n stimulus: 'media/gatsby_cropped.jpg',\n stimulus_width: 150,\n prompt: `&lt;p&gt;Is this cat happy or sad? Press 'e' for happy and 'i' for sad.&lt;/p&gt;`,\n choices: ['e', 'i'], \n post_trial_gap: 500\n\n}\n// 3. Run jsPsych with our trials\njsPsych.run([\n preload,\n welcome,\n image_1,\n welcome_2,\n image_2\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nYou’ll notice that in the first trial, the image immediately appeared simultaneously with the prompt below it. But in the second trial, the prompt appeared first, then the image appeared. This is not good! You may have also noticed a ‘layout shift’. Because the image wasn’t loaded to take up space, the prompt appeared in a different location and then moved when the image loaded.\nWhen this trial starts, the browser has to download the image from your server. During this download:\n\nThe trial timing becomes completely unpredictable\nParticipants might see a broken image icon or blank space\nResponse timing measurements start before they can actually see the stimulus\nThe trial might fail entirely if the network is slow\n\nThis variability would make your reaction time data essentially meaningless. One participant might have 50ms loading delays while another has 300ms delays, and you’d have no way to separate these technical artifacts from the cognitive processes you’re trying to study.\n\n\n12.5.2 How Preloading Solves the Problem\nPreloading downloads all your multimedia files before any experimental trials begin, storing them in the browser’s memory. When trials later reference these files, they display instantly because they’re already available locally.\nThe modern way to implement preloading in jsPsych uses the jsPsychPreload plugin with automatic detection. This plugin works just like any other plugin, in that we have to load it in the &lt;head&gt; and place it into our experiment timeline. Wherever we place it is when it will occur.\njsPsych can do some automatic preloading for us. In this first example, I’ll call the preload trial right at the beginning of the experiment, so that everything loads before the participant sees anything.\nconst preload = {\n    type: jsPsychPreload,\n    auto_preload: true\n};\n\n// These files will be automatically detected and preloaded\nconst image_trial = {\n    type: jsPsychImageKeyboardResponse,\n    stimulus: 'images/face1.jpg',\n    choices: ['y', 'n']\n};\n\nconst audio_trial = {\n    type: jsPsychAudioKeyboardResponse,\n    stimulus: 'audio/word.mp3',\n    choices: ['space']\n};\n\nconst timeline = [preload, image_trial, audio_trial];\nThe auto_preload: true setting tells jsPsych to automatically scan your timeline and preload any multimedia files it finds. This is incredibly convenient and works for most standard use cases.\n\n\n12.5.3 Manual Preloading\nHowever, often we need to manually set our files to preload because we’re using timeline variables in our experiment or embedding our stimulus in HTML (we’ll do this later in the book). For this reason, I almost always just use manual preloading because I want to always avoid missing the preload.\nFor the manual preload, we provide the filepaths for all of our stimuli that need to be preloaded. Different media require different strategies for preloading, so we need to provide separate lists for our images, audio, and video files:\nconst manual_preload = {\n    type: jsPsychPreload,\n    images: ['images/instruction_example.jpg', 'images/feedback_happy.png'],\n    audio: ['audio/instructions.mp3', 'audio/beep.wav'],\n    video: ['video/demonstration.mp4']\n};\n\n// This image is embedded in HTML, so it needs manual preloading\nconst instructions = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n        &lt;h2&gt;Task Instructions&lt;/h2&gt;\n        &lt;img src=\"images/instruction_example.jpg\" width=\"200\"&gt;\n        &lt;p&gt;You will see faces like the one above...&lt;/p&gt;\n    `,\n    choices: [' ']\n};\n\n\n12.5.4 Preloading Options and User Experience\nLike all other plugins, there other parameters we can set. The preload plugin offers several options to improve the user experience:\nconst user_friendly_preload = {\n    type: jsPsychPreload,\n    auto_preload: true,\n\n    show_progress_bar: true,\n    message: 'Loading experiment materials... This may take a moment.',\n\n    max_load_time: 60000, // 60 seconds timeout\n    error_message: 'The experiment failed to load. Please refresh and try again.',\n\n    continue_after_error: false // Stop if loading fails\n};\nThe progress bar gives participants feedback about loading progress, the custom message explains what’s happening, and the timeout prevents indefinite waiting if something goes wrong.\n\n\n12.5.5 Batch Loading for Large Experiments\nFor experiments with many files, you might want to load content in smaller batches throughout the experiment rather than everything at once:\nconst block_1 = {\n    timeline: [\n        {\n            type: jsPsychImageKeyboardResponse,\n            stimulus: 'img/file1.png'\n        },\n        {\n            type: jsPsychImageKeyboardResponse,\n            stimulus: 'img/file2.png'\n        }\n    ]\n}\n\nconst block_2 = {\n    timeline: [\n        {\n            type: jsPsychImageKeyboardResponse,\n            stimulus: 'img/file3.png'\n        },\n        {\n            type: jsPsychImageKeyboardResponse,\n            stimulus: 'img/file4.png'\n        }\n    ]\n}\n\nconst preload_1 = {\n    type: jsPsychPreload,\n    images: ['img/file1.png', 'img/file2.png'] \n}\n\nconst preload_2 = {\n    type: jsPsychPreload,\n    images: [ 'img/file3.png', 'img/file4.png'] \n}\n\njsPsych.run(\n    // add each preload trial onto the timeline before the appropriate trial block\n    [preload_1, block_1, preload_2, block_2]\n);\nThis approach can be helpful for very large experiments or when working with participants who have limited bandwidth.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#embedding-multimedia-in-html-instructions",
    "href": "12-multimedia.html#embedding-multimedia-in-html-instructions",
    "title": "12  Multimedia",
    "section": "12.6 Embedding Multimedia in HTML Instructions",
    "text": "12.6 Embedding Multimedia in HTML Instructions\nSometimes you need to include multimedia content within instruction screens rather than as the primary stimulus. This is different from using dedicated multimedia plugins because the content is embedded within HTML.\nTo accomplish this, we rely on the HTML and CSS we learned in the earlier chapters. However, we can still preload the multimedia in the same way to prevent lags in loading.\n\n12.6.1 Images\nVisual examples can make instructions much clearer. Here is an example of using &lt;img&gt; tag to embed an image in our instructions:\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst preload = {\n type: jsPsychPreload,\n images: ['media/noodle_cropped.jpg']\n}\n\nconst task_instructions = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n        &lt;div style='max-width: 800px; margin: 0 auto; text-align: center;'&gt;\n            &lt;h2&gt;Categorization Task&lt;/h2&gt;\n\n            &lt;p&gt;You will see cats and categorize them as either happy or sad:&lt;/p&gt;\n\n            &lt;div style='display: flex; justify-content: space-around; margin: 20px 0;'&gt;\n                &lt;div&gt;\n                    &lt;img src='media/noodle_cropped.jpg' width='100' \n                         style='border: 2px solid #333; border-radius: 5px;'&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;p&gt;&lt;strong&gt;Press spacebar when ready to begin.&lt;/strong&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    `,\n    choices: [' ']\n};\n\n\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n preload,\n task_instructions\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n12.6.2 Audio\nYou can also embed audio in the HTML using the &lt;audio&gt; tag (see here for info). This can be useful if you need the participant to test their audio before beginning the experiment or providing examples.\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-audio-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt; \n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst preload = {\n type: jsPsychPreload,\n audio: ['media/speech_green.mp3']\n}\n\nconst welcome = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;h2&gt;Welcome to the Auditory Study&lt;/h2&gt;\n      &lt;p&gt;This experiment includes audio content.&lt;/p&gt;\n      &lt;p&gt;Please ensure your speakers or headphones are connected.&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Press the spacebar to begin.&lt;/strong&gt;&lt;/p&gt;\n    &lt;/div&gt;`,\n   choices: 'ALL_KEYS', \n   post_trial_gap: 500\n}\n\nconst audio_instructions = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n         &lt;div style='max-width: 600px; text-align: left'&gt;\n            &lt;h3&gt;Instructions&lt;/h3&gt;\n                &lt;p&gt;Listen to each word carefully. Press 'R' for real words, 'N' for nonsense words. Respond as quickly as possible&lt;/p&gt;\n            &lt;div&gt;\n                &lt;p&gt;&lt;strong&gt;Listen to an example:&lt;/strong&gt;&lt;/p&gt;\n                &lt;audio controls style='width: 100%;'&gt;\n                    &lt;source src='media/speech_green.mp3' type='audio/mpeg'&gt;\n                    Your browser does not support audio.\n                &lt;/audio&gt;\n            &lt;/div&gt;\n            &lt;p&gt;&lt;strong&gt;Press spacebar when ready.&lt;/strong&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    `,\n    choices: [' ']\n};\n\njsPsych.run([\n   preload,\n   welcome,\n   audio_instructions\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n12.6.3 Video\nVideo demonstrations are great for showing complex procedures or providing examples;\n\nindex.htmlexp.jsResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n &lt;title&gt;Demo&lt;/title&gt;\n &lt;!-- jsPsych --&gt;\n &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n \n &lt;!-- jPsych plugins --&gt;\n &lt;script src=\"jspsych/plugin-video-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n &lt;!-- custom JS --&gt;\n &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nconst jsPsych = initJsPsych();\n\nconst preload = {\n type: jsPsychPreload,\n video: ['media/starfield.mp4']\n}\n\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;h2&gt;Welcome to the Video Study&lt;/h2&gt;\n      &lt;p&gt;This experiment includes video content.&lt;/p&gt;\n      &lt;p&gt;Please ensure your speakers or headphones are connected.&lt;/p&gt;\n      &lt;p&gt;&lt;strong&gt;Press the spacebar to begin.&lt;/strong&gt;&lt;/p&gt;\n    &lt;/div&gt;`,\n  choices: 'ALL_KEYS', \n  post_trial_gap: 500\n}\n\nconst video_instructions = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n        &lt;div style=\"max-width: 800px;\"&gt;\n            &lt;h2&gt;How to Complete the Task&lt;/h2&gt;\n\n            &lt;p&gt;Watch this example:&lt;/p&gt;\n\n            &lt;video width=\"300\"controls&gt;\n                &lt;source src=\"media/starfield.mp4\" type=\"video/mp4\"&gt;\n                Your browser does not support video.\n            &lt;/video&gt;\n            &lt;p&gt;&lt;strong&gt;Press spacebar to continue.&lt;/strong&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    `,\n    choices: [' ']\n};\n\njsPsych.run([\n preload,\n welcome,\n video_instructions\n]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#understanding-file-paths",
    "href": "12-multimedia.html#understanding-file-paths",
    "title": "12  Multimedia",
    "section": "12.7 Understanding File Paths",
    "text": "12.7 Understanding File Paths\nGetting the file paths right is obviously important for our experiments; if we don’t point the browser to the right location, the file will not load. Let’s review how to reference files from different locations using a typical experiment structure.\n\n📂 my_experiment  ← Reference point (where index.html lives)\n├── 📄 index.html  ← This file loads your experiment\n├── 📄 exp.js      ← This file contains your jsPsych code\n├── 📄 style.css\n├── 🖼️ stroop_red_word.png\n├── 📂 jspsych\n│   └── 📄 jspsych.js\n├── 📂 images\n│   ├── 🖼️ happy_face.jpg\n│   └── 🖼️ sad_face.jpg\n└── 📂 audio\n    └── 🔊 beep.wav\n\nWhen your JavaScript code tries to load a file, it looks for that file relative to the location of the HTML file that’s running the experiment (typically index.html). This location serves as your reference point for all file paths.\n\n12.7.1 Files in the Same Directory\nWhen files are in the same folder as your index.html file, just use the filename. For example:\n\n📂 my_experiment\n├── 📄 index.html\n├── 📄 exp.js\n├── 📄 style.css\n├── 🖼️ stroop_red_word.png\n├── 🖼️ stroop_blue_word.png\n└── 📂 jspsych\n\nIf we wanted to load these image files, we’d simply refer to it by their file name. The browser will assume it is in the same folder as the index.html.\n// File in the same directory\nconst trial = {\n  type: jsPsychKeyboardResponsePlugin,\n  stimulus: 'stroop_red_word.png'\n}\n\n\n12.7.2 Files in Subfolders\nThe most common approach is to organize your files into subdirectories (sometimes with complex nested structures). In these cases, we need to provide the folder structure relative to the index.html file. In this example, I have some images in a subdirectory called images, but inside that directory, I’ve organized my face images into angry, sad, and happy directories.\n\n📂 my_experiment  \n├── 📄 index.html  \n├── 📄 exp.js     \n├── 📄 style.css\n├── 📂 jspsych\n│   └── 📄 jspsych.js\n└── 📂 images\n    ├── 🖼️ example_1.jpg\n    ├── 🖼️ example_1.jpg\n    └── 📂 faces \n        ├── 📂 angry\n        │   ├── 🖼️angry_face_1.jpg\n        │   └── 🖼️angry_face_2.jpg\n        ├── 📂 sad\n        │   ├── 🖼️sad_face_1.jpg\n        │   └── 🖼️sad_face_2.jpg\n        └── 📂 happy\n            ├── 🖼️happy_face_1.jpg\n            └── 🖼️happy_face_2.jpg\n\nTo load these files in my jsPsych experiment, I need to provide the subdirectory names along with the file name to show the full file path relative to my index.html file:\n// in the images subdirectory\nstimulus: \"images/example_1.jpg\"\n\n// in the faces subdirectories\nstimulus: \"images/faces/angry/angry_face_1.jpg\"\nstimulus: \"images/faces/sad/sad_face_1.jpg\"\nstimulus: \"images/faces/happy/happy_face_1.jpg\"\n\n\n12.7.3 Files Outside the Main Directory\nSometimes files might be located outside your experiment folder. This is uncommon, but it is possible to load files that are stored outside the directory that contains the index.html file. For example, maybe you have multiple experiments that share the same files:\n\n📂 research_project\n├── 🖼️ shared_logo.png\n├── 📂 shared_stimuli\n│   └── 🖼️ standard_face.jpg\n└── 📂 experiment_1  ← Your index.html is here\n    ├── 📄 index.html\n    ├── 📄 exp.js\n    └── 📂 images\n        └── 🖼️ local_image.jpg\n\nIn this case, we need to use the ../ notation to indicate that something is one level up from our main directory. Again, remembering that our main directory will be where the index.html file is:\n// Go up one level (..) to access files outside your main directory\nstimulus: '../shared_logo.png'\nstimulus: '../shared_stimuli/standard_face.jpg'\nKey principles:\n\nAll paths are relative to where your index.html file is located\nNo slash at the start = relative to current location\n../ = go up one directory level\nAlways use forward slashes (/) even on Windows\nKeep paths simple and consistent throughout your experiment\n\nBest practice: Keep all experimental files within your main experiment directory or its subfolders. This makes your experiment portable and avoids confusing ../ paths that can break when you move your experiment to different locations or servers.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "12-multimedia.html#summary",
    "href": "12-multimedia.html#summary",
    "title": "12  Multimedia",
    "section": "12.8 Summary",
    "text": "12.8 Summary\nMultimedia integration is both powerful and challenging for web-based experiments. The ability to present visual, auditory, and video content opens up new possibilities for creating engaging and ecologically valid experiments. However, success requires careful attention to several key principles.\nPreloading is absolutely essential for any experiment using multimedia content. The jsPsychPreload plugin with auto_preload: true handles some cases automatically, but you’ll more often need manual preloading for files embedded in timeline variables or HTML. Always include a progress bar and reasonable timeout limits to manage the user experience.\nFile format selection significantly impacts both compatibility and performance. Prioritize widely supported formats: JPEG for images, MP3 for audio, and MP4 for video. Provide fallback formats when concerned about compatibility and provide informative error messages to participants. Optimize file sizes to ensure reasonable loading times across different network conditions. To reduce file sizes, resize images/videos to be the size they are being presented. For example, if your image is only being shown at 200x200 pixels, don’t load a 1000x1000px image. Resize it using a photo editor.\nEmbedding multimedia in HTML instructions can help with participant comprehension and engagement, but remember that these files also need to be preloaded. Combine visual examples, audio narration, and video demonstrations thoughtfully, always providing alternative text descriptions for accessibility.\nTroubleshooting multimedia issues: File path problems are the most common issue—use consistent relative paths and check the browser’s developer tools for 404 errors. Format compatibility issues can be avoided by sticking to standard web formats and providing fallbacks when necessary. Performance problems often stem from oversized files or inadequate network conditions, so optimize your content and test across different connection speeds.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Multimedia</span>"
    ]
  },
  {
    "objectID": "13-L05.html",
    "href": "13-L05.html",
    "title": "13  Lab 5: Mental Imagery",
    "section": "",
    "text": "13.1 Research in Brief: Mental Rotation",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 5: Mental Imagery</span>"
    ]
  },
  {
    "objectID": "13-L05.html#research-in-brief-mental-rotation",
    "href": "13-L05.html#research-in-brief-mental-rotation",
    "title": "13  Lab 5: Mental Imagery",
    "section": "",
    "text": "13.1.1 The Research Area\nMental imagery refers to our ability to create and manipulate mental representations of visual, auditory, or other sensory information when the actual stimuli are not physically present. This cognitive ability allows us to “see” objects in our mind’s eye, rotate them mentally, and perform various operations on these internal representations.\nMental imagery research addresses fundamental questions about how our minds represent and process information. Can we manipulate mental images the same way we manipulate physical objects? Do our mental images share properties with actual perception? This area of research has profound implications for understanding creativity, problem-solving, spatial reasoning, and the relationship between thought and perception.\nThe study of mental imagery also connects to practical applications in fields requiring strong spatial skills, such as engineering, architecture, medicine, and the STEM disciplines. Understanding how people create and manipulate mental images helps us develop better training methods for spatial abilities and design more effective educational interventions.\n\n13.1.1.1 Individual Differences in Imagery Ability\nPeople vary dramatically in their ability to create and experience mental images. Most individuals report having moderately vivid mental imagery, but the extremes of this continuum reveal fascinating insights into the nature of mental representation. Aphantasia represents one extreme, where individuals report having little to no conscious visual imagery—when asked to imagine an apple, they may understand the concept but experience no visual mental image. At the opposite extreme, hyperphantasia describes exceptionally vivid mental imagery that can be nearly as clear and detailed as actual perception. People with hyperphantasia often report that their mental images are so vivid they can sometimes be confused with real perceptions.\nThese individual differences highlight that mental imagery is not a uniform cognitive ability but rather exists on a spectrum. Interestingly, people with aphantasia can still perform many spatial reasoning tasks successfully, suggesting they may use alternative cognitive strategies, while those with hyperphantasia may rely heavily on their vivid imagery for problem-solving and memory tasks.\n\n\n\n13.1.2 The Research Design\nThe classic mental rotation paradigm developed by Shepard and Metzler (1971) employs a repeated measures experimental design where participants make same/different judgments about pairs of three-dimensional geometric figures presented at various orientations.\n\n13.1.2.1 The Mental Rotation Methodology\nStimulus Presentation: Participants view pairs of line drawings depicting three-dimensional geometric objects. One object in each pair is rotated relative to the other by angles ranging from 0° to 180° in 20-degree increments. Some pairs show the same object at different orientations, while others show different (mirror-image) objects that cannot be made to match through rotation.\nTask Requirements: For each pair, participants must decide whether the two objects are the same shape (and could be rotated to match exactly) or different shapes (mirror images that cannot be made to match through rotation). They respond by pulling different levers for “same” and “different” judgments.\nThe design includes two rotation conditions: picture-plane rotation where objects are rotated within the two-dimensional plane of the page (like rotating a flat picture), and depth rotation where objects are rotated in three-dimensional space (like rotating a physical object in depth).\n\n\n13.1.2.2 Within-Subjects Comparisons\nThe repeated measures approach allows researchers to examine how rotation angle affects response time within the same participants. Each person responds to multiple rotation angles (0°, 20°, 40°, 60°, 80°, 100°, 120°, 140°, 160°, 180°), both rotation types (picture-plane and depth rotations), and both same and different pairs. This design controls for individual differences in spatial ability, response speed, and decision-making style while isolating the specific effect of mental rotation demands.\n\n\n\n13.1.3 Key Findings\nThe repeated measures comparisons revealed a striking linear relationship between rotation angle and response time. Response time increased systematically with rotation angle, from approximately 1 second at 0° rotation to 4-5 seconds at 180° rotation. Both picture-plane and depth rotations showed nearly identical linear functions, suggesting similar underlying mental processes. While participants varied in overall speed, virtually all showed the same linear relationship between angle and response time, and participants remained accurate across all rotation angles, indicating they were genuinely performing mental rotation rather than guessing.\nThe within-subjects design revealed that picture-plane rotation (2D) showed average response times ranging from ~1.0 seconds (0°) to ~4.8 seconds (180°), while depth rotation (3D) ranged from ~1.0 seconds (0°) to ~5.2 seconds (180°). Both conditions showed approximately 1.6 seconds per 100° of rotation. The remarkable similarity between 2D and 3D rotation suggests that people can mentally rotate objects in three-dimensional space almost as efficiently as in two dimensions.\n\n\n13.1.4 Implications\nThe linear relationship between rotation angle and response time provides strong evidence for analog mental representation. If mental images were stored as abstract, language-like descriptions (propositional codes), rotation angle should not systematically affect processing time. Instead, the data suggest that people mentally rotate images through intermediate positions, just as they would rotate physical objects.\nThe findings support analog coding theories which propose that mental images preserve spatial relationships and can be manipulated using processes similar to those used with physical objects. The systematic increase in response time with rotation angle indicates that mental rotation involves a continuous process rather than discrete computational steps.\nThis repeated measures research demonstrates that mental imagery operates according to spatial principles similar to those governing physical object manipulation. The consistent linear relationship across participants and rotation types suggests that mental rotation reflects a fundamental property of spatial cognition rather than an experimental artifact.\nThe paradigm has become a cornerstone for studying individual differences in spatial ability, with applications ranging from understanding gender differences in spatial skills to developing training programs for professions requiring strong spatial reasoning. The findings also provide crucial evidence that mental imagery involves more than simple verbal descriptions—it appears to engage spatial processing systems that mirror those used in actual perception and action.\nThe mental rotation task continues to be widely used in cognitive psychology, neuroscience, and educational research as a reliable measure of spatial visualization ability and a window into the nature of mental representation. Importantly, even individuals with aphantasia can often perform mental rotation tasks successfully, though they may use different cognitive strategies than those who experience vivid mental imagery.\n\n\n13.1.5 Further Reading\nShepard, R. N., & Metzler, J. (1971). Mental rotation of three-dimensional objects. Science, 171(3972), 701-703.\nMonzel, M., & Reuter, M. (2023). Where’s Wanda? The influence of visual imagery vividness on visual search speed measured by means of hidden object pictures. Attention, Perception, & Psychophysics, 1-6.\nBeaman, C. P., Powell, K., & Rapley, E. (2015). Rapid Communication: Want to block earworms from conscious awareness? B (u) y gum!.\nBainbridge, W. A., Pounder, Z., Eardley, A. F., & Baker, C. I. (2021). Quantifying aphantasia through drawing: Those without visual imagery show deficits in object but not spatial memory. Cortex, 135, 159-172.\nAgnew, M. (1922). The auditory imagery of great composers. Psychological Monographs, 31(1), 279.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 5: Mental Imagery</span>"
    ]
  },
  {
    "objectID": "13-L05.html#program-a-mental-rotation-task",
    "href": "13-L05.html#program-a-mental-rotation-task",
    "title": "13  Lab 5: Mental Imagery",
    "section": "13.2 Program a Mental Rotation Task",
    "text": "13.2 Program a Mental Rotation Task\nIn this exercise, we’re going to program a mental rotation task with multiple blocks of trials. Across the blocks of trials, we’ll manipulate the difficulty of the task, starting with easy trials, where the rotation differences are larger, to more difficult trials, where the rotation differences are smaller.\nOur initial folder structure looks similar to previous labs, except now we have a folder that contains all of our images. Each image shows a pair of 3d objects.\n\n📂 L05\n├──  📄 index.html\n├──  📄 exp.js\n├──  📄 style.css\n├──  📂 jspsych\n└──  📂 images\n     ├── 🖼️ 0_D_1.jpg\n     ├── 🖼️ 0_D_2.jpg\n     └── etc.\n\nThe image names tell us what the rotation difference is between the two and whether they are in fact the “same” image or “different” (a mirrored version). 0_S_1.jpg, for example, tells us that this image contains 0 degree difference, they are the same image (“S”) and it is image 1. We have six images for every rotation and same/different combination. For example, this image below has a 100 degree rotation difference, but they are the same image:\n\n\n\nmental rotation image\n\n\n\n13.2.1 Initiate jsPsych\nLet’s jump right in by loading and initiating jsPsych with a welcome screen.\nI’ve decided to use the jsPsychImageResponse for the study phase and the for the test phase so I’ve loaded them both in the &lt;head&gt;. We’re also going to need our jsPsychPreload plugin to preload all of our images before the experiment begins.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.2 Add a mental rotation trial\nWe’re going to start by adding a single mental rotation trial to see what it looks like. We’re going to use our timeline method. So, I’ll put the trial inside a timeline array and add a single image to the timeline_variables parameter. We’ll use our jsPsych.timelineVariable(\"image\") to refer to that image in our stimulus.\nWe also need to add our new block easy_block to the jsPsych.run() function. Reminder: Don’t forget to add the comma on line 25 before adding the easy_block.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\")\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"}\n  ]\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  easy_block\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.3 Update the trial parameters\nNow that we have a simple trial, we make some necessary changes to update the parameters to operate properly. I’ve added a few sensible options here, setting the prompt and choices so participants need to press “S” or “D”.\nI also noticed the image was too large, so I changed stimulus_width to be 300px and then added a post_trial_gap of 250ms. This will add a bit of a gap between trials.\nReminder: Don’t forget to add the comma on line 25 before adding the new parameters\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"}\n  ]\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  easy_block\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.4 Add additional trials\nLet’s add some more trials. This is the “Easy” block, so we’ll just use the 0-degree images for this one.\nI’ve also set randomize_order: true so that they appear in a random order.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"},\n    {image: \"images/0_S_2.jpg\"},\n    {image: \"images/0_D_1.jpg\"},\n    {image: \"images/0_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  easy_block\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.5 Add a fixation between trials\nNow that we have a series of trials, it becomes clear that we should have a break between each. Let’s add a fixation cross before each trial using the jsPsychHtmlKeyboardResponse plugin.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"},\n    {image: \"images/0_S_2.jpg\"},\n    {image: \"images/0_D_1.jpg\"},\n    {image: \"images/0_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  easy_block\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.6 Preload Images\nNow, for an important step. If you tried the demos in the previous steps, you probably found that the images lagged. That’s because this is being hosted on the internet and we didn’t preload our images! If you’re running the code locally, you probably did not notice any lag, because nothing is being sent over the internet connection.\nLet’s preload our images! I’ve already loaded the preload plugin in the HTML &lt;head&gt;, we just need to add it to our experiment.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst preload = {\n  type: jsPsychPreload,\n  images: [\n    \"images/0_S_1.jpg\",\n    \"images/0_S_2.jpg\",\n    \"images/0_D_1.jpg\",\n    \"images/0_D_2.jpg\"\n  ]\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"},\n    {image: \"images/0_S_2.jpg\"},\n    {image: \"images/0_D_1.jpg\"},\n    {image: \"images/0_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  preload,\n  welcome,\n  easy_block\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.7 Add a Medium Difficulty Block\nLet’s up the difficulty and create a second block of trials that has some more difficult trials.\nThere are three things that need to happen:\n\nCreate a medium_block timeline with different images (otherwise it’s identical to the easy_block) [lines 52 to 77]\nAdd our new images to the preload [lines 17 to 21]\nAdd our medium_block to the jsPsych.run() function [lines 83 to 84]\n\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst preload = {\n  type: jsPsychPreload,\n  images: [\n    \"images/0_S_1.jpg\",\n    \"images/0_S_2.jpg\",\n    \"images/0_D_1.jpg\",\n    \"images/0_D_2.jpg\",\n    \"images/50_S_1.jpg\",\n    \"images/50_S_2.jpg\",\n    \"images/50_D_1.jpg\",\n    \"images/50_D_2.jpg\"\n  ]\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"},\n    {image: \"images/0_S_2.jpg\"},\n    {image: \"images/0_D_1.jpg\"},\n    {image: \"images/0_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\nconst medium_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/50_S_1.jpg\"},\n    {image: \"images/50_S_2.jpg\"},\n    {image: \"images/50_D_1.jpg\"},\n    {image: \"images/50_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  preload,\n  welcome,\n  easy_block,\n  medium_block\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n13.2.8 Add some additional instruction and debrief screens\nBefore we finish, let’s tidy up our experiment by providing a few additional trials that happen between each block and one that tells the participant the experiment is finished at the end.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 4: Mental Imagery&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst preload = {\n  type: jsPsychPreload,\n  images: [\n    \"images/0_S_1.jpg\",\n    \"images/0_S_2.jpg\",\n    \"images/0_D_1.jpg\",\n    \"images/0_D_2.jpg\",\n    \"images/50_S_1.jpg\",\n    \"images/50_S_2.jpg\",\n    \"images/50_D_1.jpg\",\n    \"images/50_D_2.jpg\"\n  ]\n}\n\nconst easy_intro = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;p&gt;First, you will complete a block of easy trials.&lt;/p&gt;\n    &lt;p&gt;When you are ready for the first block, press any key&lt;/p&gt;\n    `,\n  choices: \"ALL_KEYS\"\n}\n\nconst easy_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/0_S_1.jpg\"},\n    {image: \"images/0_S_2.jpg\"},\n    {image: \"images/0_D_1.jpg\"},\n    {image: \"images/0_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\nconst medium_intro = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;p&gt;Great! Now you will complete a block of more difficult trials.&lt;/p&gt;\n    &lt;p&gt;When you are ready for the this block, press any key&lt;/p&gt;\n    `,\n  choices: \"ALL_KEYS\"\n}\n\nconst medium_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychImageKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"image\"),\n      prompt: `&lt;p&gt;Press \"S\" if the images are the same or \"D\", if they are different&lt;/p&gt;`,\n      choices: [\"s\", \"d\"],\n      stimulus_width: 300,\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {image: \"images/50_S_1.jpg\"},\n    {image: \"images/50_S_2.jpg\"},\n    {image: \"images/50_D_1.jpg\"},\n    {image: \"images/50_D_2.jpg\"}\n  ],\n  randomize_order: true\n}\n\nconst debrief =  {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;p&gt;The experiment is now complete.&lt;/p&gt;\n    &lt;p&gt;Thank you for completing our study, you may now safely close the browser.&lt;/p&gt;\n    `,\n  choices: \"ALL_KEYS\"\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  preload,\n  welcome,\n  easy_intro,\n  easy_block,\n  medium_intro,\n  medium_block,\n  debrief\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 5: Mental Imagery</span>"
    ]
  },
  {
    "objectID": "13-L05.html#stretch-goals",
    "href": "13-L05.html#stretch-goals",
    "title": "13  Lab 5: Mental Imagery",
    "section": "13.3 Stretch Goals",
    "text": "13.3 Stretch Goals\n\n13.3.1 Add Instructions\nUse the jsPsychInstructions plugin to add these instructions to the experiment. Do your best to style it the way it is styled here.\nReminder: Don’t forget to add the instructions plugin to your &lt;head&gt;!\nInstructions:\nPage 1:\nIn this experiment, you will see two images of 3D objects.\nYour task is to indicate whether the two objects are the same or if they are different.\nPage 2:\nThe objects may be rotated at different angles, so you will need to mentally rotate them to compare their shapes.\nPress ‘S’ if the objects are the same shape.\nPress ‘D’ if the objects are different shapes.\nTry to respond as quickly and accurately as possible.\nPage 3:\nExample - SAME objects:\nInsert Image Here: “images/100_S_1.jpg”\nThese objects are the same shape, just rotated differently.\nYou would press ‘S’ for this pair.\nPage 4:\nExample - DIFFERENT objects:\nInsert Image Here: “images/100_D_1.jpg”\nThese objects are different shapes.\nYou would press ‘D’ for this pair.\nClick ‘Next’ when you’re ready to begin the experiment.\n\n\n13.3.2 Add a third “Mixed” block of trials\nIn a proper mental rotation task, we need to mix in trials of all rotations. Let’s add a third block called mixed_block that has one of each type of rotation:\n\n\"images/0_S_3.jpg\"\n\"images/0_D_3.jpg\"\n\"images/50_S_3.jpg\"\n\"images/50_D_3.jpg\"\n\"images/100_S_3.jpg\"\n\"images/100_D_3.jpg\"\n\"images/150_S_3.jpg\"\n\"images/150_D_3.jpg\"\n\nMake sure you add a mixed_intro to tell the participant that they are about to begin the experimental trials.\n\n\n13.3.3 Change the style\nSince the mental rotation images are white on a black background, try updating the style.css file to make the whole experiment have a black background and white font.",
    "crumbs": [
      "Unit 5: Multimedia",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Lab 5: Mental Imagery</span>"
    ]
  },
  {
    "objectID": "14-data.html",
    "href": "14-data.html",
    "title": "14  Saving and Labeling Data",
    "section": "",
    "text": "14.1 How jsPsych Stores Data\nBefore we dive into labeling data, it’s important to understand how jsPsych actually saves your experimental data. jsPsych uses a simple but powerful principle: one event per row. Every time something happens in your experiment (a participant responds to a stimulus, views an instruction screen, or completes any trial) jsPsych creates a new row of data.\nLet’s start with a simple example to see this in action:\nWhen this simple experiment runs, jsPsych automatically collects data for each trial. Here’s what the resulting CSV file would look like:\nNotice that we have three rows, one for each trial that ran. jsPsych automatically includes several pieces of information in each row. The trial_type column tells us which plugin was used, while trial_index shows the order in which trials occurred (starting from 0). The time_elapsed column records the total time since the experiment started in milliseconds, and rt shows the response time for this specific trial. The stimulus column contains what was presented to the participant, response records what key they pressed, and plugin_version tells us which version of jsPsych was used.\nIt’s important to understand that jsPsych saves a row for everything that happens in your experiment. Instruction screens, fixation crosses, feedback screens, and actual experimental trials all get their own rows. This means you’ll often need to filter your data during analysis to focus only on the trials that contain your actual experimental responses.\nWhile this data captures the basic mechanics of what happened, notice how little meaningful information we actually have about our experiment. Looking at row 2, we can see that the participant pressed ‘y’ in response to the chocolate question, but we have no easy way to know what ‘y’ means, whether this was correct, or what type of question this was. The same problem exists for row 3 with the vanilla question. Without additional context, we can’t easily determine what their response pattern means or how to categorize these responses for analysis. .\nTo best understand why this is a problem, we can return to the memory experiment in Chapter 11. Let’s have a look at our code and the resulting data:\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500\n}\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    // Page 1: Welcome and Overview\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;You will participate in a memory experiment with two phases:&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 1:&lt;/strong&gt; Study a list of words&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 2:&lt;/strong&gt; Decide if words are OLD or NEW&lt;/p&gt;\n     &lt;p&gt;Click Next to continue.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 2: Study Phase Instructions  \n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;During the study phase, you will see words appear one at a time. Read each word carefully and try to remember it.&lt;/p&gt;\n     &lt;p&gt;Each word appears for 1 second.You will study about 15 words total.&lt;/p&gt;\n     &lt;p&gt;You do not need to press any keys during this phase.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 3: Test Phase Instructions\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;During the test phase, you will see words one at a time. Some words are OLD (from the study list). Some words are NEW (not from the study list).&lt;/p&gt;\n     &lt;p&gt;Press the 'OLD' button if the word was old.&lt;/p&gt;\n     &lt;p&gt;Press the 'NEW' button if the word was new&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 4: Stay focused\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;Trust your first instinct.&lt;/p&gt;\n      &lt;p&gt;If unsure, make your best guess.&lt;/p&gt;\n    &lt;/div&gt;`,\n\n    // Page 5: Final Instructions\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;Try to stay focused throughout the experiment. The experiment only takes a few minutes.&lt;/p&gt;\n      &lt;p&gt;Click Next to start the study phase.&lt;/p&gt;\n     &lt;/div&gt;`\n  ],\n  key_forward: 'ArrowRight',\n  key_backward: 'ArrowLeft',\n  allow_backward: true,\n  show_clickable_nav: true,\n  button_label_previous: 'Back',\n  button_label_next: 'Next'\n};\n\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"+\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 250,\n      trial_duration: 500,\n      css_classess: \"wordStyle\"\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000,\n      css_classess: \"wordStyle\"\n    }\n  ],\n  timeline_variables: [\n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"],\n      css_classess: \"wordStyle\"\n    }\n  ],\n  timeline_variables: [\n         // OLD WORDS \n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"},\n        // NEW WORDS\n        {word: \"DOCTOR\"},\n        {word: \"NURSE\"},\n        {word: \"SICK\"},\n        {word: \"LAWYER\"},\n        {word: \"MEDICINE\"},\n        {word: \"HEALTH\"},\n        {word: \"HOSPITAL\"},\n        {word: \"DENTIST\"},\n        {word: \"PHYSICIAN\"},\n        {word: \"ILL\"},\n        {word: \"PATIENT\"},\n        {word: \"OFFICE\"},\n        {word: \"STETHOSCOPE\"},\n        {word: \"SURGEON\"},\n        {word: \"CLINIC\"},\n        {word: \"CURE\"},\n        // critical word \n        {word: \"SLEEP\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  instructions,\n  study,\n  test\n]);\nThe resulting data from running this code looks like this:\nIf you’ve just collected this data how would you analyze it? How would you know which words were the studied words and which were the new ones? Which rows are part of the study phase versus the test phase? Which word is the critical lure?\nOf course, you could go through this file row-by-row and figure it out, but if we had properly labelled each row, then we’ll have a much easier time analyzing the data when we have 100 of these files. This is exactly why we need to add our own data labels to make the dataset meaningful and analysis-ready. We’ll return to our memory experiment later to illustrate proper data labeling.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Saving and Labeling Data</span>"
    ]
  },
  {
    "objectID": "14-data.html#how-jspsych-stores-data",
    "href": "14-data.html#how-jspsych-stores-data",
    "title": "14  Saving and Labeling Data",
    "section": "",
    "text": "exp.jsResult\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;p&gt;Welcome to the experiment!&lt;/p&gt;&lt;p&gt;Press any key to continue.&lt;/p&gt;'\n};\n\nconst question1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n  choices: ['y', 'n']\n};\n\nconst question2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n  choices: ['y', 'n']\n};\n\nconst goodbye = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;p&gt;Thank you for participating!&lt;/p&gt;&lt;p&gt;Press any key to finish.&lt;/p&gt;'\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([welcome, question1, question2, goodbye]);\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrt\nstimulus\nresponse\ntrial_type\ntrial_index\nplugin_version\ntime_elapsed\n\n\n\n\n4128\n&lt;p&gt;Welcome to the experiment!&lt;/p&gt;&lt;p&gt;Press any key to continue.&lt;/p&gt;\nk\nhtml-keyboard-response\n0\n2.1.0\n4128\n\n\n1556\n&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;\ny\nhtml-keyboard-response\n1\n2.1.0\n5689\n\n\n411\n&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;\ny\nhtml-keyboard-response\n2\n2.1.0\n6101\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrt\nstimulus\nresponse\ntrial_type\ntrial_index\nplugin_version\ntime_elapsed\nview_history\n\n\n\n\n9689\nWelcome …\na\nhtml-keyboard-response\n0\n2.1.0\n9690\n\n\n\n3973\n\n\ninstructions\n1\n2.1.0\n14173\n[{\" page_index\":0, \"viewing_time\":1014} ... { \"page_index\":4, \"viewing_time\":1093 }]\n\n\nnull\n+\nnull\nhtml-keyboard-response\n2\n2.1.0\n14685\n\n\n\nnull\nSNOOZE\nnull\nhtml-keyboard-response\n3\n2.1.0\n15952\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n4\n2.1.0\n16954\n\n\n\nnull\nAWAKE\nnull\nhtml-keyboard-response\n5\n2.1.0\n18205\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n6\n2.1.0\n19206\n\n\n\nnull\nBLANKET\nnull\nhtml-keyboard-response\n7\n2.1.0\n20491\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n8\n2.1.0\n21491\n\n\n\nnull\nPEACE\nnull\nhtml-keyboard-response\n9\n2.1.0\n22743\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n10\n2.1.0\n23743\n\n\n\nnull\nSNORE\nnull\nhtml-keyboard-response\n11\n2.1.0\n24994\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n12\n2.1.0\n26012\n\n\n\nnull\nYAWN\nnull\nhtml-keyboard-response\n13\n2.1.0\n27262\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n14\n2.1.0\n28264\n\n\n\nnull\nSLUMBER\nnull\nhtml-keyboard-response\n15\n2.1.0\n29531\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n16\n2.1.0\n30532\n\n\n\nnull\nREST\nnull\nhtml-keyboard-response\n17\n2.1.0\n31783\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n18\n2.1.0\n32801\n\n\n\nnull\nTIRED\nnull\nhtml-keyboard-response\n19\n2.1.0\n34051\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n20\n2.1.0\n35053\n\n\n\nnull\nDROWSY\nnull\nhtml-keyboard-response\n21\n2.1.0\n36320\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n22\n2.1.0\n37321\n\n\n\nnull\nDREAM\nnull\nhtml-keyboard-response\n23\n2.1.0\n38571\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n24\n2.1.0\n39573\n\n\n\nnull\nWAKE\nnull\nhtml-keyboard-response\n25\n2.1.0\n40823\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n26\n2.1.0\n41824\n\n\n\nnull\nBED\nnull\nhtml-keyboard-response\n27\n2.1.0\n43075\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n28\n2.1.0\n44092\n\n\n\nnull\nNAP\nnull\nhtml-keyboard-response\n29\n2.1.0\n45344\n\n\n\nnull\n+\nnull\nhtml-keyboard-response\n30\n2.1.0\n46347\n\n\n\nnull\nDOZE\nnull\nhtml-keyboard-response\n31\n2.1.0\n47615\n\n\n\n2016\nSTETHOSCOPE\n0\nhtml-button-response\n32\n2.1.0\n50150\n\n\n\n407\nBLANKET\n1\nhtml-button-response\n33\n2.1.0\n51072\n\n\n\n313\nDROWSY\n0\nhtml-button-response\n34\n2.1.0\n51894\n\n\n\n302\nREST\n0\nhtml-button-response\n35\n2.1.0\n52700\n\n\n\n328\nHEALTH\n0\nhtml-button-response\n36\n2.1.0\n53546\n\n\n\n362\nSLUMBER\n1\nhtml-button-response\n37\n2.1.0\n54413\n\n\n\n250\nPATIENT\n0\nhtml-button-response\n38\n2.1.0\n55170\n\n\n\n388\nYAWN\n0\nhtml-button-response\n39\n2.1.0\n56072\n\n\n\n412\nDENTIST\n0\nhtml-button-response\n40\n2.1.0\n56997\n\n\n\n568\nILL\n0\nhtml-button-response\n41\n2.1.0\n58071\n\n\n\n962\nDREAM\n0\nhtml-button-response\n42\n2.1.0\n59535\n\n\n\n433\nSLEEP\n1\nhtml-button-response\n43\n2.1.0\n60474\n\n\n\n389\nMEDICINE\n1\nhtml-button-response\n44\n2.1.0\n61380\n\n\n\n426\nLAWYER\n1\nhtml-button-response\n45\n2.1.0\n62319\n\n\n\n449\nNAP\n0\nhtml-button-response\n46\n2.1.0\n63275\n\n\n\n444\nDOCTOR\n0\nhtml-button-response\n47\n2.1.0\n64221\n\n\n\n308\nCURE\n0\nhtml-button-response\n48\n2.1.0\n65034\n\n\n\n333\nPEACE\n0\nhtml-button-response\n49\n2.1.0\n65877\n\n\n\n1072\nOFFICE\n0\nhtml-button-response\n50\n2.1.0\n67451\n\n\n\n544\nTIRED\n1\nhtml-button-response\n51\n2.1.0\n68524\n\n\n\n359\nSICK\n1\nhtml-button-response\n52\n2.1.0\n69390\n\n\n\n417\nNURSE\n0\nhtml-button-response\n53\n2.1.0\n70313\n\n\n\n533\nAWAKE\n0\nhtml-button-response\n54\n2.1.0\n71347\n\n\n\n285\nSNOOZE\n1\nhtml-button-response\n55\n2.1.0\n72134\n\n\n\n241\nHOSPITAL\n0\nhtml-button-response\n56\n2.1.0\n72893\n\n\n\n476\nSURGEON\n1\nhtml-button-response\n57\n2.1.0\n73877\n\n\n\n252\nSNORE\n0\nhtml-button-response\n58\n2.1.0\n74636\n\n\n\n315\nBED\n0\nhtml-button-response\n59\n2.1.0\n75467\n\n\n\n409\nWAKE\n0\nhtml-button-response\n60\n2.1.0\n76379\n\n\n\n628\nPHYSICIAN\n0\nhtml-button-response\n61\n2.1.0\n77514\n\n\n\n614\nDOZE\n0\nhtml-button-response\n62\n2.1.0\n78635\n\n\n\n1271\nCLINIC\n1\nhtml-button-response\n63\n2.1.0\n80410",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Saving and Labeling Data</span>"
    ]
  },
  {
    "objectID": "14-data.html#saving-data",
    "href": "14-data.html#saving-data",
    "title": "14  Saving and Labeling Data",
    "section": "14.2 Saving Data",
    "text": "14.2 Saving Data\n\n14.2.1 Where Data Lives: Browser Memory vs. Permanent Storage\nA quick aside before discussing data labeling: It’s important to understand that when jsPsych collects this data, it’s initially stored only in the browser’s memory. This means the data exists only as long as the browser tab is open. If the participant closes the browser window or refreshes the page, all the data disappears forever.\nFor a real experiment, you need to transfer this data from the browser’s temporary memory to somewhere permanent. There are several options for permanent storage:\n\nSave to a server database (most common for online studies)\nSave to a file on a server (requires server setup)\nSave locally to the participant’s computer (good for testing and development)\n\nIn this chapter, we’ll focus on saving data locally, which is perfect for testing your experiments during development. Later in the book, we’ll cover how to set up server-based data storage for real data collection.\n\n\n14.2.2 Saving Data Locally\nFor development and testing purposes, jsPsych provides a convenient way to save data directly to your computer using the localSave() method. This downloads the data as a file that you can open in Excel or other data analysis programs.\nThe syntax to call this function looks like this:\njsPsych.data.get().localSave('csv', 'experiment_data.csv');\n\nThe jsPsych.data.get() part retrieves all of the data.\nThe .localSave('csv', 'experiment_data.csv') saves the data as a csv file, with the file name ‘experiment_data.csv’ (you can change that part to be whatever you want it to be).\n\nIn order to give participants the ability to download their own data, however, we need to incorporate this method into our experiment as a custom trial.\n\n\n14.2.3 Creating a Data Saving Trial\nTo save data, we need to create a special trial that gives participants a way to download their data. This requires some techniques we haven’t covered yet, so let’s break down each part:\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id='save-btn' style='padding: 10px 20px; font-size: 16px; cursor: pointer;'&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: 'NO_KEYS',\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById('save-btn').addEventListener('click', function() {\n      jsPsych.data.get().localSave('csv', 'experiment_data.csv');\n    });\n  }\n};\nLet’s understand what each part does:\n\n14.2.3.1 (1) The HTML Structure:\nstimulus: `\n  &lt;div style='text-align: center;'&gt;\n    &lt;p&gt;Experiment complete!&lt;/p&gt;\n    &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n    &lt;button id='save-btn' style='padding: 10px 20px; font-size: 16px; cursor: pointer;'&gt;\n      Click here to save the data locally\n    &lt;/button&gt;\n  &lt;/div&gt;\n  `\nWe create HTML that includes a clickable button. The button has an id='save-btn' so we can reference it later.\n\n\n14.2.3.2 (2) Disabling Keyboard Input\nchoices: 'NO_KEYS',\ntrial_duration: null,\nThis should be familiar:\n\n‘NO_KEYS’ means participants can’t press keys to continue\nnull duration means the trial stays active until we end it programmatically\nThis forces participants to use the button instead of keyboard shortcuts\n\nThis means that participants cannot click or press anything to make this screen change.\n\n\n14.2.3.3 (3) The Button Functionality:\non_load: function() {\n  document.getElementById('save-btn').addEventListener('click', function() {\n    jsPsych.data.get().localSave('csv', 'experiment_data.csv');\n  });\n}\nThis is where the magic happens. The on_load is a parameter that takes a function. This function will run when the trial first appears on the screen.\nThe rest of the code is common JavaScript that finds our button element in the HTML and tells the webpage what to do when someone clicks that button:\n\ndocument.getElementById('save-btn') finds our button in the HTML\naddEventListener('click', ...) tells the button what to do when clicked and ‘listens’ or waits for a click\njsPsych.data.get().localSave('csv', 'experiment_data.csv') downloads the data\n\nImportant: Don’t worry if you don’t fully understand (or remember) this code! Now that we’ve written this generic save trial once, we’ll be able to copy-paste it into our lab experiments and re-use it whenever we need it.\n\n\n\n14.2.4 Save Data Example\nLet’s see a full example of the local data saving. Take note that we need to add our saveData to the end of our timeline when we run our experiment.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Saving Data&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"jspsych/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n// 2. Define our trials\nconst welcome = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n             &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n    choices: \"ALL_KEYS\",\n    post_trial_gap: 1000\n}\n\nconst questions = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"question\"),\n            choices: ['y', 'n'],\n            post_trial_gap: 250\n        }\n    ],\n    timeline_variables: [\n        {question: `&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;`},\n        {question: `&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;`},\n    ]\n}\n\nconst saveData = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id='save-btn' style='padding: 10px 20px; font-size: 16px; cursor: pointer;'&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n    choices: 'NO_KEYS', // Disable keyboard responses\n    trial_duration: null, // Keep trial active indefinitely\n    on_load: function() {\n        document.getElementById('save-btn').addEventListener('click', function() {\n            // Save the data as a CSV file\n            jsPsych.data.get().localSave('csv', 'experiment_data.csv');\n        });\n    }\n};\n\njsPsych.run(\n    [\n        welcome,\n        questions,\n        saveData\n    ]\n);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nWe’ll use this pattern throughout the course for testing and development. Note that localSave() only works for local testing and development. For actual data collection with participants, you’ll need a more robust solution for storing data permanently on a server.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Saving and Labeling Data</span>"
    ]
  },
  {
    "objectID": "14-data.html#labeling-data",
    "href": "14-data.html#labeling-data",
    "title": "14  Saving and Labeling Data",
    "section": "14.3 Labeling Data",
    "text": "14.3 Labeling Data\nWhile jsPsych automatically saves basic information, notice what’s missing from our first data table above. Looking at the data, we can see that trial 1 showed a question about chocolate and the participant pressed ‘y’, while trial 2 asked about vanilla and they pressed ‘n’. However, we have no idea what these questions were actually asking (we have to read the full HTML stimulus), what each response means, or how to categorize these trials for analysis.\nThis is where data labeling becomes important. We need to add meaningful information to each trial so that our data tells the complete story of what happened during the experiment.\n\n14.3.1 Adding Context with the data Parameter\nThe data parameter is always available and allows us to add custom information to any trial. Whenever we add a data parameter, jsPsych creates a new column with that name and adds that label when it’s present. The data parameter takes an object with key-value pairs. Each key-value pair indicates the column label (key) and the value that should be included in that column, on that row (value).\nLet’s look at the first example from above and try to improve our data by adding some context:\nconst question1 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n  choices: ['y', 'n'],\n  data: {\n    question_type: 'preference',\n    food_item: 'chocolate'\n  }\n};\n\nconst question2 = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: '&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n  choices: ['y', 'n'],\n  data: {\n    question_type: 'preference',\n    food_item: 'vanilla'\n  }\n};\nNow our CSV output becomes much more informative:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntrial_type\ntrial_index\ntime_elapsed\nrt\nstimulus\nresponse\nquestion_type\nfood_item\n\n\n\n\nhtml-keyboard-response\n0\n1247\n1247\n&lt;p&gt;Welcome...&lt;/p&gt;\n” ”\n\n\n\n\nhtml-keyboard-response\n1\n3891\n2644\n&lt;p&gt;Do you like chocolate?&lt;/p&gt;...\ny\npreference\nchocolate\n\n\nhtml-keyboard-response\n2\n6234\n2343\n&lt;p&gt;Do you like vanilla?&lt;/p&gt;...\nn\npreference\nvanilla\n\n\n\n\nNotice how our custom data (question_type and food_item) appears as new columns in the CSV. The welcome trial has empty cells for these columns because we didn’t add this data to that trial. Now, in your analysis software you could filter it by indicating that you only want to see rows where question_type is equal to \"preference\". That would filter out the instructions and leave you with just the analysis-relevant questions.\nI could also use the food_item column to determine which question was asked on each row without having to figure it out from the stimulus HTML; Much better!\n\n\n14.3.2 Adding Data to Timelines\nOne of the powerful features of jsPsych’s data system is that you can add data labels to entire timelines. When you add data to a timeline, that information is automatically included in every trial within that timeline. This creates a hierarchical data system where information can be applied at different levels.\nConsider this example where we’re organizing our questions into blocks:\nconst preference_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: '&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n      choices: ['y', 'n']\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: '&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n      choices: ['y', 'n']\n    }\n  ],\n  data: {\n    block_type: 'preferences',\n    category: 'food'\n  }\n}\nIn this example, both trials will automatically include block_type: 'preferences' and category: 'food' in their data. This saves you from having to add the same information to each individual trial.\nYou can combine timeline-level and trial-level data. The trial-level data will be added to the timeline-level data:\nconst preference_block = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: '&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n      choices: ['y', 'n'],\n      data: { food_item: 'chocolate' }\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: '&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n      choices: ['y', 'n'],\n      data: { food_item: 'vanilla' }\n    }\n  ],\n  data: {\n    block_type: 'preferences',\n    category: 'food'\n  }\n}\nEach trial will now have both the timeline data (block_type and category) and its specific trial data (food_item). This hierarchical approach lets you organize your data labels efficiently, applying broad categories at the timeline level and specific details at the trial level.\n\n\n14.3.3 Dynamic Data with Timeline Variables\nWhen you’re using timeline variables to create multiple similar trials, you can use jsPsych.timelineVariable() to dynamically pull data labels from your timeline variables. This is extremely powerful for creating well-labeled data without repetition.\nHere’s an example using timeline variables for our food preference questions. Take note of how I include relevant data labels in the timeline_variables and reference them in my data object after.\n// Create the timeline\nconst preference_block = {\n  timeline: [\n      {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('question'),\n      choices: ['y', 'n'],\n      data: {\n        food_item: jsPsych.timelineVariable('food_item'),\n        food_category: jsPsych.timelineVariable('food_category'),\n        expected_popularity: jsPsych.timelineVariable('expected_popularity'),\n        question_type: 'preference'\n      }\n  }],\n  timeline_variables: [\n      {\n        question: '&lt;p&gt;Do you like chocolate?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n        food_item: 'chocolate',\n        food_category: 'sweet',\n        expected_popularity: 'high'\n      },\n      {\n        question: '&lt;p&gt;Do you like vanilla?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n        food_item: 'vanilla',\n        food_category: 'sweet',\n        expected_popularity: 'medium'\n      },\n      {\n        question: '&lt;p&gt;Do you like broccoli?&lt;/p&gt;&lt;p&gt;Press Y for yes, N for no.&lt;/p&gt;',\n        food_item: 'broccoli',\n        food_category: 'vegetable',\n        expected_popularity: 'low'\n      }\n  ],\n  randomize_order: true,\n  data: {\n    block_type: 'food_preferences',\n    block_number: 1\n  }\n};\nThis approach automatically pulls the appropriate data labels for each trial from the timeline variables. Each trial will have:\n\nTimeline-level data:block_type: 'food_preferences' and block_number: 1\nStatic trial data: question_type: 'preference'\nDynamic trial data: food_item, food_category, and expected_popularity that change based on the timeline variable for that specific trial\n\nThe resulting data will look like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntrial_type\ntrial_index\nstimulus\nresponse\nblock_type\nblock_number\nquestion_type\nfood_item\nfood_category\nexpected_popularity\n\n\n\n\nhtml-keyboard-response\n0\n&lt;p&gt;Do you like chocolate?&lt;/p&gt;...\ny\nfood_preferences\n1\npreference\nchocolate\nsweet\nhigh\n\n\nhtml-keyboard-response\n1\n&lt;p&gt;Do you like broccoli?&lt;/p&gt;...\nn\nfood_preferences\n1\npreference\nbroccoli\nvegetable\nlow\n\n\nhtml-keyboard-response\n2\n&lt;p&gt;Do you like vanilla?&lt;/p&gt;...\ny\nfood_preferences\n1\npreference\nvanilla\nsweet\nmedium\n\n\n\n\n\n\n14.3.4 Saving Trial Parameters\n\n\n14.3.5 Adding Global Properties to All Trials\nOne of the most common uses of the data module is adding information that applies to every trial in your experiment. The jsPsych.data.addProperties() function lets you add properties to all trials, both past and future ones.\nThis function takes an object as input, with each key-value pair indicating a new column and value to add to every row.\n// Add these properties to every trial in the experiment\njsPsych.data.addProperties({\n  subject_id: \"001\",\n  condition: \"control\",\n  experiment_version: \"2.1\",\n  session_date: new Date().toISOString().split('T')[0] // YYYY-MM-DD format\n});\nThis is useful because it’s (1) retroactive: Even trials that already happened get these properties and (2) it’s persistent: All future trials automatically include these properties\nHere are some common properties that you might want to add to all trials:\njsPsych.data.addProperties({\n    // Participant identification\n    subject_id: jsPsych.randomization.randomID(8),\n\n    // Experimental design\n    condition: \"experimental\", // or randomly assigned\n    experiment_version: \"1.0\",\n    researcher: \"Dr. Smith\",\n\n    // Session information\n    session_date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n    start_time:  new Date().toISOString().split('T')[1],\n    browser: navigator.userAgent,\n    screen_width: screen.width,\n    screen_height: screen.height\n});\n\n\n14.3.6 Data Labels: Full Example\nNow let’s return to our memory experiment and apply the concepts we’ve just learned to apply proper data labels.\nFor this example, I’ve added (1) global data properties that get added to every row, (2) trial- and timeline-level data labels, and (3) added the save data trial to the end of the experiment.\nYou can try running this in the example below and you can save the resulting data to your computer.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Saving Data&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"jspsych/style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\n// 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\njsPsych.data.addProperties({\n    // Participant identification\n    subject_id: jsPsych.randomization.randomID(8),\n\n    // Experimental design\n    condition: \"experimental\", // or randomly assigned\n    experiment_version: \"1.0\",\n    researcher: \"Dr. Smith\",\n\n    // Session information\n    session_date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n    start_time:  new Date().toISOString().split('T')[1],\n    browser: navigator.userAgent,\n    screen_width: screen.width,\n    screen_height: screen.height\n});\n\n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 500,\n  data: {\n    phase: \"welcome\",\n    trial_type: \"instruction\"\n  }\n}\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    // Page 1: Welcome and Overview\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;You will participate in a memory experiment with two phases:&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 1:&lt;/strong&gt; Study a list of words&lt;/p&gt;\n     &lt;p&gt;&lt;strong&gt;Phase 2:&lt;/strong&gt; Decide if words are OLD or NEW&lt;/p&gt;\n     &lt;p&gt;Click Next to continue.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 2: Study Phase Instructions  \n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;During the study phase, you will see words appear one at a time. Read each word carefully and try to remember it.&lt;/p&gt;\n     &lt;p&gt;Each word appears for 1 second. You will study about 15 words total.&lt;/p&gt;\n     &lt;p&gt;You do not need to press any keys during this phase.&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 3: Test Phase Instructions\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;During the test phase, you will see words one at a time. Some words are OLD (from the study list). Some words are NEW (not from the study list).&lt;/p&gt;\n     &lt;p&gt;Press the 'OLD' button if the word was old.&lt;/p&gt;\n     &lt;p&gt;Press the 'NEW' button if the word was new&lt;/p&gt;\n     &lt;/div&gt;`,\n\n    // Page 4: Stay focused\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;Trust your first instinct.&lt;/p&gt;\n      &lt;p&gt;If unsure, make your best guess.&lt;/p&gt;\n    &lt;/div&gt;`,\n\n    // Page 5: Final Instructions\n    `&lt;div class='instructionStyle'&gt;\n      &lt;p&gt;Try to stay focused throughout the experiment. The experiment only takes a few minutes.&lt;/p&gt;\n      &lt;p&gt;Click Next to start the study phase.&lt;/p&gt;\n     &lt;/div&gt;`\n  ],\n  key_forward: 'ArrowRight',\n  key_backward: 'ArrowLeft',\n  allow_backward: true,\n  show_clickable_nav: true,\n  button_label_previous: 'Back',\n  button_label_next: 'Next',\n  data: {\n    phase: \"instructions\",\n    trial_type: \"instruction\"\n  }\n};\n\nlet study = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"+\",\n      choices: \"NO_KEYS\",\n      post_trial_gap: 250,\n      trial_duration: 500,\n      css_classes: \"wordStyle\",\n      data: {\n        phase: \"study\",\n        trial_type: \"fixation\"\n      }\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: \"NO_KEYS\",\n      post_trial_gap: 500,\n      trial_duration: 1000,\n      css_classes: \"wordStyle\",\n      data: {\n        phase: \"study\",\n        trial_type: \"word_presentation\",\n        word: jsPsych.timelineVariable(\"word\"),\n        word_type: \"study_item\"\n      }\n    }\n  ],\n  timeline_variables: [\n        {word: \"BED\"},\n        {word: \"REST\"},\n        {word: \"AWAKE\"},\n        {word: \"TIRED\"},\n        {word: \"DREAM\"},\n        {word: \"WAKE\"},\n        {word: \"SNOOZE\"},\n        {word: \"BLANKET\"},\n        {word: \"DOZE\"},\n        {word: \"SLUMBER\"},\n        {word: \"SNORE\"},\n        {word: \"NAP\"},\n        {word: \"PEACE\"},\n        {word: \"YAWN\"},\n        {word: \"DROWSY\"}\n  ],\n  randomize_order: true\n}\n\nlet test = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      post_trial_gap: 500,\n      choices: [\"OLD\", \"NEW\"],\n      css_classes: \"wordStyle\",\n      data: {\n        phase: \"test\",\n        trial_type: \"recognition_test\",\n        word: jsPsych.timelineVariable(\"word\"),\n        word_type: jsPsych.timelineVariable(\"word_type\"),\n        correct_response: jsPsych.timelineVariable(\"correct_response\")\n      }\n    }\n  ],\n  timeline_variables: [\n         // OLD WORDS (should respond \"OLD\")\n        {word: \"BED\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"REST\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"AWAKE\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"TIRED\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"DREAM\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"WAKE\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"SNOOZE\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"BLANKET\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"DOZE\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"SLUMBER\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"SNORE\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"NAP\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"PEACE\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"YAWN\", word_type: \"old\", correct_response: \"OLD\"},\n        {word: \"DROWSY\", word_type: \"old\", correct_response: \"OLD\"},\n        // NEW WORDS (should respond \"NEW\")\n        {word: \"DOCTOR\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"NURSE\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"SICK\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"LAWYER\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"MEDICINE\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"HEALTH\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"HOSPITAL\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"DENTIST\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"PHYSICIAN\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"ILL\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"PATIENT\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"OFFICE\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"STETHOSCOPE\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"SURGEON\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"CLINIC\", word_type: \"new\", correct_response: \"NEW\"},\n        {word: \"CURE\", word_type: \"new\", correct_response: \"NEW\"},\n        // CRITICAL LURE (never studied, but related to study words)\n        {word: \"SLEEP\", word_type: \"critical_lure\", correct_response: \"NEW\"}\n  ],\n  randomize_order: true\n}\n\nconst saveData = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n    &lt;div style='text-align: center;'&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id='save-btn' style='padding: 10px 20px; font-size: 16px; cursor: pointer;'&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n    choices: 'NO_KEYS', // Disable keyboard responses\n    trial_duration: null, // Keep trial active indefinitely\n    on_load: function() {\n        document.getElementById('save-btn').addEventListener('click', function() {\n            // Save the data as a CSV file\n            jsPsych.data.get().localSave('csv', 'recognition_data.csv');\n        });\n    }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  instructions,\n  study,\n  test,\n  saveData\n]);\n\n\n\n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nNow, let’s look at the data that would result from this new labeling:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nphase\ntrial_type\nrt\nstimulus\nresponse\ntrial_index\nplugin_version\ntime_elapsed\nsubject_id\ncondition\nexperiment_version\nresearcher\nsession_date\nstart_time\nbrowser\nscreen_width\nscreen_height\nview_history\nword\nword_type\ncorrect_response\n\n\n\n\nwelcome\nhtml-keyboard-response\n2257\nWelcome to the Experiment! Press any key to begin.\nf\n0\n2.1.0\n2258\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\ninstructions\ninstructions\n3088\n\n\n1\n2.1.0\n5851\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n[{“page_index”: 0,“viewing_time”: 1297} … {“page_index”: 4,“viewing_time”:384 }]\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n2\n2.1.0\n6356\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nWAKE\nnull\n3\n2.1.0\n7621\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nWAKE\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n4\n2.1.0\n8692\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nDROWSY\nnull\n5\n2.1.0\n9963\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDROWSY\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n6\n2.1.0\n11012\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nSLUMBER\nnull\n7\n2.1.0\n12269\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSLUMBER\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n8\n2.1.0\n13286\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nDREAM\nnull\n9\n2.1.0\n14651\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDREAM\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n10\n2.1.0\n15691\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nBLANKET\nnull\n11\n2.1.0\n16977\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nBLANKET\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n12\n2.1.0\n18010\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nTIRED\nnull\n13\n2.1.0\n19285\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nTIRED\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n14\n2.1.0\n110847\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nYAWN\nnull\n15\n2.1.0\n112112\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nYAWN\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n16\n2.1.0\n113136\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nBED\nnull\n17\n2.1.0\n114391\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nBED\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n18\n2.1.0\n115456\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nDOZE\nnull\n19\n2.1.0\n116821\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDOZE\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n20\n2.1.0\n117823\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nAWAKE\nnull\n21\n2.1.0\n119200\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nAWAKE\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n22\n2.1.0\n120220\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nNAP\nnull\n23\n2.1.0\n121481\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nNAP\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n24\n2.1.0\n122498\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nSNORE\nnull\n25\n2.1.0\n123824\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSNORE\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n26\n2.1.0\n124842\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nSNOOZE\nnull\n27\n2.1.0\n126112\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSNOOZE\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n28\n2.1.0\n127132\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nPEACE\nnull\n29\n2.1.0\n128385\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nPEACE\nstudy_item\n\n\n\nstudy\nhtml-keyboard-response\nnull\n+\nnull\n30\n2.1.0\n129418\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\n\n\n\n\n\nstudy\nhtml-keyboard-response\nnull\nREST\nnull\n31\n2.1.0\n130701\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nREST\nstudy_item\n\n\n\ntest\nhtml-button-response\n3542\nHEALTH\n0\n32\n2.1.0\n134745\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nHEALTH\nnew\nNEW\n\n\ntest\nhtml-button-response\n611\nBED\n1\n33\n2.1.0\n135857\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nBED\nold\nOLD\n\n\ntest\nhtml-button-response\n289\nTIRED\n0\n34\n2.1.0\n136658\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nTIRED\nold\nOLD\n\n\ntest\nhtml-button-response\n279\nREST\n0\n35\n2.1.0\n137459\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nREST\nold\nOLD\n\n\ntest\nhtml-button-response\n763\nHOSPITAL\n1\n36\n2.1.0\n138731\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nHOSPITAL\nnew\nNEW\n\n\ntest\nhtml-button-response\n366\nDOZE\n0\n37\n2.1.0\n139620\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDOZE\nold\nOLD\n\n\ntest\nhtml-button-response\n455\nSURGEON\n0\n38\n2.1.0\n140587\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSURGEON\nnew\nNEW\n\n\ntest\nhtml-button-response\n326\nSNORE\n0\n39\n2.1.0\n141428\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSNORE\nold\nOLD\n\n\ntest\nhtml-button-response\n386\nCURE\n1\n40\n2.1.0\n142322\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nCURE\nnew\nNEW\n\n\ntest\nhtml-button-response\n361\nAWAKE\n0\n41\n2.1.0\n143198\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nAWAKE\nold\nOLD\n\n\ntest\nhtml-button-response\n431\nDROWSY\n0\n42\n2.1.0\n144140\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDROWSY\nold\nOLD\n\n\ntest\nhtml-button-response\n646\nSICK\n0\n43\n2.1.0\n145288\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSICK\nnew\nNEW\n\n\ntest\nhtml-button-response\n531\nOFFICE\n0\n44\n2.1.0\n146344\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nOFFICE\nnew\nNEW\n\n\ntest\nhtml-button-response\n385\nPATIENT\n0\n45\n2.1.0\n147269\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nPATIENT\nnew\nNEW\n\n\ntest\nhtml-button-response\n363\nDOCTOR\n0\n46\n2.1.0\n148150\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDOCTOR\nnew\nNEW\n\n\ntest\nhtml-button-response\n363\nLAWYER\n0\n47\n2.1.0\n149049\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nLAWYER\nnew\nNEW\n\n\ntest\nhtml-button-response\n505\nILL\n1\n48\n2.1.0\n150077\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nILL\nnew\nNEW\n\n\ntest\nhtml-button-response\n369\nBLANKET\n1\n49\n2.1.0\n150959\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nBLANKET\nold\nOLD\n\n\ntest\nhtml-button-response\n316\nYAWN\n1\n50\n2.1.0\n151792\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nYAWN\nold\nOLD\n\n\ntest\nhtml-button-response\n563\nPEACE\n0\n51\n2.1.0\n152871\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nPEACE\nold\nOLD\n\n\ntest\nhtml-button-response\n434\nCLINIC\n0\n52\n2.1.0\n153813\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nCLINIC\nnew\nNEW\n\n\ntest\nhtml-button-response\n387\nSLEEP\n0\n53\n2.1.0\n154751\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSLEEP\ncritical_lure\nNEW\n\n\ntest\nhtml-button-response\n469\nSLUMBER\n0\n54\n2.1.0\n155731\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSLUMBER\nold\nOLD\n\n\ntest\nhtml-button-response\n470\nNURSE\n0\n55\n2.1.0\n156717\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nNURSE\nnew\nNEW\n\n\ntest\nhtml-button-response\n368\nSNOOZE\n0\n56\n2.1.0\n157603\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSNOOZE\nold\nOLD\n\n\ntest\nhtml-button-response\n351\nDREAM\n1\n57\n2.1.0\n158471\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDREAM\nold\nOLD\n\n\ntest\nhtml-button-response\n400\nNAP\n1\n58\n2.1.0\n159391\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nNAP\nold\nOLD\n\n\ntest\nhtml-button-response\n767\nPHYSICIAN\n0\n59\n2.1.0\n160663\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nPHYSICIAN\nnew\nNEW\n\n\ntest\nhtml-button-response\n526\nWAKE\n0\n60\n2.1.0\n161700\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nWAKE\nold\nOLD\n\n\ntest\nhtml-button-response\n615\nMEDICINE\n0\n61\n2.1.0\n162844\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nMEDICINE\nnew\nNEW\n\n\ntest\nhtml-button-response\n697\nSTETHOSCOPE\n0\n62\n2.1.0\n164044\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nSTETHOSCOPE\nnew\nNEW\n\n\ntest\nhtml-button-response\n1572\nDENTIST\n0\n63\n2.1.0\n166119\nm8kx3pqw\nexperimental\n1.0\nDr. Smith\n2025-09-14\n13:56:07.382Z\nMozilla/5.0 (Windows NT 10.0; Win64; x64; rv:142.0) Gecko/20100101 Firefox/142.0\n1760\n1100\n\nDENTIST\nnew\nNEW\n\n\n\n\nWhat we’ve improved:\nConsistent phase labeling: Every trial now has a phase field (welcome, instructions, study, test)\nTrial type classification: Each trial has a trial_type field describing what kind of trial it is (fixation, word_presentation, recognition_test, etc.)\nStimulus tracking: Test trials include the actual word being presented and its word_type (old, new, critical_lure)\nResponse accuracy: Each test trial includes the correct_response, making it easy to calculate accuracy later\nCritical lure identification: The word \"SLEEP\" is specifically labeled as a critical_lure. This is the key manipulation in DRM experiments, as it’s semantically related to the study words but was never actually presented.\nWith these labels, analyzing your data becomes straightforward. You can easily filter trials by phase, calculate accuracy rates for different word types, and examine false alarm rates for critical lures.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Saving and Labeling Data</span>"
    ]
  },
  {
    "objectID": "14-data.html#basic-data-updates-with-on_finish",
    "href": "14-data.html#basic-data-updates-with-on_finish",
    "title": "14  Saving and Labeling Data",
    "section": "14.4 Basic Data Updates with on_finish",
    "text": "14.4 Basic Data Updates with on_finish\nOften you’ll want to add computed information to your data after a trial completes (e.g., determine whether the response was accurate). The on_finish callback function is perfect for this. It receives the trial’s data as a parameter and allows you to modify or add to it.\nWhen the on_finish function runs, it receives a data parameter that contains all the information collected during that specific trial. This includes:\nAutomatic jsPsych properties:\n\ntrial_type: The plugin that was used (e.g., “html-keyboard-response”)\ntrial_index: The position of this trial in the experiment (starts at 0)\ntime_elapsed: Total time since the experiment started (in milliseconds)\nrt: Response time for this trial (in milliseconds)\nresponse: The participant’s response (key pressed, button clicked, etc.)\n\nProperties from your trial definition:\n\nAny properties you added in the data object of your trial\nTimeline variables that were active for this trial\n\nProperties from addProperties():\n\nAny global properties you added (like subject_id, condition, etc.)\n\nFirst, here’s an example to show the proper syntax of adding the on_finish parameter:\nconst recognition_trial = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['f', 'j'],\n      data: {\n        task: \"recognition_test\",\n        word: jsPsych.timelineVariable(\"word\"),\n        word_type: jsPsych.timelineVariable(\"word_type\"),\n        correct_response: jsPsych.timelineVariable(\"correct_response\")\n      },\n      on_finish: function(data) {\n          // on_finish code goes inside here\n      }\n    }\n  ],\n  timeline_variables: [\n    { word: \"DOCTOR\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"PLANET\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"GARDEN\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"WINDOW\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"BRIDGE\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"FOREST\", word_type: \"new\", correct_response: \"j\" }\n  ]\n};\nNotice that we add it just like the other parameters on_finish:. However, it’s value is a function: function(data){ }. We add the data in the parentheses because this is how we add inputs to our functions and we want the data from that trial to be available inside the function.\nUsing that function, we can access any of trial properties by using standard object notation like data.rt or data[\"rt\"]. Here’s an example showing what’s available by accessing them inside the function and printing them in the JavaScript console:\nconst recognition_trial = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['f', 'j'],\n      data: {\n        task: \"recognition_test\",\n        word: jsPsych.timelineVariable(\"word\"),\n        word_type: jsPsych.timelineVariable(\"word_type\"),\n        correct_response: jsPsych.timelineVariable(\"correct_response\")\n      },\n      on_finish: function(data) {\n          // At this point, 'data' contains:\n          console.log(\"Trial type:\", data.trial_type);           // \"html-keyboard-response\"\n          console.log(\"Trial index:\", data.trial_index);         // e.g., 15\n          console.log(\"Time elapsed:\", data.time_elapsed);       // e.g., 45230\n          console.log(\"Response time:\", data.rt);                // e.g., 1205\n          console.log(\"Key pressed:\", data.response);            // \"f\" or \"j\"\n          console.log(\"Task:\", data.task);                       // \"recognition_test\"\n          console.log(\"Word shown:\", data.word);                 // e.g., \"DOCTOR\"\n          console.log(\"Word type:\", data.word_type);             // e.g., \"new\"\n          console.log(\"Correct response:\", data.correct_response); // e.g., \"j\"\n          console.log(\"Subject ID:\", data.subject_id);           // from addProperties()\n      \n          // At this point, we're just examining the data, not changing it yet\n          // This code would just print the data values in the console\n      }\n    }\n  ],\n  timeline_variables: [\n    { word: \"DOCTOR\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"PLANET\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"GARDEN\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"WINDOW\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"BRIDGE\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"FOREST\", word_type: \"new\", correct_response: \"j\" }\n  ]\n};\nHowever, we typically don’t just want to access the data, we want to do something with in. The on_finish function is your opportunity to add new properties or modify existing ones based on what happened during the trial. This is commonly used to assess accuracy and categorize performance.\n\n14.4.1 Checking Accuracy\nLet’s look at an example of how we can determine whether the participant provided the correct response at the end of the trial. This is probably the most common use-case for modifying the data at the end of the trial:\nconst recognition_trial = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['f', 'j'],\n      data: {\n        task: \"recognition_test\",\n        word: jsPsych.timelineVariable(\"word\"),\n        word_type: jsPsych.timelineVariable(\"word_type\"),\n        correct_response: jsPsych.timelineVariable(\"correct_response\")\n      },\n      on_finish: function(data) {\n        // Use compareKeys() to properly compare key responses\n        if (jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)) {\n          data.correct = true;\n        } else {\n          data.correct = false;\n        }\n    \n        // Or more concisely:\n        // data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n      }\n    }\n  ],\n  timeline_variables: [\n    { word: \"DOCTOR\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"PLANET\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"GARDEN\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"WINDOW\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"BRIDGE\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"FOREST\", word_type: \"new\", correct_response: \"j\" }\n  ]\n};\nIn this code, I check whether data.response is equal to data.correct_response. If it is true, then I update data.correct to be true. If data.response is NOT equal to data.correct_response, then I set it to false. This will update my data file that is saved at the end with a new column called correct with true/false values.\nHere is an example of the data output. Take note of the new columns that were added, including task, word, etc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrt\nstimulus\nresponse\ntrial_type\ntrial_index\nplugin_version\ntime_elapsed\nsubject_id\nexperiment_version\ntask\nword\nword_type\ncorrect_response\ncorrect\n\n\n\n\n2121\n”\nf\nhtml-keyboard-response\n0\n2.1.0\n2121\nq4jr9zbl\n1\n\n\n\n\n\n\n\n879\nDOCTOR\nf\nhtml-keyboard-response\n1\n2.1.0\n3002\nq4jr9zbl\n1\nrecognition_test\nDOCTOR\nold\nf\nTRUE\n\n\n3264\nPLANET\nj\nhtml-keyboard-response\n2\n2.1.0\n6266\nq4jr9zbl\n1\nrecognition_test\nPLANET\nnew\nj\nTRUE\n\n\n767\nGARDEN\nf\nhtml-keyboard-response\n3\n2.1.0\n7033\nq4jr9zbl\n1\nrecognition_test\nGARDEN\nold\nf\nTRUE\n\n\n808\nWINDOW\nj\nhtml-keyboard-response\n4\n2.1.0\n7842\nq4jr9zbl\n1\nrecognition_test\nWINDOW\nnew\nj\nTRUE\n\n\n\n\nDifferent plugins represent responses in different ways, so you’ll need to adjust your accuracy checking accordingly. When using the keyboard response plugin, we need to compare the key the participant pressed against the correct key. It’s important to use jsPsych’s built-in compareKeys() function rather than simple equality checks. This function handles case sensitivity and different key representations properly. For example, if the participant had caps lock on and the correct response was set to \"e\", then \"e\" === \"E\" would be false. We want that comparison to be true regardless of case, so we use the built-in function to handle the comparison correctly.\nHere’s an example using the button response plugin, which represents button responses numerically (0 for the first button, 1 for the second, etc.):\nconst recognition_trial = {\n  timeline: [\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['OLD', 'NEW'],\n      data: {\n        task: \"recognition_test\",\n        word: jsPsych.timelineVariable(\"word\"),\n        word_type: jsPsych.timelineVariable(\"word_type\"),\n        correct_response: jsPsych.timelineVariable(\"correct_response\") // This should be 0 or 1 (0 == 'OLD' and 1 == 'NEW')\n      },\n      on_finish: function(data) {\n        // For button responses, we compare numbers directly\n        if (data.response === data.correct_response) {\n          data.correct = true;\n        } else {\n          data.correct = false;\n        }\n    \n        // Or more concisely:\n        // data.correct = data.response === data.correct_response;\n      }\n    }\n  ],\n  timeline_variables: [\n    { word: \"DOCTOR\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"PLANET\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"GARDEN\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"WINDOW\", word_type: \"new\", correct_response: \"j\" },\n    { word: \"BRIDGE\", word_type: \"old\", correct_response: \"f\" },\n    { word: \"FOREST\", word_type: \"new\", correct_response: \"j\" }\n  ]\n};\nImportant Note: Always check the “Data Generated” section of each plugin’s documentation to understand how responses are represented. For keyboard plugins, responses are typically strings (the key pressed), while button plugins use numeric indices (0, 1, 2, etc.).\n\n\n14.4.2 Categorizing Response Times:\nTo provide another example of modifying the data at the end of the trial, let’s look at how you can add categories and computed measures based on performance. This could be useful for adding feedback after the trial, something we’ll return to in the following chapters. It’s important to understand that on_finish is an arbitrary function, which means we can add whatever code we want here and it will be executed after the trials.\nIn this example, I will (1) check accuracy, (2) check the response time and categorize it based on speed, and (3) use BOTH response time and accuracy to categorize their performance.\nconst stroop_trial = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"stimulus\"),\n      choices: ['r', 'g', 'b'],\n      data: {\n        task: \"stroop\",\n        condition: jsPsych.timelineVariable(\"condition\"),\n        correct_key: jsPsych.timelineVariable(\"correct_key\")\n      },\n      on_finish: function(data) {\n        // Determine accuracy using compareKeys\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_key);\n    \n        // Categorize response time\n        if (data.rt &lt; 300) {\n          data.rt_category = \"fast\";\n        } else if (data.rt &lt; 800) {\n          data.rt_category = \"normal\";\n        } else {\n          data.rt_category = \"slow\";\n        }\n    \n        // Add performance score combining accuracy and speed\n        if (data.correct && data.rt &lt; 600) {\n          data.performance = \"excellent\";\n        } else if (data.correct) {\n          data.performance = \"good\";\n        } else {\n          data.performance = \"needs_improvement\";\n        }\n      }\n    }  \n  ],\n  timeline_variables: [\n    {stimulus: `&lt;span style='color: red;'&gt;RED&lt;/span&gt;`, condition: \"congruent\", correct_key: \"r\"},\n    {stimulus: `&lt;span style='color: blue;'&gt;RED&lt;/span&gt;`, condition: \"incongruent\", correct_key: \"b\"},\n    {stimulus: `&lt;span style='color: green;'&gt;GREEN&lt;/span&gt;&gt;`, condition: \"incongruent\", correct_key: \"g\"},\n    {stimulus: `&lt;span style='color: red;'&gt;BLUE&lt;/span&gt;`, condition: \"incongruent\", correct_key: \"r\"},\n    {stimulus: `&lt;span style='color: blue;'&gt;BLUE&lt;/span&gt;`, condition: \"congruent\", correct_key: \"b\"},\n    {stimulus: `&lt;span style='color: green;'&gt;RED&lt;/span&gt;`, condition: \"incongruent\", correct_key: \"g\"},\n  ]\n};\nAgain, we are updating the data that is being saved. So, our data output will now include new columns for our categories and values if one is provided:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrt\nstimulus\nresponse\ntrial_type\ntrial_index\nplugin_version\ntime_elapsed\nsubject_id\nexperiment_version\ntask\ncondition\ncorrect_key\ncorrect\nrt_category\nperformance\n\n\n\n\n542\nRED\nr\nhtml-keyboard-response\n0\n2.1.0\n542\nm8kx3pqw\n1\nstroop\ncongruent\nr\nTRUE\nnormal\nexcellent\n\n\n1205\nRED\nb\nhtml-keyboard-response\n1\n2.1.0\n1747\nm8kx3pqw\n1\nstroop\nincongruent\nr\nFALSE\nslow\nneeds_improvement\n\n\n287\nGREEN\ng\nhtml-keyboard-response\n2\n2.1.0\n2034\nm8kx3pqw\n1\nstroop\ncongruent\ng\nTRUE\nfast\nexcellent\n\n\n934\nBLUE\nr\nhtml-keyboard-response\n3\n2.1.0\n2968\nm8kx3pqw\n1\nstroop\nincongruent\nb\nFALSE\nslow\nneeds_improvement\n\n\n678\nBLUE\nb\nhtml-keyboard-response\n4\n2.1.0\n3646\nm8kx3pqw\n1\nstroop\ncongruent\nb\nTRUE\nnormal\ngood\n\n\n445\nRED\ng\nhtml-keyboard-response\n5\n2.1.0\n4091\nm8kx3pqw\n1\nstroop\nincongruent\nr\nFALSE\nnormal\nneeds_improvement\n\n\n\n\nSome final points about on_finish:\n\nTiming: on_finish runs immediately after the participant responds, before the next trial begins\nPersistence: Any properties you add or modify in on_finish become part of the permanent data record for that trial\nFlexibility: You can add as many new properties as you want, and they’ll all appear in your final dataset\n\nThe on_finish function is your opportunity to enrich your data with computed information that will be valuable during analysis. By adding accuracy scores, performance categories, and other derived measures, you make your data much more useful for statistical analysis.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Saving and Labeling Data</span>"
    ]
  },
  {
    "objectID": "14-data.html#final-thoughts-on-data-labeling",
    "href": "14-data.html#final-thoughts-on-data-labeling",
    "title": "14  Saving and Labeling Data",
    "section": "14.5 Final Thoughts on Data Labeling",
    "text": "14.5 Final Thoughts on Data Labeling\nData labeling is one of the most important skills in experimental programming because it determines whether your results will be analyzable and meaningful. Throughout this chapter, you’ve learned multiple techniques for adding context to your data including simple trial labels and global properties that track participants and experimental conditions. The key insight is to think about your data analysis needs before you start collecting data. What variables will you need to group trials? What information will help you identify different experimental conditions? By planning your data labels carefully and testing them with local saves, you’ll avoid the frustration of collecting unusable data and ensure your experiments produce clean, analysis-ready datasets from the start.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Saving and Labeling Data</span>"
    ]
  },
  {
    "objectID": "15-data-2.html",
    "href": "15-data-2.html",
    "title": "15  Accessing and Summarizing Data",
    "section": "",
    "text": "15.1 What is jsPsych.data.get()?\nNow that you understand how to work with individual trial data in the on_finish function, let’s explore how to access and analyze all the data collected throughout your experiment. The jsPsych.data.get() function provides live access to your data, as it’s being collected. In fact, at any moment during your experiment, you could open up the JavaScript console, type jsPsych.data.get() and press Enter, and it would print out the data that had been collected up until that moment. If you complete another trial, and run that function again, you’d get the updated data with everything, including the newest trial. If you’re curious, go to one of the previous lab assignments and try it out!\nThe jsPsych.data.get() function returns a DataCollection object containing all the data collected so far in your experiment. Think of it as taking a snapshot of everything that has happened up to that point.\nWhen you call jsPsych.data.get(), you get back a DataCollection that contains an array of trial objects. Each trial is a JavaScript object with properties (key-value pairs). Here’s what a single, typical trial might look like:\nEach row in your data represents one trial, and each column represents a property that was recorded. Some properties are automatically added by jsPsych (like trial_type, rt, and time_elapsed), while others come from your trial definitions, addProperties(), or on_finish functions.\nHowever, experiments contain many trials, and so, all the trial objects are stored in an array [ ]:\nThis array shows how jsPsych stores data from multiple trials. Notice that:",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Accessing and Summarizing Data</span>"
    ]
  },
  {
    "objectID": "15-data-2.html#what-is-jspsych.data.get",
    "href": "15-data-2.html#what-is-jspsych.data.get",
    "title": "15  Accessing and Summarizing Data",
    "section": "",
    "text": "{\n  trial_type: \"html-keyboard-response\",\n  trial_index: 5,\n  time_elapsed: 12847,\n  rt: 1205,\n  stimulus: \"DOCTOR\",\n  response: \"f\", \n  task: \"recognition_test\",\n  word_type: \"old\",\n  correct_response: \"f\",\n  subject_id: \"q4jr9zbl\",\n  correct: true\n}\n\n\n\n[\n  {\n    trial_type: \"html-keyboard-response\",\n    trial_index: 0,\n    time_elapsed: 2121,\n    rt: 2121,\n    stimulus: \"&lt;div style='text-align: center;'&gt;&lt;h2&gt;Word Recognition Task&lt;/h2&gt;&lt;p&gt;In this task, you will see words one at a time.&lt;/p&gt;&lt;p&gt;Press &lt;strong&gt;F&lt;/strong&gt; if you think the word is OLD (you've seen it before)&lt;/p&gt;&lt;p&gt;Press &lt;strong&gt;J&lt;/strong&gt; if you think the word is NEW (you haven't seen it before)&lt;/p&gt;&lt;p&gt;Press any key to begin.&lt;/p&gt;&lt;/div&gt;\",\n    response: \"f\",\n    subject_id: \"q4jr9zbl\",\n    experiment_version: \"1.0\",\n    task: null,\n    word: null,\n    word_type: null,\n    correct_response: null,\n    correct: null\n  },\n  {\n    trial_type: \"html-keyboard-response\",\n    trial_index: 1,\n    time_elapsed: 3002,\n    rt: 879,\n    stimulus: \"DOCTOR\",\n    response: \"f\",\n    subject_id: \"q4jr9zbl\",\n    experiment_version: \"1.0\",\n    task: \"recognition_test\",\n    word: \"DOCTOR\",\n    word_type: \"old\",\n    correct_response: \"f\",\n    correct: true\n  },\n  {\n    trial_type: \"html-keyboard-response\",\n    trial_index: 2,\n    time_elapsed: 6266,\n    rt: 3264,\n    stimulus: \"PLANET\",\n    response: \"j\",\n    subject_id: \"q4jr9zbl\",\n    experiment_version: \"1.0\",\n    task: \"recognition_test\",\n    word: \"PLANET\",\n    word_type: \"new\",\n    correct_response: \"j\",\n    correct: true\n  },\n  {\n    trial_type: \"html-keyboard-response\",\n    trial_index: 3,\n    time_elapsed: 7033,\n    rt: 767,\n    stimulus: \"GARDEN\",\n    response: \"f\",\n    subject_id: \"q4jr9zbl\",\n    experiment_version: \"1.0\",\n    task: \"recognition_test\",\n    word: \"GARDEN\",\n    word_type: \"old\",\n    correct_response: \"f\",\n    correct: true\n  },\n  {\n    trial_type: \"html-keyboard-response\",\n    trial_index: 4,\n    time_elapsed: 7842,\n    rt: 808,\n    stimulus: \"WINDOW\",\n    response: \"j\",\n    subject_id: \"q4jr9zbl\",\n    experiment_version: \"1.0\",\n    task: \"recognition_test\",\n    word: \"WINDOW\",\n    word_type: \"new\",\n    correct_response: \"j\",\n    correct: true\n  }\n]\n\n\nEach element in the array is a complete trial object with all its properties\nProperties are consistent across trials (same keys), but values differ based on what happened in each trial\nThe first trial (index 0) is the welcome screen, so task-specific properties like word and correct are null\nSubsequent trials (indices 1-4) are the actual recognition test trials with all properties filled in\nGlobal properties like subject_id and experiment_version appear in every trial because they were added with addProperties()\nTrial-specific properties like rt, response, and correct vary based on participant behavior and trial content",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Accessing and Summarizing Data</span>"
    ]
  },
  {
    "objectID": "15-data-2.html#viewing-your-data-during-development",
    "href": "15-data-2.html#viewing-your-data-during-development",
    "title": "15  Accessing and Summarizing Data",
    "section": "15.2 Viewing Your Data During Development",
    "text": "15.2 Viewing Your Data During Development\nWhen you’re building and testing your experiment, you’ll want to examine the data being collected. The best way to do this is through your browser’s JavaScript console.\nTo open the JavaScript console:\n\nChrome/Edge: Press F12 or Ctrl+Shift+I (Cmd+Option+I on Mac), then click the “Console” tab\nFirefox: Press F12 or Ctrl+Shift+K (Cmd+Option+K on Mac)\nSafari: Press Cmd+Option+C (you may need to enable the Developer menu first)\n\nOnce you have the console open, you can run these commands to examine your data. The second command print a prettier version of the data than is typically displayed if you just run jsPsych.data.get() by converting it to a table of the values.\n// Print all the data in its original format\njsPsych.data.get();\n\n// Display all data values in the console as a table (very useful!)\nconsole.table(jsPsych.data.get().values());\nThe console.table() command is particularly helpful because it displays your data in a neat table format in the console, making it easy to see what’s being collected.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Accessing and Summarizing Data</span>"
    ]
  },
  {
    "objectID": "15-data-2.html#filtering-your-data",
    "href": "15-data-2.html#filtering-your-data",
    "title": "15  Accessing and Summarizing Data",
    "section": "15.3 Filtering Your Data",
    "text": "15.3 Filtering Your Data\njsPsych provides a rich set of built-in functions for working with your data. These functions allow you to filter, aggregate, and analyze your data without needing external tools. Understanding these functions can be helpful for calculating performance statistics for feedback or updating the experiment based on performance. You can read more about these tools in the documentation, but I’ll review some of them in brief\n\n15.3.1 Basic Filtering with .filter()\nhttps://www.jspsych.org/v8/reference/jspsych-data/#filter\nThe .filter() method lets you select trials that match specific criteria:\nconst all_data = jsPsych.data.get();\n\n// Get only trials from the test phase\nconst test_trials = all_data.filter({task: 'recognition_test'});\n\n// Get only correct responses\nconst correct_trials = all_data.filter({correct: true});\n\n// Get trials that match multiple criteria (AND logic)\n// Return any rows that have task = 'recognition_test' AND correct = true\nconst correct_test_trials = all_data.filter({task: 'recognition_test', correct: true});\n\n// Use an array for OR logic - trials from either word type\n// Return any rows that have word_type = 'old' OR word_type = 'new'\nconst old_or_new = all_data.filter([{word_type: 'old'}, {word_type: 'new'}]);\n\n\n15.3.2 Advanced Filtering with .filterCustom()\nhttps://www.jspsych.org/v8/reference/jspsych-data/#filtercustom\nFor more complex filtering, use .filterCustom() with a function. This allows us to write a custom function to filter in any way we want. It takes trial as the input, and we can filter based on any of the trial parameters that we have stored in the data. Though, we have to manually set what is returned from the function.\nconst all_data = jsPsych.data.get();\n\n// Get trials with response times between 200-2000ms\nconst valid_rt_trials = all_data.filterCustom(\n  function(trial) {\n    return trial.rt &gt;= 200 && trial.rt &lt;= 2000;\n  }\n);\n\n// Get trials where participants pressed specific keys\nconst f_responses = all_data.filterCustom(\n  function(trial) {\n    return trial.response === 'f';\n  }\n);\n\n// Get trials from the second half of the experiment\n// First count how many total trials there are\nconst total_trials = all_data.count();\n\n// Then filter based on trial count\nconst second_half = all_data.filterCustom(\n  function(trial) {\n    return trial.trial_index &gt;= total_trials / 2;\n  }\n);\n\n\n15.3.3 Selecting Specific Data Columns using .select()\nhttps://www.jspsych.org/v8/reference/jspsych-data/#select\nUse .select() to extract specific properties from your trials. Remember that when we convert our data to a table, every row is a trial and every column is a property. So, this is like selecting columns from our data set.\nconst all_data = jsPsych.data.get();\n\n// Get all response times\nconst response_times = all_data.select('rt');\n\n// Get all participant responses\nconst responses = all_data.select('response');\n\n// Get all stimulus words that were presented\nconst stimuli = all_data.select('word');\n\n\n15.3.4 Getting Subsets of Trials\nhttps://www.jspsych.org/v8/reference/jspsych-data/#first-last\njsPsych provides convenient methods for getting specific portions of your data:\nconst all_data = jsPsych.data.get();\n\n// Get the first 5 trials\nconst first_trials = all_data.first(5).trials;\n\n// Get the last 10 trials\nconst recent_trials = all_data.last(10).trials;\n\n// Get just the very last trial\nconst last_trial = all_data.last(1).trials;\n\n// Count total number of trials\nconst total_count = all_data.count();",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Accessing and Summarizing Data</span>"
    ]
  },
  {
    "objectID": "15-data-2.html#calculating-statistics",
    "href": "15-data-2.html#calculating-statistics",
    "title": "15  Accessing and Summarizing Data",
    "section": "15.4 Calculating Statistics",
    "text": "15.4 Calculating Statistics\nhttps://www.jspsych.org/v8/reference/jspsych-data/#datacolumn\nOnce you have selected data, you can calculate various statistics. For instance, if I select the column that contains the response times, I can then compute the mean, median, etc.\nconst all_data = jsPsych.data.get();\nconst response_times = all_data.select('rt');\n\n// Basic statistics\nconst mean_rt = response_times.mean();\nconst median_rt = response_times.median();\nconst min_rt = response_times.min();\nconst max_rt = response_times.max();\nconst total_rt = response_times.sum();\nconst rt_count = response_times.count();\n\n// Variability measures\nconst rt_variance = response_times.variance();\nconst rt_std_dev = response_times.sd();\n\nconsole.log(\"RT Statistics:\");\nconsole.log(\"Mean: \" + mean_rt + \"ms\");\nconsole.log(\"Median: \" + median_rt + \"ms\");\nconsole.log(\"Range: \" + min_rt + \"-\" + max_rt + \"ms\");\nconsole.log(\"Standard Deviation: \" + rt_std_dev + \"ms\");",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Accessing and Summarizing Data</span>"
    ]
  },
  {
    "objectID": "15-data-2.html#chaining-methods-for-complex-analysis",
    "href": "15-data-2.html#chaining-methods-for-complex-analysis",
    "title": "15  Accessing and Summarizing Data",
    "section": "15.5 Chaining Methods for Complex Analysis",
    "text": "15.5 Chaining Methods for Complex Analysis\nOften, we have a mix of different trials mixed together. This requires us to both filter and select to be able to calculate statistics. We can do that by ‘chaining’ together methods. This works by putting each function after the other. These methods will occur sequentially. You can think of it as asking it to ‘first filter by X’, then ‘select Y’, then ‘calculate the mean’.\nconst all_data = jsPsych.data.get();\n\n// Calculate accuracy rate for recognition test trials only\nconst test_accuracy = all_data\n  .filter({task: 'recognition_test'})\n  .filter({correct: true})\n  .count() / all_data.filter({task: 'recognition_test'}).count();\n\n// Get mean RT for correct responses to old words\nconst old_word_correct_rt = all_data\n  .filter({word_type: 'old', correct: true})\n  .select('rt')\n  .mean();\n\n// Count fast responses (under 500ms) in recognition trials\nconst fast_recognition_count = all_data\n  .filter({task: 'recognition_test'})\n  .filterCustom(function(trial) { return trial.rt &lt; 500; })\n  .count();\n\n// Get the response times from the last 20 correct trials\nconst recent_correct_rts = all_data\n  .filter({correct: true})\n  .last(20)\n  .select('rt');\n\nconsole.log(\"Recent correct RTs:\", recent_correct_rts.values);\nconsole.log(\"Mean of recent correct RTs:\", recent_correct_rts.mean());",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Accessing and Summarizing Data</span>"
    ]
  },
  {
    "objectID": "16-L06.html",
    "href": "16-L06.html",
    "title": "16  Lab 6: Creativity",
    "section": "",
    "text": "16.1 Research in Brief: Divergent and Convergent Thinking in Creativity",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lab 6: Creativity</span>"
    ]
  },
  {
    "objectID": "16-L06.html#research-in-brief-divergent-and-convergent-thinking-in-creativity",
    "href": "16-L06.html#research-in-brief-divergent-and-convergent-thinking-in-creativity",
    "title": "16  Lab 6: Creativity",
    "section": "",
    "text": "16.1.1 The Research Area\nCreative cognition involves the generation of novel and useful ideas, solutions, or products. Researchers have traditionally divided creative thinking into two primary components: divergent thinking, which involves generating multiple creative possibilities and expanding the range of potential solutions, and convergent thinking, which requires narrowing down options to identify the single best solution from among alternatives.\nThis distinction between divergent and convergent thinking has shaped creativity research for decades. Divergent thinking is associated with brainstorming, ideation, and the ability to think “outside the box” by producing many different responses to a given prompt. Convergent thinking involves analytical evaluation, critical assessment, and the ability to synthesize information to arrive at the most appropriate solution.\nUnderstanding these cognitive processes has important implications for education, workplace innovation, and creative problem-solving across domains. However, recent research suggests that the relationship between divergent and convergent thinking may be more complex than originally theorized, with both processes often working together during creative tasks rather than operating independently.\n\n\n16.1.2 Individual Differences in Creative Thinking\nPeople vary considerably in their creative abilities, with some individuals excelling at generating many novel ideas while others are particularly skilled at evaluating and refining creative solutions. These individual differences appear across various domains, from artistic creativity to scientific innovation and everyday problem-solving.\nResearch has identified several factors that influence creative thinking ability, including cognitive flexibility, working memory capacity, and the ability to make remote associations between seemingly unrelated concepts. Some individuals demonstrate strong divergent thinking skills but struggle with convergent evaluation, while others excel at critical analysis but generate fewer original ideas. Understanding these patterns helps researchers develop more targeted approaches to creativity training and assessment.\n\n\n16.1.3 The Research Design\nCreativity research relies heavily on standardized tasks designed to measure divergent and convergent thinking abilities. The most widely used measures are the Alternative Uses Task (AUT) for divergent thinking and the Remote Associates Test (RAT) for convergent thinking, though researchers increasingly question whether these tasks measure pure forms of each construct.\nThe Alternative Uses Task presents participants with common objects such as a brick, newspaper, or paperclip and requires them to generate as many creative, unusual uses as possible within a time limit, typically 3 minutes per object. The task is designed to measure the ability to generate multiple creative possibilities without constraints on the “correct” answer. Responses are scored on multiple dimensions including fluency (total number of responses), flexibility (number of different categories), and originality (statistical rarity of responses). Trained raters evaluate responses for appropriateness, creativity, and elaboration. For example, using a brick as a “doorstop” would score low on originality, while using it as a “canvas for miniature painting” would receive higher creativity ratings.\nThe Remote Associates Test presents participants with sets of three seemingly unrelated words such as “pine,” “sauce,” and “crab,” and requires them to identify a fourth word that forms meaningful associations with all three stimulus words. In this example, “apple” creates the compound words “pineapple,” “applesauce,” and “crab apple.” Items vary in difficulty, with some requiring common associations and others demanding more remote connections between concepts. The task is intended to measure the ability to converge on a single correct solution by identifying the common link among disparate elements. Success requires both generating potential connections and evaluating which option best fits all three stimulus words.\n\n\n16.1.4 Key Findings\nResearch examining the AUT and RAT has revealed that neither task measures pure divergent or convergent thinking. Instead, both tasks involve combinations of generative and evaluative processes, challenging traditional assumptions about their construct validity.\nWhile the Alternative Uses Task requires generating multiple ideas, successful performance also demands evaluating each potential response for appropriateness and creativity before including it in the final list. Participants must critically assess whether their ideas meet the task criteria, representing a convergent evaluation process embedded within the divergent generation task. When asked to think of alternative uses for a brick, someone might have the fleeting thought “geranium,” but would likely discard this unusual but implausible response in favor of more viable alternatives.\nThe Remote Associates Test requires identifying a single correct answer, but participants must first generate multiple potential solutions before selecting the best option. Additionally, many RAT items rely on structural word associations such as compound words and common phrases rather than semantic relationships, making the task more similar to word puzzles than creative thinking challenges. Analysis of RAT items reveals that many associations are functionally unrelated in meaning, with solutions connected to stimulus words primarily through linguistic structure rather than conceptual similarity.\nStudies consistently find little to no correlation between AUT and RAT performance, raising questions about whether they measure components of the same underlying creativity construct. This lack of relationship contrasts sharply with intelligence research, where different cognitive abilities typically show moderate positive correlations. The absence of correlation may reflect fundamental differences in the cognitive processes required by each task rather than measuring different aspects of the same creative ability.\n\n\n16.1.5 Implications\nThese findings reveal significant limitations in current creativity measurement approaches and suggest that the field requires substantial theoretical and methodological reconceptualization. The mixed cognitive processes found in both tasks indicate that creativity emerges from the dynamic interaction between divergent and convergent thinking rather than their independent operation. Contemporary dual process models propose that effective creativity requires the coordinated application of both generative and evaluative processes, with individuals cycling rapidly between generating possibilities and evaluating their potential.\nThe field currently lacks the comprehensive battery of validated measures that has enabled progress in intelligence research. Without multiple reliable tasks measuring each construct, researchers cannot establish divergent and convergent thinking as separable components of creativity. This limitation means that studies showing variables correlating with only one creativity task may reflect task-specific factors rather than fundamental differences between thinking styles.\nMoving forward, researchers are developing new approaches that measure both divergent and convergent thinking using similar criteria and contexts, allowing for more direct comparisons. Some promising developments include domain-specific creativity tasks that can assess both types of thinking along the same dimensions. Future progress will likely depend on developing better measurement approaches and achieving greater clarity about the fundamental constructs underlying creative cognition, ultimately leading to more effective approaches for fostering creativity in educational and professional settings.\n\n\n16.1.6 Further Reading\nCortes, R. A., Weinberger, A. B., Daker, R. J., & Green, A. E. (2019). Re-examining prominent measures of divergent and convergent creativity. Current Opinion in Behavioral Sciences, 27, 90-93.\nGoldstein, E. (2021). Problem-Solving and Creativity in Cognitive Psychology.\nMadore, K. P., Addis, D. R., & Schacter, D. L. (2015). Creativity and memory: Effects of an episodic-specificity induction on divergent thinking. Psychological Science, 26(9), 1461-1468.\nLaukkonen, R. E., Kaveladze, B. T., Tangen, J. M., & Schooler, J. W. (2020). The dark side of Eureka: Artificially induced Aha moments make facts feel true. Cognition, 196, 104122.\nRitter, S. M., & Ferguson, S. (2017). Happy creativity: Listening to happy music facilitates divergent thinking. PLoS One, 12(9), e0182210.",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lab 6: Creativity</span>"
    ]
  },
  {
    "objectID": "16-L06.html#program-a-creativity-task",
    "href": "16-L06.html#program-a-creativity-task",
    "title": "16  Lab 6: Creativity",
    "section": "16.2 Program a Creativity Task",
    "text": "16.2 Program a Creativity Task\nIn this exercise, we’re going to program the divergent and convergent creativity tasks, with a particular focus on labeling our data and saving the data locally at the end of our experiment.\nWe’re going to have participants type in responses for the AUT. This will require a new plugin we haven’t used before called jsPsychSurveyText.\nBefore you begin, you should have a quick read over the documentation to see how this plugin operates and give you a sense of how we’ll use it in our experiment:\nhttps://www.jspsych.org/v8/plugins/survey-text/\nFor the RAT, we’re going to program a multiple-choice version of this task using keyboard responses. This probably isn’t the most ideal way to carry out the RAT, but it will provide a better demonstration of data labeling.\nOur initial folder contains the same, general, boilerplate jsPsych files as always, with nothing new added.\n\n📂 L06\n├──  📄 index.html\n├──  📄 exp.js\n├──  📄 style.css\n└──  📂 jspsych\n\n\n16.2.1 Initiate jsPsych\nLet’s begin by loading and initiating jsPsych with a welcome screen.\nSince we need additional plugins, we should add that here. I’ve added the survey text and the instructions plugins below.\nI’m also going to add our save local data trial now. It’s going to be part of our boilerplate jsPsych from here on out.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n16.2.2 Add the AUT instructions\nWe’ll start with the AUT task first. Let’s begin by giving participants some instructions. I also added some basic styling in the CSS file using the .instructionStyle class.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nlet aut_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see the name of a common object and think of creative, unusual uses for it.&lt;/p&gt;\n\n            &lt;p&gt;For example, if the object were \"brick,\" you might think of:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;Use as a paperweight&lt;/li&gt;\n               &lt;li&gt;Grind up to make red paint pigment&lt;/li&gt;\n               &lt;li&gt;Heat in oven as a bed warmer&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;Your responses should be:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;&lt;strong&gt;Creative&lt;/strong&gt; - think of unusual uses&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Useful&lt;/strong&gt; - the use should actually work&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Specific&lt;/strong&gt; - relate to the object\"s properties&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p&gt;Avoid generic responses like \"throw it away\" that could apply to any object.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will generate 10 creative uses for the object.&lt;/p&gt;\n            &lt;p&gt;Type one use at a time and press SUBMIT after each response.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  aut_instructions,\n  saveData\n]); \n\n\n .instructionStyle {\n    width: 600px;\n    text-align: left;\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n16.2.3 Add the AUT trials\nNow let’s add our AUT trials. If you read the survey text plugin documentation, you’d find that it has a different format than our other plugins.\nIt requires a questions parameter. The format for the questions parameter is an array TYPE, which lists all the questions.\nEach question is an object with prompt, name, and required as parameters.\nSo it should look like this\n[{prompt: \"Questions #1 prompt\", name: \"Question #1 name label\", required: true}]\nWe only need to ask one question on every trial, since the prompt never changes. We can set the repetitions parameter to make that single trial repeat 5 times.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nlet aut_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see the name of a common object and think of creative, unusual uses for it.&lt;/p&gt;\n\n            &lt;p&gt;For example, if the object were \"brick,\" you might think of:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;Use as a paperweight&lt;/li&gt;\n               &lt;li&gt;Grind up to make red paint pigment&lt;/li&gt;\n               &lt;li&gt;Heat in oven as a bed warmer&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;Your responses should be:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;&lt;strong&gt;Creative&lt;/strong&gt; - think of unusual uses&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Useful&lt;/strong&gt; - the use should actually work&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Specific&lt;/strong&gt; - relate to the object\"s properties&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p&gt;Avoid generic responses like \"throw it away\" that could apply to any object.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will generate 10 creative uses for the object.&lt;/p&gt;\n            &lt;p&gt;Type one use at a time and press SUBMIT after each response.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true\n}\n\nlet aut = {\n    timeline: [\n        {\n            type:jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000\n        },\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                {\n                    prompt: \"What is a creative and unusual use for a BRICK?\",\n                    name: \"AUT\",\n                    required: true\n                }\n            ],\n            button_label: \"SUBMIT\"\n        }\n    ],\n    repetitions: 5\n}\n\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  aut_instructions,\n  aut,\n  saveData\n]); \n\n\n .instructionStyle {\n    width: 600px;\n    text-align: left;\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n16.2.4 Add the RAT instructions\nNow let’s add our instructions for the RAT\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nlet aut_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see the name of a common object and think of creative, unusual uses for it.&lt;/p&gt;\n\n            &lt;p&gt;For example, if the object were \"brick,\" you might think of:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;Use as a paperweight&lt;/li&gt;\n               &lt;li&gt;Grind up to make red paint pigment&lt;/li&gt;\n               &lt;li&gt;Heat in oven as a bed warmer&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;Your responses should be:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;&lt;strong&gt;Creative&lt;/strong&gt; - think of unusual uses&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Useful&lt;/strong&gt; - the use should actually work&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Specific&lt;/strong&gt; - relate to the object\"s properties&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p&gt;Avoid generic responses like \"throw it away\" that could apply to any object.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will generate 10 creative uses for the object.&lt;/p&gt;\n            &lt;p&gt;Type one use at a time and press SUBMIT after each response.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true\n}\n\nlet aut = {\n    timeline: [\n        {\n            type:jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000\n        },\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                {\n                    prompt: \"What is a creative and unusual use for a BRICK?\",\n                    name: \"AUT\",\n                    required: true\n                }\n            ],\n            button_label: \"SUBMIT\"\n        }\n    ],\n    repetitions: 5\n}\n\nlet rat_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see three words that seem unrelated. Your job is to find a fourth word that connects to all three.&lt;/p&gt;\n\n            &lt;p&gt;For example, if you see:&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;PINE / SAUCE / CRAB&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;The answer would be &lt;strong&gt;APPLE&lt;/strong&gt; because it forms compound words with all three:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;PINE + APPLE = pineapple&lt;/li&gt;\n               &lt;li&gt;APPLE + SAUCE = applesauce&lt;/li&gt;\n               &lt;li&gt;CRAB + APPLE = crab apple&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;The connecting word can go either before or after each of the three given words to form a common compound word or phrase.&lt;/p&gt;\n            &lt;p&gt;Sometimes the connection might be a common phrase rather than a compound word.&lt;/p&gt;\n            &lt;p&gt;Take your time to think about each problem - some are easier than others.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will see one set of three words at a time, followed by four answer choices.&lt;/p&gt;\n            &lt;p&gt;Press the number key (1, 2, 3, or 4) that corresponds to your answer.&lt;/p&gt;\n            &lt;p&gt;Try to answer each question - make your best guess if you\"re unsure.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  aut_instructions,\n  aut,\n  rat_instructions,\n  saveData\n]); \n\n\n .instructionStyle {\n    width: 600px;\n    text-align: left;\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n16.2.5 Add the RAT trials\nNow let’s add our trials for the RAT. Since every trial has a different three-word combination and multiple choice options, we’ll use timeline variables like we have in the past.\nFor this multiple choice version, we’ll put the entire stimulus (including the word triad and answer choices) directly in the timeline_variables. This keeps everything organized and makes it easy to randomize the trials. I created an HTML display much in the same way we have for the instructions.\nNotice that each timeline variable includes four parameters:\n\nstimulus: The HTML content showing the word triad and multiple choice options\ncorrect: The correct answer key (1, 2, 3, or 4)\nwords: The three-word combination as a clean string\nanswer: The correct answer word\n\nAlthough we only use stimulus in the actual trial, the words and answer parameters are helpful labels that we can use when we analyze and label our data in the next steps.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\"\n}\n\nlet aut_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see the name of a common object and think of creative, unusual uses for it.&lt;/p&gt;\n\n            &lt;p&gt;For example, if the object were \"brick,\" you might think of:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;Use as a paperweight&lt;/li&gt;\n               &lt;li&gt;Grind up to make red paint pigment&lt;/li&gt;\n               &lt;li&gt;Heat in oven as a bed warmer&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;Your responses should be:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;&lt;strong&gt;Creative&lt;/strong&gt; - think of unusual uses&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Useful&lt;/strong&gt; - the use should actually work&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Specific&lt;/strong&gt; - relate to the object\"s properties&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p&gt;Avoid generic responses like \"throw it away\" that could apply to any object.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will generate 10 creative uses for the object.&lt;/p&gt;\n            &lt;p&gt;Type one use at a time and press SUBMIT after each response.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true\n}\n\nlet aut = {\n    timeline: [\n        {\n            type:jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000\n        },\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                {\n                    prompt: \"What is a creative and unusual use for a BRICK?\",\n                    name: \"AUT\",\n                    required: true\n                }\n            ],\n            button_label: \"SUBMIT\"\n        }\n    ],\n    repetitions: 5\n}\n\nlet rat_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see three words that seem unrelated. Your job is to find a fourth word that connects to all three.&lt;/p&gt;\n\n            &lt;p&gt;For example, if you see:&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;PINE / SAUCE / CRAB&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;The answer would be &lt;strong&gt;APPLE&lt;/strong&gt; because it forms compound words with all three:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;PINE + APPLE = pineapple&lt;/li&gt;\n               &lt;li&gt;APPLE + SAUCE = applesauce&lt;/li&gt;\n               &lt;li&gt;CRAB + APPLE = crab apple&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;The connecting word can go either before or after each of the three given words to form a common compound word or phrase.&lt;/p&gt;\n            &lt;p&gt;Sometimes the connection might be a common phrase rather than a compound word.&lt;/p&gt;\n            &lt;p&gt;Take your time to think about each problem - some are easier than others.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will see one set of three words at a time, followed by four answer choices.&lt;/p&gt;\n            &lt;p&gt;Press the number key (1, 2, 3, or 4) that corresponds to your answer.&lt;/p&gt;\n            &lt;p&gt;Try to answer each question - make your best guess if you\"re unsure.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true\n}\n\nlet rat = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000\n        },\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"1\", \"2\", \"3\", \"4\"],\n            prompt: \"&lt;p&gt;Press 1, 2, 3, or 4 to select your answer&lt;/p&gt;\"\n        }\n    ],\n    timeline_variables: [\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;COTTAGE - SWISS - CAKE&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. CHEESE&lt;/div&gt;\n                         &lt;div&gt;2. HOUSE&lt;/div&gt;\n                         &lt;div&gt;3. FOOD&lt;/div&gt;\n                         &lt;div&gt;4. WHITE&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"1\",\n            words: \"COTTAGE  SWISS  CAKE\",\n            answer: \"CHEESE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;CREAM - SKATE - WATER&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. COLD&lt;/div&gt;\n                         &lt;div&gt;2. ICE&lt;/div&gt;\n                         &lt;div&gt;3. SMOOTH&lt;/div&gt;\n                         &lt;div&gt;4. WINTER&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"2\",\n            words: \"CREAM  SKATE  WATER\",\n            answer: \"ICE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;MAGIC - PITCH - ROOM&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. BLACK&lt;/div&gt;\n                         &lt;div&gt;2. NIGHT&lt;/div&gt;\n                         &lt;div&gt;3. DARK&lt;/div&gt;\n                         &lt;div&gt;4. DEEP&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"3\",\n            words: \"MAGIC  PITCH  ROOM\",\n            answer: \"DARK\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;SHIP - OUTER - CRAWL&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. SPACE&lt;/div&gt;\n                         &lt;div&gt;2. TRAVEL&lt;/div&gt;\n                         &lt;div&gt;3. MOVE&lt;/div&gt;\n                         &lt;div&gt;4. OCEAN&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"1\",\n            words: \"SHIP  OUTER  CRAWL\",\n            answer: \"SPACE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;APPLE - FAMILY - HOUSE&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. HOME&lt;/div&gt;\n                         &lt;div&gt;2. TREE&lt;/div&gt;\n                         &lt;div&gt;3. GREEN&lt;/div&gt;\n                         &lt;div&gt;4. FRUIT&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"2\",\n            words: \"APPLE  FAMILY  HOUSE\",\n            answer: \"TREE\"\n        }\n    ],\n    randomize_order: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  aut_instructions,\n  aut,\n  rat_instructions,\n  rat,\n  saveData\n]); \n\n\n .instructionStyle {\n    width: 600px;\n    text-align: left;\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n16.2.6 Add data labels\nNow it’s time to provide labels for our data. I typically leave this step towards the end, because you need to see all the different trials to know what needs to be labeled.\nThis step is about working out which parts of the experiment you might need to find or filter when you’re analyzing your data later.\nLet’s think about what we need for this experiment:\n\nPhase labels - We need to identify different sections of the experiment so we can select all AUT or RAT trials and filter out instructions/save data trials\n\n\nLabels: phase: “Welcome”, “AUT Instructions”, “AUT”,“RAT Instructions”, “RAT”, “Save Data”\n\n\nTrial part labels - We need to distinguish between the actual response trials and the fixation crosses within each task\n\n\nLabels: trial_part: “stimulus”, “fixation”\n\n\nRAT-specific labels - For the RAT trials, we need the dynamic information from our timeline_variables so we can analyze correctness and see what words/answers were presented\n\n\nLabels: words, answer, correct (these come automatically from timeline_variables)\n\nNote: Don’t forget that when we add new properties to the list, the previous line needs a comma! I always highlight the line before our addition to note that we need that comma.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\",\n  data: {\n    phase: \"welcome\"\n  }\n}\n\nlet aut_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see the name of a common object and think of creative, unusual uses for it.&lt;/p&gt;\n\n            &lt;p&gt;For example, if the object were \"brick,\" you might think of:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;Use as a paperweight&lt;/li&gt;\n               &lt;li&gt;Grind up to make red paint pigment&lt;/li&gt;\n               &lt;li&gt;Heat in oven as a bed warmer&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;Your responses should be:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;&lt;strong&gt;Creative&lt;/strong&gt; - think of unusual uses&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Useful&lt;/strong&gt; - the use should actually work&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Specific&lt;/strong&gt; - relate to the object\"s properties&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p&gt;Avoid generic responses like \"throw it away\" that could apply to any object.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will generate 10 creative uses for the object.&lt;/p&gt;\n            &lt;p&gt;Type one use at a time and press SUBMIT after each response.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true,\n    data: {\n      phase: \"AUT Instructions\"\n    }\n}\n\nlet aut = {\n    timeline: [\n        {\n            type:jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000,\n            data: {\n              trial_part: \"fixation\"\n            }\n        },\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                {\n                    prompt: \"What is a creative and unusual use for a BRICK?\",\n                    name: \"AUT\",\n                    required: true\n                }\n            ],\n            button_label: \"SUBMIT\",\n            data: {\n              trial_part: \"stimulus\"\n            }\n        }\n    ],\n    repetitions: 5,\n    data: {\n      phase: \"AUT\"\n    }\n}\n\nlet rat_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see three words that seem unrelated. Your job is to find a fourth word that connects to all three.&lt;/p&gt;\n\n            &lt;p&gt;For example, if you see:&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;PINE / SAUCE / CRAB&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;The answer would be &lt;strong&gt;APPLE&lt;/strong&gt; because it forms compound words with all three:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;PINE + APPLE = pineapple&lt;/li&gt;\n               &lt;li&gt;APPLE + SAUCE = applesauce&lt;/li&gt;\n               &lt;li&gt;CRAB + APPLE = crab apple&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;The connecting word can go either before or after each of the three given words to form a common compound word or phrase.&lt;/p&gt;\n            &lt;p&gt;Sometimes the connection might be a common phrase rather than a compound word.&lt;/p&gt;\n            &lt;p&gt;Take your time to think about each problem - some are easier than others.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will see one set of three words at a time, followed by four answer choices.&lt;/p&gt;\n            &lt;p&gt;Press the number key (1, 2, 3, or 4) that corresponds to your answer.&lt;/p&gt;\n            &lt;p&gt;Try to answer each question - make your best guess if you\"re unsure.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true,\n    data: {\n      phase: \"RAT Instructions\"\n    }\n}\n\nlet rat = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000,\n            data: {\n              trial_part: \"fixation\"\n            }\n        },\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"1\", \"2\", \"3\", \"4\"],\n            prompt: \"&lt;p&gt;Press 1, 2, 3, or 4 to select your answer&lt;/p&gt;\",\n            data: {\n              trial_part: \"stimulus\",\n              words: jsPsych.timelineVariable(\"words\"),\n              answer: jsPsych.timelineVariable(\"answer\"),\n              correct_response: jsPsych.timelineVariable(\"correct_response\")\n            }\n        }\n    ],\n    timeline_variables: [\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;COTTAGE - SWISS - CAKE&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. CHEESE&lt;/div&gt;\n                         &lt;div&gt;2. HOUSE&lt;/div&gt;\n                         &lt;div&gt;3. FOOD&lt;/div&gt;\n                         &lt;div&gt;4. WHITE&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"1\",\n            words: \"COTTAGE  SWISS  CAKE\",\n            answer: \"CHEESE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;CREAM - SKATE - WATER&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. COLD&lt;/div&gt;\n                         &lt;div&gt;2. ICE&lt;/div&gt;\n                         &lt;div&gt;3. SMOOTH&lt;/div&gt;\n                         &lt;div&gt;4. WINTER&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"2\",\n            words: \"CREAM  SKATE  WATER\",\n            answer: \"ICE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;MAGIC - PITCH - ROOM&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. BLACK&lt;/div&gt;\n                         &lt;div&gt;2. NIGHT&lt;/div&gt;\n                         &lt;div&gt;3. DARK&lt;/div&gt;\n                         &lt;div&gt;4. DEEP&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"3\",\n            words: \"MAGIC  PITCH  ROOM\",\n            answer: \"DARK\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;SHIP - OUTER - CRAWL&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. SPACE&lt;/div&gt;\n                         &lt;div&gt;2. TRAVEL&lt;/div&gt;\n                         &lt;div&gt;3. MOVE&lt;/div&gt;\n                         &lt;div&gt;4. OCEAN&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"1\",\n            words: \"SHIP  OUTER  CRAWL\",\n            answer: \"SPACE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;APPLE - FAMILY - HOUSE&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. HOME&lt;/div&gt;\n                         &lt;div&gt;2. TREE&lt;/div&gt;\n                         &lt;div&gt;3. GREEN&lt;/div&gt;\n                         &lt;div&gt;4. FRUIT&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"2\",\n            words: \"APPLE  FAMILY  HOUSE\",\n            answer: \"TREE\"\n        }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"RAT\"\n    }\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  },\n  data: {\n    phase: \"Save Data\"\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  aut_instructions,\n  aut,\n  rat_instructions,\n  rat,\n  saveData\n]); \n\n\n .instructionStyle {\n    width: 600px;\n    text-align: left;\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n16.2.7 Update RAT data with accuracy\nSince we used the multiple-choice version of the RAT, we can easily determine if participants provided the correct response or not. Let’s use the on_finish parameter to update our data with their accuracy.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 6: Creativity&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\",\n  data: {\n    phase: \"welcome\"\n  }\n}\n\nlet aut_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see the name of a common object and think of creative, unusual uses for it.&lt;/p&gt;\n\n            &lt;p&gt;For example, if the object were \"brick,\" you might think of:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;Use as a paperweight&lt;/li&gt;\n               &lt;li&gt;Grind up to make red paint pigment&lt;/li&gt;\n               &lt;li&gt;Heat in oven as a bed warmer&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;Your responses should be:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;&lt;strong&gt;Creative&lt;/strong&gt; - think of unusual uses&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Useful&lt;/strong&gt; - the use should actually work&lt;/li&gt;\n               &lt;li&gt;&lt;strong&gt;Specific&lt;/strong&gt; - relate to the object\"s properties&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;p&gt;Avoid generic responses like \"throw it away\" that could apply to any object.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will generate 10 creative uses for the object.&lt;/p&gt;\n            &lt;p&gt;Type one use at a time and press SUBMIT after each response.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true,\n    data: {\n      phase: \"AUT Instructions\"\n    }\n}\n\nlet aut = {\n    timeline: [\n        {\n            type:jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000,\n            data: {\n              trial_part: \"fixation\"\n            }\n        },\n        {\n            type: jsPsychSurveyText,\n            questions: [\n                {\n                    prompt: \"What is a creative and unusual use for a BRICK?\",\n                    name: \"AUT\",\n                    required: true\n                }\n            ],\n            button_label: \"SUBMIT\",\n            data: {\n              trial_part: \"stimulus\"\n            }\n        }\n    ],\n    repetitions: 5,\n    data: {\n      phase: \"AUT\"\n    }\n}\n\nlet rat_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;In this task, you will see three words that seem unrelated. Your job is to find a fourth word that connects to all three.&lt;/p&gt;\n\n            &lt;p&gt;For example, if you see:&lt;/p&gt;\n            &lt;p&gt;&lt;strong&gt;PINE / SAUCE / CRAB&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;The answer would be &lt;strong&gt;APPLE&lt;/strong&gt; because it forms compound words with all three:&lt;/p&gt;\n            &lt;ul&gt;\n               &lt;li&gt;PINE + APPLE = pineapple&lt;/li&gt;\n               &lt;li&gt;APPLE + SAUCE = applesauce&lt;/li&gt;\n               &lt;li&gt;CRAB + APPLE = crab apple&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;The connecting word can go either before or after each of the three given words to form a common compound word or phrase.&lt;/p&gt;\n            &lt;p&gt;Sometimes the connection might be a common phrase rather than a compound word.&lt;/p&gt;\n            &lt;p&gt;Take your time to think about each problem - some are easier than others.&lt;/p&gt;\n        &lt;/div&gt;`,\n\n        `&lt;div class=\"instructionStyle\"&gt;\n            &lt;p&gt;You will see one set of three words at a time, followed by four answer choices.&lt;/p&gt;\n            &lt;p&gt;Press the number key (1, 2, 3, or 4) that corresponds to your answer.&lt;/p&gt;\n            &lt;p&gt;Try to answer each question - make your best guess if you\"re unsure.&lt;/p&gt;\n            &lt;p&gt;Press NEXT when you are ready to begin.&lt;/p&gt;\n        &lt;/div&gt;`\n    ],\n    show_clickable_nav: true,\n    show_page_number: true,\n    data: {\n      phase: \"RAT Instructions\"\n    }\n}\n\nlet rat = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"font-size: 72px\"&gt;+&lt;/p&gt;`,\n            choices: \"NO_KEYS\",\n            trial_duration: 1000,\n            data: {\n              trial_part: \"fixation\"\n            }\n        },\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"1\", \"2\", \"3\", \"4\"],\n            prompt: \"&lt;p&gt;Press 1, 2, 3, or 4 to select your answer&lt;/p&gt;\",\n            data: {\n              trial_part: \"stimulus\",\n              words: jsPsych.timelineVariable(\"words\"),\n              answer: jsPsych.timelineVariable(\"answer\"),\n              correct_response: jsPsych.timelineVariable(\"correct_response\")\n            },\n            on_finish: function(data){\n                // Use compareKeys() to properly compare key responses\n                if (jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)) {\n                  data.accuracy = true;\n                } else {\n                  data.accuracy = false;\n                }\n            }\n        }\n    ],\n    timeline_variables: [\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;COTTAGE - SWISS - CAKE&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. CHEESE&lt;/div&gt;\n                         &lt;div&gt;2. HOUSE&lt;/div&gt;\n                         &lt;div&gt;3. FOOD&lt;/div&gt;\n                         &lt;div&gt;4. WHITE&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"1\",\n            words: \"COTTAGE  SWISS  CAKE\",\n            answer: \"CHEESE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;CREAM - SKATE - WATER&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. COLD&lt;/div&gt;\n                         &lt;div&gt;2. ICE&lt;/div&gt;\n                         &lt;div&gt;3. SMOOTH&lt;/div&gt;\n                         &lt;div&gt;4. WINTER&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"2\",\n            words: \"CREAM  SKATE  WATER\",\n            answer: \"ICE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;MAGIC - PITCH - ROOM&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. BLACK&lt;/div&gt;\n                         &lt;div&gt;2. NIGHT&lt;/div&gt;\n                         &lt;div&gt;3. DARK&lt;/div&gt;\n                         &lt;div&gt;4. DEEP&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"3\",\n            words: \"MAGIC  PITCH  ROOM\",\n            answer: \"DARK\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;SHIP - OUTER - CRAWL&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. SPACE&lt;/div&gt;\n                         &lt;div&gt;2. TRAVEL&lt;/div&gt;\n                         &lt;div&gt;3. MOVE&lt;/div&gt;\n                         &lt;div&gt;4. OCEAN&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"1\",\n            words: \"SHIP  OUTER  CRAWL\",\n            answer: \"SPACE\"\n        },\n        {\n            stimulus: `&lt;p&gt;&lt;strong&gt;APPLE - FAMILY - HOUSE&lt;/strong&gt;&lt;/p&gt;\n                      &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                         &lt;div&gt;1. HOME&lt;/div&gt;\n                         &lt;div&gt;2. TREE&lt;/div&gt;\n                         &lt;div&gt;3. GREEN&lt;/div&gt;\n                         &lt;div&gt;4. FRUIT&lt;/div&gt;\n                      &lt;/div&gt;`,\n            correct_response: \"2\",\n            words: \"APPLE  FAMILY  HOUSE\",\n            answer: \"TREE\"\n        }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"RAT\"\n    }\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"creativity_data.csv\");\n    });\n  },\n  data: {\n    phase: \"Save Data\"\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  aut_instructions,\n  aut,\n  rat_instructions,\n  rat,\n  saveData\n]); \n\n\n .instructionStyle {\n    width: 600px;\n    text-align: left;\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lab 6: Creativity</span>"
    ]
  },
  {
    "objectID": "16-L06.html#stretch-goals",
    "href": "16-L06.html#stretch-goals",
    "title": "16  Lab 6: Creativity",
    "section": "16.3 Stretch Goals",
    "text": "16.3 Stretch Goals\n\n16.3.1 Add RT Performance Category to the RAT data\nIt could be useful to categorize participant response times to identify unusually fast or slow responses. Use the on_finish function to add a data.rt_performance label to each RAT trial.\nYou’ll need to use if-else statements to categorize response times:\n\nrt &lt; 500 = “too_fast” (likely guessing)\nrt &gt; 10000 = “too_slow” (may indicate distraction)\nrt &gt;= 500 && rt &lt;= 10000 = “normal” (reasonable thinking time)\n\nThis will help you identify and potentially exclude problematic responses during analysis.\n\n\n16.3.2 Add a practice block of RAT trials\nLet’s add a separate practice block that gives participants feedback on their responses. This helps them understand the task before the main trials.\n\nRAT instructions (already included, but updated to tell them that they will first complete practice trials)\nPractice trials - Each consisting of:\n\n\nFixation cross\nRAT multiple choice question\nAfter they respond, show them the correct response: “The correct response was [insert answer]”\n\n\nEnd of Practice Instructions\n\n\nLet participants know that the practice is over and to press any key to begin the experimental phase (Hint: this could like the welcome screen)\n\nYour experiment timeline at the end should look something like this:\njsPsych.run([\n  welcome,\n  aut_instructions,\n  aut,\n  rat_instructions,\n  rat_practice,\n  rat_end_practice,\n  rat,\n  saveData\n]);\nFor the feedback trial, we will just insert the answer using a stimulus like:\nstimulus: `&lt;p&gt;The correct answer was: &lt;strong&gt;${jsPsych.timelineVariable(\"answer\")}&lt;/strong&gt;&lt;/p&gt;\n           &lt;p&gt;Press any key to continue to the next practice trial.&lt;/p&gt;`\nHere are two RAT stimuli you can use for your practice trials:\n    {\n        stimulus: `&lt;p&gt;&lt;strong&gt;BLUE  COTTAGE  SWISS&lt;/strong&gt;&lt;/p&gt;\n                  &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                     &lt;div&gt;1. CHEESE&lt;/div&gt;\n                     &lt;div&gt;2. HOUSE&lt;/div&gt;\n                     &lt;div&gt;3. MILK&lt;/div&gt;\n                     &lt;div&gt;4. WHITE&lt;/div&gt;\n                  &lt;/div&gt;`,\n        correct: '1',\n        words: 'BLUE  COTTAGE  SWISS',\n        answer: 'CHEESE'\n    },\n    {\n        stimulus: `&lt;p&gt;&lt;strong&gt;SLEEPING  CONTEST  SHIP&lt;/strong&gt;&lt;/p&gt;\n                  &lt;div style=\"text-align: left; display: inline-block;\"&gt;\n                     &lt;div&gt;1. WATER&lt;/div&gt;\n                     &lt;div&gt;2. BEAUTY&lt;/div&gt;\n                     &lt;div&gt;3. NIGHT&lt;/div&gt;\n                     &lt;div&gt;4. DREAM&lt;/div&gt;\n                  &lt;/div&gt;`,\n        correct: '2',\n        words: 'SLEEPING  CONTEST  SHIP',\n        answer: 'BEAUTY'\n    }\nImportant reminders:\n\nLabel this block appropriately (e.g., phase: “RAT_practice”)\nAdd the practice block to your main experiment timeline before the actual RAT block",
    "crumbs": [
      "Unit 6: Data",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Lab 6: Creativity</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html",
    "href": "17-dynamic-html.html",
    "title": "17  Dynamic Parameters",
    "section": "",
    "text": "17.1 Introduction\nSo far, we’ve learned how to use jsPsych.timelineVariable() to systematically vary parameters across trials. This approach works well when you know all the values you want to use ahead of time and can list them in your timeline variables.\nHowever, sometimes you need parameters to change based on what happens during the experiment. For example:\nDynamic parameters allow values to change based on events that occur during the experiment. The key insight is simple: replace any static parameter with a function that calculates the appropriate value right before each trial runs.",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#introduction",
    "href": "17-dynamic-html.html#introduction",
    "title": "17  Dynamic Parameters",
    "section": "",
    "text": "Showing “Correct!” or “Incorrect!” feedback (you don’t know which until the participant responds)\nAdjusting difficulty based on performance\nChanging stimulus location based on experimental conditions",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#reviewing-jspsych.timelinevariablevariable",
    "href": "17-dynamic-html.html#reviewing-jspsych.timelinevariablevariable",
    "title": "17  Dynamic Parameters",
    "section": "17.2 Reviewing jsPsych.timelineVariable(\"variable\")",
    "text": "17.2 Reviewing jsPsych.timelineVariable(\"variable\")\nBefore exploring dynamic parameters, let’s review timeline variables. Timeline variables allow you to systematically vary parameters by pre-defining all values, which jsPsych can then randomize and insert as needed. This works perfectly for switching stimuli across trials.\nYou can use jsPsych.timelineVariable() to replace most trial parameters. Here are common examples:\n\n17.2.1 Varying Stimulus\nThis example should look familiar. Here, we are changing the stimulus HTML on the basis of what’s in the timeline variables. Using jsPsych.timelineVariable('word') will take what is in the word variable on any give trial and insert that into thestimulus parameter.\nlet word_trials = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable('word'),\n  choices: ['f', 'j'],\n  timeline_variables: [\n    {word: '&lt;p&gt;CAT&lt;/p&gt;'},\n    {word: '&lt;p&gt;DOG&lt;/p&gt;'},\n    {word: '&lt;p&gt;BIRD&lt;/p&gt;'}\n  ]\n};\n\n\n17.2.2 Varying Multiple Parameters\nYou can extend this logic to substitute any parameter. The key requirement is providing the parameter in the correct format.\nIn this example, we’re changing the choices parameter to allow only the correct key on each trial. Notice that we still provide an array ([‘r’]) in our timeline variables. We’re also changing the trial_duration parameter to vary response time limits. Since this parameter expects a number, we provide numbers in our timeline variables.\nlet stroop = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable('stimulus'),\n  choices: jsPsych.timelineVariable('valid_keys'),\n  trial_duration: jsPsych.timelineVariable('time_limit'),\n  timeline_variables: [\n    {\n      stimulus: '&lt;p style=\"color: red;\"&gt;RED&lt;/p&gt;',\n      valid_keys: ['r'],\n      time_limit: 2000\n    },\n    {\n      stimulus: '&lt;p style=\"color: blue;\"&gt;BLUE&lt;/p&gt;',\n      valid_keys: ['b'],\n      time_limit: 1500\n    }\n  ]\n};\nHere, we’re changing the choices parameter on each trial to only allow the correct key. Notice how we still provide an array inside our timeline variables (['r']).\nWe are also changing our time_duration parameter on each trial to change how long they have to respond. This parameter expects a number, so we provide a number in our timeline variables.\n\n\n17.2.3 Varying Data Labels\nIn the previous data chapter, we also used timeline variables to update our data values. This is the same principle:\nlet categorization_trials = {\n  type: jsPsychImageKeyboardResponse,\n  stimulus: jsPsych.timelineVariable('image'),\n  choices: ['f', 'j'],\n  data: {\n    category: jsPsych.timelineVariable('category'),\n    correct_response: jsPsych.timelineVariable('correct_key')\n  },\n  timeline_variables: [\n    {image: 'cat.jpg', category: 'animal', correct_key: 'f'},\n    {image: 'car.jpg', category: 'vehicle', correct_key: 'j'},\n    {image: 'dog.jpg', category: 'animal', correct_key: 'f'}\n  ]\n};\n\n\n17.2.4 What Timeline Variables Can’t Do\nTimeline variables have an important limitation: all values must be determined before the experiment begins. This means you cannot:\n\nUse conditional logic (“show this stimulus IF something happened”)\nUse data from previous trials to change displays\nProvide real-time feedback like “Correct!” vs “Incorrect!”\nMake real-time calculations (“make the next trial easier IF they performed poorly”)\n\nThis is where dynamic parameters (functions) become important!",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#functions-as-parameters-the-basic-idea",
    "href": "17-dynamic-html.html#functions-as-parameters-the-basic-idea",
    "title": "17  Dynamic Parameters",
    "section": "17.3 Functions as Parameters: The Basic Idea",
    "text": "17.3 Functions as Parameters: The Basic Idea\nA function is code that runs when called. In jsPsych, when you use a function as a parameter, jsPsych automatically calls that function right before the trial starts and uses the returned value as the parameter.\nlet trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function() {\n    // This code runs right before the trial starts\n    let output = '&lt;p&gt;Hello!&lt;/p&gt;';\n    return output;\n  }\n}\nThis might seem unnecessary now, but the power comes from running code inside the function to decide what to return.\nWhen declaring a function, follow this syntax:\nlet myFunction = function(){\n    // function code goes inside here\n}\nThe function runs when ‘called’ (e.g., myFunction()). To save results, use return to send a value back. We typically create a variable called output and return its contents. This becomes our trial parameter.\nWhen using functions as jsPsych parameters, don’t call the function yourself. We provide the function to jsPsych, and it will call the function when needed:\nstimulus: function() {\n  let output = '&lt;p&gt;Hello!&lt;/p&gt;';\n  return output;\n}\nNotice there are no parentheses after function() at the end. We’re giving jsPsych the function itself, not calling it. jsPsych will call it for us when it’s time to run the trial.\nYou can make almost any trial parameter dynamic. We’ll focus mostly on the stimulus parameter using jsPsychHtmlKeyboardResponse since this creates the most useful complex displays. The same principles apply to other parameters like trial_duration and choices.\nAn important requirement, however, is that your function must return the format jsPsych expects: - stimulus: return a string (HTML text) - trial_duration: return a number (milliseconds) - choices: return an array of strings (like [‘f’, ‘j’])\nUnderstanding what format each parameter expects will help you avoid common errors.",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#two-critical-rules-for-dynamic-parameters",
    "href": "17-dynamic-html.html#two-critical-rules-for-dynamic-parameters",
    "title": "17  Dynamic Parameters",
    "section": "17.4 Two Critical Rules for Dynamic Parameters",
    "text": "17.4 Two Critical Rules for Dynamic Parameters\nThere are two important principles we need to remember if we want to use dynamic parameters.\n\n17.4.1 1. Timeline Variable Syntax Changes\nWhen using timeline variables inside functions, the syntax changes:\n\nInside functions, use: jsPsych.evaluateTimelineVariable('variableName')\nOutside functions, use: jsPsych.timelineVariable('variableName')\n\nUse .evaluateTimelineVariable() to immediately get the value, while .timelineVariable() creates a placeholder for later evaluation.\n\n\n17.4.2 2. Save Dynamic Parameters\nDynamic parameters aren’t automatically saved to your data. Use save_trial_parameters to specify which ones to save:\nlet trial = {\n  type: jsPsychKeyboardResponse,\n  stimulus: \"RED\",\n  choices: [\"r\"],\n  trial_duration: 1000,\n  save_trial_parameters: {\n    choices: true,\n    trial_duration: true\n  }\n}",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#dynamic-stimulus",
    "href": "17-dynamic-html.html#dynamic-stimulus",
    "title": "17  Dynamic Parameters",
    "section": "17.5 Dynamic stimulus",
    "text": "17.5 Dynamic stimulus\n\n17.5.1 A Basic Example\nLet’s start with something familiar. Remember how we used timeline variables to create Stroop stimuli? We might have done something like this:\nlet stroop = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: jsPsych.timelineVariable('stimulus')\n    }\n  ],\n  timeline_variables: [\n    {stimulus: '&lt;p style=\"color: red;\"&gt;RED&lt;/p&gt;'},\n    {stimulus: '&lt;p style=\"color: blue;\"&gt;BLUE&lt;/p&gt;'},\n    {stimulus: '&lt;p style=\"color: green;\"&gt;GREEN&lt;/p&gt;'}\n  ]\n}\nBut what if we wanted more control over how the HTML is built? We can use a function to access timeline variables and construct HTML with more control:\nlet stroop = {\n    type: jsPsychHtmlKeyboardResponse,\n    timeline: [\n        {\n            stimulus: function() {\n                // Get the timeline variables for this trial\n                // For convenience, we'll store them inside variables called 'word' and 'color'\n                let word = jsPsych.evaluateTimelineVariable('word');\n                let color = jsPsych.evaluateTimelineVariable('color');\n\n                // Build the HTML using these variables\n                let output = `&lt;p style='color: ${color}; font-size: 48px;'&gt;${word}&lt;/p&gt;`;\n                \n                // Important: We must return the output variable\n                return output;\n            }\n        }\n    ],\n    timeline_variables: [\n        {word: 'RED', color: 'red'},\n        {word: 'BLUE', color: 'blue'},\n        {word: 'GREEN', color: 'green'},\n        {word: 'RED', color: 'blue'},  // Incongruent\n        {word: 'BLUE', color: 'green'}, // Incongruent\n        {word: 'GREEN', color: 'red'} // Incongruent\n    ]\n}\nWe’ve replaced our stimulus with a function that constructs HTML and returns it via the output variable.\nNotice we’re using template literals (backticks) and ${variable} syntax to insert variables into HTML strings. This is cleaner than concatenating with +.\nWe can expand on this example and change other aspects of the HTML display using the same logic. For instance, we can also update the font size on every trial:\nlet stroop = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable('word');\n        let color = jsPsych.evaluateTimelineVariable('color');\n        let fontSize = jsPsych.evaluateTimelineVariable('fontSize');\n\n         // Build the HTML using these variables\n         let output = `&lt;p style='color: ${color}; font-size: ${fontSize}px;'&gt;${word}&lt;/p&gt;`;\n         return output;\n      }\n    }\n  ],\n  timeline_variables: [\n    {word: 'RED', color: 'red', fontSize: '24'},\n    {word: 'BLUE', color: 'blue', fontSize: '36'},\n    {word: 'GREEN', color: 'green', fontSize: '48'},\n    {word: 'RED', color: 'blue', fontSize: '24'},  // Incongruent\n    {word: 'BLUE', color: 'green', fontSize: '36'}, // Incongruent\n    {word: 'GREEN', color: 'red', fontSize: '48'} // Incongruent\n  ]\n}\n\n\n17.5.2 Adding Logic: Changing the Difficulty\nSo far, we haven’t done anything we couldn’t do without the function. Though, in my opinion this formatting is much cleaner: We can clearly see the variables that we’re changing on each trial and our timeline_variables are not cluttered with extra HTML.\nThe real advantage of functions is introducing complex logic. Let’s make some trials harder by repeating the Stroop stimulus with distractors.\nLet’s try something new with our Stroop stimuli. What if we wanted to make the task harder on some trials? Maybe by repeating the Stroop stimulus multiple times with additional distractors?\nWe need if-else logic: IF a trial is “hard” THEN display the word three times. IF “easy” THEN display once.\nLet’s see how we can accomplish that:\nlet stroop = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable('word');\n        let color = jsPsych.evaluateTimelineVariable('color');\n        let difficulty = jsPsych.evaluateTimelineVariable('difficulty');\n        \n        // set an empty variable for our output\n        let output \n        \n        // change our output HTML depending on what 'difficulty' is\n        if(difficulty === \"hard\"){\n          output = `&lt;p style=\"color:black; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:black; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    `;\n        \n        } else if(difficulty === \"easy\"){\n          output = `&lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    `;\n        \n        }\n\n        // we'll return what is in output\n        return output\n      }\n    }\n  ],\n  timeline_variables: [\n    {word: 'RED', color: 'red', difficulty: 'hard'},\n    {word: 'BLUE', color: 'blue', difficulty: 'hard'},\n    {word: 'RED', color: 'blue',  difficulty: 'hard'},\n    {word: 'BLUE', color: 'red',  difficulty: 'hard'},  \n    \n    {word: 'RED', color: 'red', difficulty: 'easy'},\n    {word: 'BLUE', color: 'blue', difficulty: 'easy'},\n    {word: 'RED', color: 'blue',  difficulty: 'easy'},\n    {word: 'BLUE', color: 'red',  difficulty: 'easy'}  \n  ],\n  randomize_order: true\n}\nIn the function I’ve added some if-else logic to define what the HTML is going to be. Now I’m not inserting the difficulty timeline variable. Instead, I’m checking what it is, and changing the display depending on whether it is set to ‘hard’ or ‘easy’.\nWe can add more conditions if we wanted to this logic. For example, we can make this even more complex by adding a different kind of ‘neutral’ trial that presents “XXXX” in place of the flanking distractors.\nlet stroop = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable('word');\n        let color = jsPsych.evaluateTimelineVariable('color');\n        let difficulty = jsPsych.evaluateTimelineVariable('difficulty');\n        \n        // set an empty variable for our output\n        let output \n        \n        // change our output HTML depending on what 'difficulty' is\n        if(difficulty === \"hard\"){\n          output = `&lt;p style=\"color:black; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:black; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    `;\n        \n        } else if(difficulty === \"easy\"){\n          output = `&lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    `;\n        \n        } else if(difficulty === \"neutral\"){\n           output = `&lt;p style=\"color:black; font-size: 36pt\"&gt;XXXX&lt;/p&gt;\n                    &lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:black; font-size: 36pt\"&gt;XXXX&lt;/p&gt;\n                    `;\n        \n        }\n\n        // we'll return what is in output\n        return output\n      }\n    }\n  ],\n  timeline_variables: [\n    {word: 'RED', color: 'red', difficulty: 'hard'},\n    {word: 'BLUE', color: 'blue', difficulty: 'hard'},\n    {word: 'RED', color: 'blue',  difficulty: 'hard'},\n    {word: 'BLUE', color: 'red',  difficulty: 'hard'},  \n    \n    {word: 'RED', color: 'red', difficulty: 'easy'},\n    {word: 'BLUE', color: 'blue', difficulty: 'easy'},\n    {word: 'RED', color: 'blue',  difficulty: 'easy'},\n    {word: 'BLUE', color: 'red',  difficulty: 'easy'},  \n    \n    {word: 'RED', color: 'red', difficulty: 'neutral'},\n    {word: 'BLUE', color: 'blue', difficulty: 'neutral'},\n    {word: 'RED', color: 'blue',  difficulty: 'neutral'},\n    {word: 'BLUE', color: 'red',  difficulty: 'neutral'} \n  ],\n  randomize_order: true\n}\nAnd let’s see a full example using that code:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Recognition DRM&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet stroop = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: `&lt;p style=\"font-size: 48pt\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable(\"word\");\n        let color = jsPsych.evaluateTimelineVariable(\"color\");\n        let difficulty = jsPsych.evaluateTimelineVariable(\"difficulty\");\n        \n        // set an empty variable for our output\n        let output \n        \n        // change our output HTML depending on what \"difficulty\" is\n        if(difficulty === \"hard\"){\n          output = `&lt;p style=\"color:black;; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:black;; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    `;\n        \n        } else if(difficulty === \"easy\"){\n          output = `&lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    `;\n        \n        } else if(difficulty === \"neutral\"){\n           output = `&lt;p style=\"color:black; font-size: 36pt\"&gt;XXXX&lt;/p&gt;\n                    &lt;p style=\"color:${color}; font-size: 36pt\"&gt;${word}&lt;/p&gt;\n                    &lt;p style=\"color:black; font-size: 36pt\"&gt;XXXX&lt;/p&gt;\n                    `;\n        \n        }\n\n        // we\"ll return what is in output\n        return output\n      }\n    }\n  ],\n  timeline_variables: [\n    {word: \"RED\", color: \"red\", difficulty: \"hard\"},\n    {word: \"BLUE\", color: \"blue\", difficulty: \"hard\"},\n    {word: \"RED\", color: \"blue\",  difficulty: \"hard\"},\n    {word: \"BLUE\", color: \"red\",  difficulty: \"hard\"},  \n    \n    {word: \"RED\", color: \"red\", difficulty: \"easy\"},\n    {word: \"BLUE\", color: \"blue\", difficulty: \"easy\"},\n    {word: \"RED\", color: \"blue\",  difficulty: \"easy\"},\n    {word: \"BLUE\", color: \"red\",  difficulty: \"easy\"},  \n    \n    {word: \"RED\", color: \"red\", difficulty: \"neutral\"},\n    {word: \"BLUE\", color: \"blue\", difficulty: \"neutral\"},\n    {word: \"RED\", color: \"blue\",  difficulty: \"neutral\"},\n    {word: \"BLUE\", color: \"red\",  difficulty: \"neutral\"} \n  ],\n  choices: [\"b\",\"r\"],\n  randomize_order: true,\n  post_trial_gap: 250\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  stroop\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n17.5.3 Adding Logic: Changing the Location\nI’m hoping you can see how this opens up unlimited possibilities!\nLet’s change stimulus location using more complex HTML. I’m using ‘flexbox’ positioning, which provides convenient ways to control alignment in rows, columns, and centering.\nLet’s look at how we can accomplish a stimulus display that positions the stimulus on the left versus right side of the display:\nlet simon = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable('word');\n        let location = jsPsych.evaluateTimelineVariable('location');\n        \n        // set an empty variable for our output\n        let output \n        \n        if (location === \"left\") {\n        \n            output = `\n              &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                  &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                  &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n          `;\n        } else if (location === \"right\") {\n        \n            output = `\n                &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                &lt;/div&gt;\n            `;\n        }\n\n        // we'll return what is in output\n        return output\n      }\n    }\n  ],\n  timeline_variables: [\n    {word: 'LEFT', location: \"left\"},\n    {word: 'RIGHT', location: \"left\"},\n    {word: 'LEFT', location: \"right\"},\n    {word: 'RIGHT', location: \"right\"}\n  ],\n  randomize_order: true\n}\nAnd again, just for kicks, let’s expand that to include a third, center, location. Maybe this would be considered a ‘neutral’ location for this kind of experiment.\nBecause I used the flexbox method, this is pretty easy to just add a third location.\nlet simon = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable('word');\n        let location = jsPsych.evaluateTimelineVariable('location');\n        \n        // set an empty variable for our output\n        let output \n        \n        if (location === \"left\") {\n        \n            output = `\n              &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                  &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                  &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                  &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n          `;\n        } else if (location === \"right\") {\n        \n            output = `\n                &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                &lt;/div&gt;\n            `;\n        } else if (location === \"center\") {\n        \n            output = `\n                &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                &lt;/div&gt;\n            `;\n        }\n\n        // we'll return what is in output\n        return output\n      }\n    }\n  ],\n  timeline_variables: [\n    {word: 'LEFT', location: \"left\"},\n    {word: 'RIGHT', location: \"left\"},\n    {word: 'LEFT', location: \"right\"},\n    {word: 'RIGHT', location: \"right\"},\n    {word: 'LEFT', location: \"center\"},\n    {word: 'RIGHT', location: \"center\"},\n  ],\n  randomize_order: true\n}\nHere’s a full example using that code:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press \"Z\" if the word says \"LEFT\" or \"M\" if the word says \"RIGHT\". Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet simon = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    {\n      stimulus: `&lt;p style=\"font-size: 48pt\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750,\n      post_trial_gap: 250\n    },\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let word = jsPsych.evaluateTimelineVariable(\"word\");\n        let location = jsPsych.evaluateTimelineVariable(\"location\");\n        \n        // set an empty variable for our output\n        let output \n        \n        if (location === \"left\") {\n        \n            output = `\n              &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                  &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                  &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                  &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n          `;\n        } else if (location === \"right\") {\n        \n            output = `\n                &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                &lt;/div&gt;\n            `;\n        } else if (location === \"center\") {\n        \n            output = `\n                &lt;div style=\"display: flex; width: 600px; height: 200px; align-items: center;\"&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                    &lt;div style=\"flex: 1; text-align: center; font-size: 36px;\"&gt;${word}&lt;/div&gt;\n                    &lt;div style=\"flex: 1;\"&gt;&lt;/div&gt;\n                &lt;/div&gt;\n            `;\n        }\n\n        // we\"ll return what is in output\n        return output\n      },\n      choices: [\"z\",\"m\"],\n      post_trial_gap: 250\n    }\n  ],\n  timeline_variables: [\n    {word: \"LEFT\", location: \"left\"},\n    {word: \"RIGHT\", location: \"left\"},\n    {word: \"LEFT\", location: \"right\"},\n    {word: \"RIGHT\", location: \"right\"},\n    {word: \"LEFT\", location: \"center\"},\n    {word: \"RIGHT\", location: \"center\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  simon\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nI want to point out that creating these displays with HTML and CSS takes some trial-and-error. It’s unlikely that you’ll write it exactly correct the first time. Often I will add styling with only a rough idea about how it will look, then fine tune it until I’m happy with it.\nOne strategy for speeding up the trial-and-error is opening the experiment, going to a trial, then inspecting it in the browser. From there, you can click on an element and see the CSS being applied to that element. You can also modify it right in the browser! That means, I could click on one of the divs and add properties like border: solid. This will update how it looks right now in the browser, but won’t change anything permanently in your experiment. You can try different CSS styling until you’re happy with what you see, then go update your experiment code with the styling you want.\nIn fact, that’s what I did while coding this demo. I went through some trial-and-error changing how wide the display was, how tall, adding (then removing) a border around the boxes, etc. This is part of the process.\nHow about one more example?\nFor this one, I’ll use the grid method for creating the display to create different spatial locations for arrows to be placed. I had to do some creative problem-solving for this one because adding post_tria_gap: 250 causes the squares to disappear, when I’d like them to be present the whole time. So I had to make my own “blank” screens with just the grid and nothing placed in them to create a similar effect.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Arrow Experiment!&lt;/p&gt;\n              &lt;p&gt;Press the key that matches the arrow's location: Q (top-left), E (top-right), Z (bottom-left), or C (bottom-right).&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet simon = {\n  type: jsPsychHtmlKeyboardResponse,\n  timeline: [\n    // this display is the fixation\n    {\n      stimulus: ` &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px;\"&gt;+&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 750\n    },\n\n    // this display is blank 250 ms\n   {\n        stimulus: ` &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                    &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px; border: 2px solid black;\"&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                &lt;/div&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 250\n      },\n\n     // target display until response\n    {\n      stimulus: function() {\n        // Get the timeline variables for this trial\n        let arrow = jsPsych.evaluateTimelineVariable(\"arrow\");\n        let location = jsPsych.evaluateTimelineVariable(\"location\");\n        \n        // set an empty variable for our output\n        let output \n        \n        if (location === \"top-left\") {\n            output = `\n              &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px; border: 2px solid black;\"&gt;${arrow}&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n            `;\n        } else if (location === \"top-right\") {\n            output = `\n              &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px; border: 2px solid black;\"&gt;${arrow}&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n            `;\n        } else if (location === \"bottom-left\") {\n            output = `\n              &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px; border: 2px solid black;\"&gt;${arrow}&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n              &lt;/div&gt;\n            `;\n        } else if (location === \"bottom-right\") {\n            output = `\n              &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                  &lt;div&gt;&lt;/div&gt;\n                  &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px; border: 2px solid black;\"&gt;${arrow}&lt;/div&gt;\n              &lt;/div&gt;\n            `;\n        }\n\n        // we\"ll return what is in output\n        return output\n      },\n      choices: [\"q\",\"e\", \"z\", \"c\"]\n    },\n\n    // this display is blank 250 ms\n   {\n        stimulus: ` &lt;div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; grid-template-rows: 1fr 1fr 1fr; width: 300px; height: 300px; gap: 10px;\"&gt;\n                    &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div style=\"display: flex; align-items: center; justify-content: center; font-size: 48px; border: 2px solid black;\"&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                    &lt;div&gt;&lt;/div&gt;\n                    &lt;div style=\"border: 2px solid black;\"&gt;&lt;/div&gt;\n                &lt;/div&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 250\n      }\n  ],\n  timeline_variables: [\n    {arrow: \"↖\", location: \"top-left\"},\n    {arrow: \"↗\", location: \"top-left\"},\n    {arrow: \"↙\", location: \"top-left\"},\n    {arrow: \"↘\", location: \"top-left\"},\n\n    {arrow: \"↖\", location: \"top-right\"},\n    {arrow: \"↗\", location: \"top-right\"},\n    {arrow: \"↙\", location: \"top-right\"},\n    {arrow: \"↘\", location: \"top-right\"},\n\n    {arrow: \"↖\", location: \"bottom-left\"},\n    {arrow: \"↗\", location: \"bottom-left\"},\n    {arrow: \"↙\", location: \"bottom-left\"},\n    {arrow: \"↘\", location: \"bottom-left\"},\n\n    {arrow: \"↖\", location: \"bottom-right\"},\n    {arrow: \"↗\", location: \"bottom-right\"},\n    {arrow: \"↙\", location: \"bottom-right\"},\n    {arrow: \"↘\", location: \"bottom-right\"}\n  ],\n  randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  simon\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n17.5.4 Adding Logic: Presenting Feedback\nReturning to the idea that functions make our stimulus dynamic: this means we can change things on-the-fly based on what happened in previous trials.\nThis flexibility is useful in many ways, but the most common use case is adaptive feedback where we tell participants how they performed on the previous trial.\nWe already covered how to access data from previous trials in the last chapter. Now we’ll combine that knowledge with dynamic stimulus functions to create different kinds of performance feedback like accuracy messages and response time alerts.\n\n17.5.4.1 Simple Accuracy\nLet’s start with the simplest kind of accuracy feedback, which simply tells participants whether they were correct or incorrect.\nI’ll do this in a couple of steps to make it clear what is happening. First, to make it easy to find, we’ll first store the accuracy in our data using the on_finish parameter (we learned about this in the previous chapter).\nlet stroop = {\n    type: jsPsychHtmlKeyboardResponse,\n    timeline: [\n        {\n            stimulus: function() {\n                // Get the timeline variables for this trial\n                // For convenience, we'll store them inside variables called 'word' and 'color'\n                let word = jsPsych.evaluateTimelineVariable('word');\n                let color = jsPsych.evaluateTimelineVariable('color');\n\n                // Build the HTML using these variables\n                let output = `&lt;p style='color: ${color}; font-size: 48px;'&gt;${word}&lt;/p&gt;`;\n                \n                // Important: We must return the output variable\n                return output;\n            },\n            choices: [\"r\", \"b\"],\n            on_finish: function(data) {\n                // First, determine accuracy for this trial\n                data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n            }\n        }\n    ],\n    timeline_variables: [\n        {word: 'RED', color: 'red', correct_response: \"r\"},\n        {word: 'BLUE', color: 'red', correct_response: \"r\"},\n        {word: 'RED', color: 'blue', correct_response: \"b\"},\n        {word: 'BLUE', color: 'blue', correct_response: \"b\"},\n    ]\n}\nNow at the end of each trial there will be a data parameter called correct with a value of true or false.\nTo add feedback, we add another trial component like we always do. BUT now we have to check what the accuracy was on the previous trial. Remember: jsPsych treats every event that happens as a ‘trial’ and stores a row of data for it. That means on the feedback trial, we need to look back one trial to see the accuracy and change the feedback depending on accuracy.\nlet stroop = {\n    type: jsPsychHtmlKeyboardResponse,\n    timeline: [\n        {\n            stimulus: function() {\n                // Get the timeline variables for this trial\n                // For convenience, we will store them inside variables called \"word\" and \"color\"\n                let word = jsPsych.evaluateTimelineVariable(\"word\");\n                let color = jsPsych.evaluateTimelineVariable(\"color\");\n\n                // Build the HTML using these variables\n                let output = `&lt;p style=\"color: ${color}; font-size: 48px;\"&gt;${word}&lt;/p&gt;`;\n                \n                // Important: We must return the output variable\n                return output;\n            },\n            choices: [\"r\", \"b\"],\n            on_finish: function(data) {\n                // First, determine accuracy for this trial\n                data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n            }\n        },\n        // This is our feedback trial\n        {\n          stimulus: function() {\n              let output\n          \n              // get all previous data\n              let all_data = jsPsych.data.get();\n              \n              // filter it to get the last trial\n              let last_trial = all_data.last(1).trials\n\n              console.log(last_trial)\n              \n              // look at the `correct` parameter to get accuracy\n              // note: filtering ALWAYS returns an array, even if it just has one thing in it\n              let accuracy = last_trial[0].correct\n              \n              // check accuracy\n              if(accuracy === true){\n                  output = `&lt;p style=\"font-size:36px; color:MediumSeaGreen\"&gt;CORRECT!&lt;/p&gt;`\n              } else {\n                  output = `&lt;p style=\"font-size:36px; color:Tomato\"&gt;INCORRECT!&lt;/p&gt;`\n              }\n              \n              return output\n          },\n          choices: \"NO_KEYS\",\n          trial_duration: 1000\n        }\n    ],\n    timeline_variables: [\n        {word: \"RED\", color: \"red\", correct_response: \"r\"},\n        {word: \"BLUE\", color: \"red\", correct_response: \"r\"},\n        {word: \"RED\", color: \"blue\", correct_response: \"b\"},\n        {word: \"BLUE\", color: \"blue\", correct_response: \"b\"}\n    ],\n    data: {\n      word: jsPsych.timelineVariable(\"word\"),\n      color: jsPsych.timelineVariable(\"color\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n    randomize_order: true\n}\nSome important little ‘catches’ here that may throw you off. When we filter the data to only get the last trial, it returns an array of trials. In this case, the array only has one thing in it, the last trial, but we still have use the array reference to get the data inside it. That’s why I’ve used last_trial[0] to access the first thing in the array.\nThe nice thing is that this generalizes. So, if I had called let last_trials = all_data.last(2), that would get me the last two trials. In which case, I could access the data from two trials ago with last_trials[0] or the last trial with last_trials[1].\nNow, let’s see this example in action:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet stroop = {\n    type: jsPsychHtmlKeyboardResponse,\n    timeline: [\n        {\n            stimulus: function() {\n                // Get the timeline variables for this trial\n                // For convenience, we will store them inside variables called \"word\" and \"color\"\n                let word = jsPsych.evaluateTimelineVariable(\"word\");\n                let color = jsPsych.evaluateTimelineVariable(\"color\");\n\n                // Build the HTML using these variables\n                let output = `&lt;p style=\"color: ${color}; font-size: 48px;\"&gt;${word}&lt;/p&gt;`;\n                \n                // Important: We must return the output variable\n                return output;\n            },\n            choices: [\"r\", \"b\"],\n            on_finish: function(data) {\n                // First, determine accuracy for this trial\n                data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n            }\n        },\n        // This is our feedback trial\n        {\n          stimulus: function() {\n              let output\n          \n              // get all previous data\n              let all_data = jsPsych.data.get();\n              \n              // filter it to get the last trial\n              let last_trial = all_data.last(1).trials\n\n              console.log(last_trial)\n              \n              // look at the `correct` parameter to get accuracy\n              // note: filtering ALWAYS returns an array, even if it just has one thing in it\n              let accuracy = last_trial[0].correct\n              \n              // check accuracy\n              if(accuracy === true){\n                  output = `&lt;p style=\"font-size:36px; color:MediumSeaGreen\"&gt;CORRECT!&lt;/p&gt;`\n              } else {\n                  output = `&lt;p style=\"font-size:36px; color:Tomato\"&gt;INCORRECT!&lt;/p&gt;`\n              }\n              \n              return output\n          },\n          choices: \"NO_KEYS\",\n          trial_duration: 1000\n        }\n    ],\n    timeline_variables: [\n        {word: \"RED\", color: \"red\", correct_response: \"r\"},\n        {word: \"BLUE\", color: \"red\", correct_response: \"r\"},\n        {word: \"RED\", color: \"blue\", correct_response: \"b\"},\n        {word: \"BLUE\", color: \"blue\", correct_response: \"b\"},\n    ],\n    data: {\n      word: jsPsych.timelineVariable(\"word\"),\n      color: jsPsych.timelineVariable(\"color\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n    randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  stroop\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n17.5.4.2 Corrective Feedback\nWe can access all parts of data and make our feedback as comprehensive as we’d like. For instance, if we were providing practice trials, we might want to provide corrective feedback to make sure participants understood the instructions:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet stroop = {\n    type: jsPsychHtmlKeyboardResponse,\n    timeline: [\n        {\n            stimulus: function() {\n                // Get the timeline variables for this trial\n                // For convenience, we will store them inside variables called \"word\" and \"color\"\n                let word = jsPsych.evaluateTimelineVariable(\"word\");\n                let color = jsPsych.evaluateTimelineVariable(\"color\");\n\n                // Build the HTML using these variables\n                let output = `&lt;p style=\"color: ${color}; font-size: 48px;\"&gt;${word}&lt;/p&gt;`;\n                \n                // Important: We must return the output variable\n                return output;\n            },\n            choices: [\"r\", \"b\"],\n            on_finish: function(data) {\n                // First, determine accuracy for this trial\n                data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n            }\n        },\n        // This is our feedback trial\n        {\n          stimulus: function() {\n              let output\n          \n              // get all previous data\n              let all_data = jsPsych.data.get();\n              \n              // filter it to get the last trial\n              let last_trial = all_data.last(1).trials\n\n              console.log(last_trial)\n              \n              // look at the `correct` parameter to get accuracy\n              // note: filtering ALWAYS returns an array, even if it just has one thing in it\n              let accuracy = last_trial[0].correct\n              let word = last_trial[0].word\n              let color = last_trial[0].color\n              let correct_response = last_trial[0].correct_response\n\n              // check accuracy\n              if(accuracy === true){\n                  output = `&lt;p style=\"font-size:36px; color:MediumSeaGreen\"&gt;CORRECT!&lt;/p&gt;\n                            &lt;p&gt;Press any key to continue&lt;/p&gt;`\n              } else {\n                  output = `&lt;p style=\"font-size:36px; color:Tomato\"&gt;INCORRECT!&lt;/p&gt;\n                            &lt;p&gt;The correct response for &lt;span style=\"color:${color}\"&gt;${word}&lt;/span&gt; was \"${correct_response}\"&lt;/p&gt;\n                            &lt;p&gt;Remember: respond to the &lt;em&gt;color&lt;/em&gt; and not the word&lt;/p&gt;\n                            &lt;p&gt;Press any key to continue&lt;/p&gt;`\n              }\n              \n              return output\n          },\n          choices: \"ALL_KEYS\"\n        }\n    ],\n    timeline_variables: [\n        {word: \"RED\", color: \"red\", correct_response: \"r\"},\n        {word: \"BLUE\", color: \"red\", correct_response: \"r\"},\n        {word: \"RED\", color: \"blue\", correct_response: \"b\"},\n        {word: \"BLUE\", color: \"blue\", correct_response: \"b\"},\n    ],\n    data: {\n      word: jsPsych.timelineVariable(\"word\"),\n      color: jsPsych.timelineVariable(\"color\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n    randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  stroop\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n17.5.4.3 Reaction Time Feedback\nWe can of course provide any kind of feedback we’d like. If an experiment emphasizes speed and accuracy, you may want to say whether they were too slow. You can do that by accessing the rt data.\nWe’ll just need some more complicated logic to check both accuracy and speed, then change the display based on both. Here, I’ll first check whether it was too slow, and display that regardless of accuracy. If they weren’t too slow, then I’ll display their accuracy.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet stroop = {\n    type: jsPsychHtmlKeyboardResponse,\n    timeline: [\n        {\n            stimulus: function() {\n                // Get the timeline variables for this trial\n                // For convenience, we will store them inside variables called \"word\" and \"color\"\n                let word = jsPsych.evaluateTimelineVariable(\"word\");\n                let color = jsPsych.evaluateTimelineVariable(\"color\");\n\n                // Build the HTML using these variables\n                let output = `&lt;p style=\"color: ${color}; font-size: 48px;\"&gt;${word}&lt;/p&gt;`;\n                \n                // Important: We must return the output variable\n                return output;\n            },\n            choices: [\"r\", \"b\"],\n            on_finish: function(data) {\n                // First, determine accuracy for this trial\n                data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n            }\n        },\n        // This is our feedback trial\n        {\n          stimulus: function() {\n              let output\n          \n              // get all previous data\n              let all_data = jsPsych.data.get();\n              \n              // filter it to get the last trial\n              let last_trial = all_data.last(1).trials\n\n              console.log(last_trial)\n              \n              // look at the `correct` parameter to get accuracy\n              // note: filtering ALWAYS returns an array, even if it just has one thing in it\n              let accuracy = last_trial[0].correct\n              let rt = last_trial[0].rt\n\n              // check rt first\n              if(rt &gt; 2000){\n                  output = `&lt;p style=\"font-size:36px; color:MediumOrchid\"&gt;Too Slow! Respond faster!&lt;/p&gt;`\n              } else if(accuracy === true){\n                  output = `&lt;p style=\"font-size:36px; color:MediumSeaGreen\"&gt;CORRECT!&lt;/p&gt;`\n              } else {\n                  output = `&lt;p style=\"font-size:36px; color:Tomato\"&gt;INCORRECT!&lt;/p&gt;`\n              }\n              \n              return output\n          },\n          choices: \"NO_KEYS\",\n          trial_duration: 1000\n        }\n    ],\n    timeline_variables: [\n        {word: \"RED\", color: \"red\", correct_response: \"r\"},\n        {word: \"BLUE\", color: \"red\", correct_response: \"r\"},\n        {word: \"RED\", color: \"blue\", correct_response: \"b\"},\n        {word: \"BLUE\", color: \"blue\", correct_response: \"b\"},\n    ],\n    data: {\n      word: jsPsych.timelineVariable(\"word\"),\n      color: jsPsych.timelineVariable(\"color\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n    randomize_order: true\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  stroop\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#other-parameters",
    "href": "17-dynamic-html.html#other-parameters",
    "title": "17  Dynamic Parameters",
    "section": "17.6 Other Parameters",
    "text": "17.6 Other Parameters\nThe general principals you’ve learned throughout this chapter can be applied to more than just the stimulus parameter. In fact, most parameters can become dynamic by replacing it with a function.\nHere are a couple more examples of replacing parameters with functions.\nRemember: We need to save these trial parameters if we’re making them dynamic, otherwise we won’t know what they were on every trial!\n\n17.6.1 Trial Duration\nSometimes, we want to make our experiment unpredictable in some ways, like randomizing the delay between trials. We could do this by randomizing the trial_duration of the fixation cross. This uses a generic math function that generates a number between X and Y:\nlet trial = {\n  type: jsPsychKeyboardResponse,\n  stimulus: `&lt;p style=\"font-size:48px; color:red;\"&gt;GREEN&lt;/p&gt;`,\n  trial_duration: function(){\n    return Math.floor(Math.random() * (2000 - 1000 + 1) + 1000);\n  },\n  choices: ['r', 'b', 'g', 'y'],\n  save_trial_parameters: {\n    trial_duration: true\n  }\n}\nOr I could randomly select one from a set:\nlet trial = {\n  type: jsPsychKeyboardResponse,\n  stimulus: `&lt;p style=\"font-size:48px; color:red;\"&gt;GREEN&lt;/p&gt;`,\n  trial_duration: function(){\n    // set of durations\n    let durations = [500,750,1000,1250,1500,1750,2000]\n    \n    // randomize the order of the array\n    durations = jsPsych.randomization.shuffle(durations)\n    \n    // select the first one\n    let selected_duration = durations[0]\n  \n    return selected_duration\n  },\n  choices: ['r', 'b', 'g', 'y'],\n  save_trial_parameters: {\n    trial_duration: true\n  }\n}\n\n\n17.6.2 Choices\nWe could also make our choices dynamic. For instance, when we use the button plugin, we might want to randomize the order of choices, so that it differs on every trial. We could do that with a function.\nWe do need to keep in mind though, that the choice parameter expects an array [ ], so no matter what we do in the function, we need to make sure an array is returned at the end.\ntrial = {\n  type: jsPsychHtmlButtonResponse,\n  stimulus: `&lt;p style=\"font-size:48px; color:red;\"&gt;GREEN&lt;/p&gt;`,\n  choices: function(){\n    // start with the set of response options\n    let options = ['Red', 'Green', 'Blue', 'Yellow'];\n    \n    // randomize the order of the array\n    options = jsPsych.randomization.shuffle(options);\n    \n    // return the full array\n    return options\n  },\n  prompt: \"&lt;p&gt;What color is the ink?&lt;/p&gt;\",\n  save_trial_parameters: {\n    choices: true\n  }\n};\nHere’ a full example with randomized button orders:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet stroop ={\n  timeline: [\n      {\n        type: jsPsychHtmlButtonResponse,\n        stimulus: function(){\n            return  `&lt;p style=\"font-size:48px; color:${jsPsych.evaluateTimelineVariable(\"color\")};\"&gt;${jsPsych.evaluateTimelineVariable(\"word\")}&lt;/p&gt;`\n        },\n        choices: function(){\n          console.log(this.data)\n          // start with the set of response options\n          let options = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\n          \n          // randomize the order of the array\n          options = jsPsych.randomization.shuffle(options);\n          \n          // return the full array\n          return options\n        },\n        prompt: \"&lt;p&gt;What color is the ink?&lt;/p&gt;\",\n        post_trial_gap: 250\n      }\n  ],\n  timeline_variables: [\n    {word: \"RED\", color: \"red\"},\n    {word: \"BLUE\", color: \"blue\"},\n    {word: \"GREEN\", color: \"yellow\"},\n    {word: \"RED\", color: \"green\"}\n  ],\n  randomize_order: true,\n  save_trial_parameters: {\n    choices: true\n  }\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  stroop\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nWe could also make it dependent on how they responded on a previous trial:",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#prompt",
    "href": "17-dynamic-html.html#prompt",
    "title": "17  Dynamic Parameters",
    "section": "17.7 Prompt",
    "text": "17.7 Prompt\nWe can also update the prompt that appears below each stimulus in a dynamic way. Let’s try providing performance feedback below the stimulus, so they know how they’ve been performing on average.\nThis one is a bit complicated, so first, here’s the prompt function alone. We’re chaining together filter methods to restrict which trials are retrieved and perform some calculations on the RTs and accuracy rates.\nThen, I’ll use if-then logic to change what is returned.\nprompt: function() {\n        // Get the last 5 trials (excluding practice/instruction trials)\n        let recentTrials = jsPsych.data.get()\n            .filter({task: 'stroop'})\n            .last(5);\n\n        // Wait until there is at least 5 trials before giving feedback\n        if (recentTrials.count() &lt; 5) {\n            // if you call return early none of the code below will run!\n            return \"&lt;p&gt;Press R for red, G for green, B for blue, Y for yellow&lt;/p&gt;\";\n        }\n\n        // Calculate average RT and accuracy\n        let avgRT = Math.round(recentTrials.select('rt').mean());\n        let accuracy = (recentTrials.filter({correct: true}).count() / 5) * 100;\n\n        // Determine feedback message\n        let feedback = \"\";\n        if (accuracy &lt; 80) {\n            feedback = \"[Too many errors - focus on accuracy!]\";\n        } else if (avgRT &gt; 1000) {\n            feedback = \"[Too slow - try to respond faster!]\";\n        } else if (accuracy &gt;= 90 && avgRT &lt;= 700) {\n            feedback = \"[Great job - fast and accurate!]\";\n        } else if (accuracy &gt;= 85) {\n            feedback = \"[Good accuracy!]\";\n        } else {\n            feedback = \"[Keep it up!]\";\n        }\n\n        return `&lt;p&gt;Last 5 trials: ${avgRT}ms average, ${accuracy.toFixed(0)}% correct ${feedback}&lt;/p&gt;\n                &lt;p&gt;Press R for red, G for green, B for blue, Y for yellow&lt;/p&gt;`;\n    }\nLet’s see how that looks in a full example:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Simon Task&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n \n// 2. Define our trials\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet stroop ={\n  timeline: [\n      {\n          type: jsPsychHtmlKeyboardResponse,\n          stimulus: function(){\n                        let output = `&lt;p style=\"font-size: 48px; color: ${jsPsych.evaluateTimelineVariable(\"color\")};\"&gt;\n                                        ${jsPsych.evaluateTimelineVariable(\"word\")}\n                                      &lt;/p&gt;`\n                        return output\n          },\n          prompt: function() {\n              // Get the last 5 trials (excluding practice/instruction trials)\n              let recentTrials = jsPsych.data.get()\n                  .filter({task: \"stroop\"})\n                  .last(5);\n      \n              if (recentTrials.count() &lt; 5) {\n                  return \"&lt;p&gt;Press R for red, G for green, B for blue, Y for yellow&lt;/p&gt;\";\n              }\n      \n              // Calculate average RT and accuracy\n              let avgRT = Math.round(recentTrials.select(\"rt\").mean());\n              let accuracy = (recentTrials.filter({correct: true}).count() / 5) * 100;\n      \n              // Determine feedback message\n              let feedback = \"\";\n              if (accuracy &lt; 80) {\n                  feedback = \"[Too many errors - focus on accuracy!]\";\n              } else if (avgRT &gt; 1000) {\n                  feedback = \"[Too slow - try to respond faster!]\";\n              } else if (accuracy &gt;= 90 && avgRT &lt;= 700) {\n                  feedback = \"[Great job - fast and accurate!]\";\n              } else if (accuracy &gt;= 85) {\n                  feedback = \"[Good accuracy!]\";\n              } else {\n                  feedback = \"[Keep it up!]\";\n              }\n      \n              return `&lt;p&gt;Last 5 trials: ${avgRT}ms average, ${accuracy.toFixed(0)}% correct ${feedback}&lt;/p&gt;\n                      &lt;p&gt;Press R for red, G for green, B for blue, Y for yellow&lt;/p&gt;`;\n          },\n          choices: [\"r\", \"g\", \"b\", \"y\"],\n          post_trial_gap: 500,\n          data: {\n              task: \"stroop\",\n              word: jsPsych.timelineVariable(\"word\"),\n              color: jsPsych.timelineVariable(\"color\")\n          },\n          on_finish: function(data) {\n              let colorKeyMap = {\n                  \"r\": \"red\",\n                  \"g\": \"green\", \n                  \"b\": \"blue\",\n                  \"y\": \"yellow\"\n              };\n              data.correct = colorKeyMap[data.response] === data.color;\n          }\n      }\n  ],\n  timeline_variables: [\n    {word: \"RED\", color: \"red\"},\n    {word: \"RED\", color: \"blue\"},\n    {word: \"RED\", color: \"green\"},\n    {word: \"RED\", color: \"yellow\"},\n\n    {word: \"BLUE\", color: \"red\"},\n    {word: \"BLUE\", color: \"blue\"},\n    {word: \"BLUE\", color: \"green\"},\n    {word: \"BLUE\", color: \"yellow\"},\n\n    {word: \"GREEN\", color: \"red\"},\n    {word: \"GREEN\", color: \"blue\"},\n    {word: \"GREEN\", color: \"green\"},\n    {word: \"GREEN\", color: \"yellow\"},\n\n    {word: \"YELLOW\", color: \"red\"},\n    {word: \"YELLOW\", color: \"blue\"},\n    {word: \"YELLOW\", color: \"green\"},\n    {word: \"YELLOW\", color: \"yellow\"},\n  ],\n  randomize_order: true,\n  repetitions: 4\n}\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  welcome,\n  stroop\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "17-dynamic-html.html#summary",
    "href": "17-dynamic-html.html#summary",
    "title": "17  Dynamic Parameters",
    "section": "17.8 Summary",
    "text": "17.8 Summary\nDynamic parameters offer significant advantages over static values. By replacing parameters with functions, you can build adaptive experiments that provide personalized feedback, adjust difficulty based on performance, and create complex HTML displays that update with timeline variables. This would not be possible with pre-defined timeline variables alone.\nThe key insight is straightforward: any jsPsych parameter can become dynamic by replacing it with a function that returns the appropriate format. This transforms your static experiment into one that responds to individual participant behaviour. Keep three important points in mind if you’re adding dynamic parameters: use jsPsych.evaluateTimelineVariable() within functions, save any dynamic parameters you want to analyze, and ensure your functions return values in the format jsPsych expects.",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Dynamic Parameters</span>"
    ]
  },
  {
    "objectID": "18-L07.html",
    "href": "18-L07.html",
    "title": "18  Lab 7: Spatial Attention",
    "section": "",
    "text": "18.1 Research in Brief: The Posner Cuing Paradigm",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Lab 7: Spatial Attention</span>"
    ]
  },
  {
    "objectID": "18-L07.html#research-in-brief-the-posner-cuing-paradigm",
    "href": "18-L07.html#research-in-brief-the-posner-cuing-paradigm",
    "title": "18  Lab 7: Spatial Attention",
    "section": "",
    "text": "18.1.1 The Research Area\nAttention refers to a family of cognitive mechanisms that combine to help us select, modulate, and sustain focus on information that might be most relevant for behavior. Our ability to process information is capacity-limited, meaning we can handle only small amounts of information at a time. Attention functions as an essential gatekeeper, allowing us to select and prioritize some information over other information when stimuli compete for our processing resources.\nAttention research addresses fundamental questions about cognitive control and information processing. How do we decide what to focus on among competing stimuli? Can we prepare our attention for events before they occur? What mechanisms allow us to shift attention efficiently between different locations or objects? Understanding attention has important implications for performance in complex tasks, learning efficiency, and disorders affecting cognitive control.\nThe study of attention also connects to many practical applications in areas requiring sustained focus and rapid responses, such as air traffic control, driving, medical diagnosis, and educational settings. To investigate these attention mechanisms systematically, researchers have developed experimental paradigms that can isolate and measure different aspects of attentional processing under controlled conditions.\n\n\n18.1.2 Types of Attention\nAttention operates through several distinct but interconnected systems. Selective attention allows us to focus on relevant information while ignoring distractors, like following a conversation at a noisy party. Divided attention involves simultaneously processing multiple streams of information, such as listening to music while reading. Sustained attention refers to maintaining focus over extended periods, as required during long monitoring tasks.\nSpatial attention represents a particularly important form of selective attention that involves directing cognitive resources to specific locations in visual space. Unlike other forms of attention that focus on particular objects or features, spatial attention operates like a mental spotlight that can be moved around the visual field to enhance processing at specific locations. This system allows us to prepare for events that might occur at particular spatial positions, even before any stimuli appear there.\nResearch distinguishes between two primary mechanisms for controlling spatial attention: endogenous attention that we consciously direct based on our goals and expectations, and exogenous attention that is automatically captured by sudden or salient stimuli in the environment. These systems have different temporal characteristics and serve complementary functions in attention control.\n\n\n18.1.3 The Research Design\nThe spatial cuing paradigm developed by Posner (1980) uses a within-subjects experimental design to examine how different types of cues influence the allocation of spatial attention. Participants respond to target stimuli that appear at different locations following various types of spatial cues.\nStimulus Presentation: Participants fixate on a central point while viewing a display containing two or more potential target locations, typically boxes positioned to the left and right of fixation. Before the target appears, a cue indicates where the target is likely to appear.\nCue Types: The paradigm employs two distinct cuing conditions. Endogenous cues are symbolic indicators (such as central arrows) that point toward the likely target location. These cues require interpretation and voluntary attention shifts. Exogenous cues are sudden onset stimuli (such as brief flashes or brightening) that appear at the potential target locations themselves, automatically capturing attention.\nTask Requirements: Participants must detect or identify target stimuli (such as asterisks or letters) that appear at cued or uncued locations. They respond as quickly as possible while maintaining accuracy, typically by pressing a key when they detect the target.\nThe design manipulates cue validity: valid trials where cues correctly predict target location (typically 75% of trials), invalid trials where cues incorrectly predict target location, and neutral trials where cues provide no spatial information.\nThe within-subjects design allows researchers to compare response times across different cuing conditions within the same participants. Each person experiences valid, invalid, and neutral trials for both endogenous and exogenous cues at various cue-target intervals. Each participant acts as their own ‘control’. This approach controls for individual differences in overall response speed and detection ability while isolating the specific effects of spatial cuing on attention allocation.\n\n\n18.1.4 Key Findings\nThe within-subjects comparisons have revealed different temporal patterns for endogenous and exogenous spatial attention. Endogenous cuing showed benefits for valid trials (faster responses to targets at cued locations) and costs for invalid trials (slower responses to targets at uncued locations) that developed gradually over 300-500 milliseconds and remained stable for several seconds. This pattern reflects the voluntary, sustained nature of goal-directed attention.\nExogenous cuing produced rapid attention capture with benefits peaking around 150 milliseconds, followed by inhibition of return at longer intervals (typically after 300-500 milliseconds) where responses became slower to targets appearing at previously cued locations. This biphasic pattern reflects the automatic, transient nature of stimulus-driven attention. Inhibition of return may serve an adaptive function by preventing attention from repeatedly returning to the same location during visual search.\nThe magnitude of cuing effects typically ranges from 20-50 milliseconds for response time differences between valid and invalid trials, with endogenous cues showing larger and more sustained effects than exogenous cues at optimal intervals. These effects remain consistent across participants despite individual differences in overall response speed.\n\n\n18.1.5 Implications\nThe distinct temporal profiles of endogenous and exogenous cuing provide behavioural evidence for separate attention control systems. This behavioural evidence is supported by neuroimaging and neurophysiology studies showing that endogenous attention involves dorsal frontoparietal networks associated with goal-directed control and requires time to implement but can be maintained strategically. Exogenous attention involves ventral networks associated with stimulus-driven reorienting, showing rapid onset followed by active suppression.\nThese findings support dual-process theories of attention and the spotlight metaphor of spatial attention, demonstrating that attention can be directed to specific locations in advance of stimulus presentation. The consistent patterns across participants and laboratories suggest these represent fundamental properties of human attention rather than task-specific effects. Inhibition of return may serve an adaptive function by helping us avoid checking the same locations repeatedly when searching for objects, such as when trying to find a friend in a crowd.\nThe Posner cueing paradigm exemplifies how carefully designed experimental methods can reveal fundamental cognitive mechanisms. Its elegant simplicity allows researchers to isolate specific attention processes while maintaining experimental control, making it a model for how laboratory tasks can provide insights into complex mental operations. The paradigm continues to be widely used across laboratories, generating reliable findings that have built a cumulative knowledge base about spatial attention mechanisms.\n\n\n18.1.6 Further Reading\nChun, M. M., & Most, S. B. (2021). External attention. In Cognition.\nJensen, M. S., Yao, R., Street, W. N., & Simons, D. J. (2011). Change blindness and inattentional blindness. Wiley Interdisciplinary Reviews: Cognitive Science, 2(5), 529-546.\nMost, S. B., Chun, M. M., Widders, D. M., & Zald, D. H. (2005). Attentional rubbernecking: Cognitive control and personality in emotion-induced blindness. Psychonomic Bulletin & Review, 12, 654-661.\nPosner, M. I. (1980). Orienting of attention. Quarterly Journal of Experimental Psychology, 32(1), 3-25.\nRöer, J. P., & Cowan, N. (2021). A preregistered replication and extension of the cocktail party phenomenon: One’s name captures attention, unexpected words do not. Journal of Experimental Psychology: Learning, Memory, and Cognition, 47(2), 234.",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Lab 7: Spatial Attention</span>"
    ]
  },
  {
    "objectID": "18-L07.html#program-a-posner-cuing-task",
    "href": "18-L07.html#program-a-posner-cuing-task",
    "title": "18  Lab 7: Spatial Attention",
    "section": "18.2 Program a Posner Cuing Task",
    "text": "18.2 Program a Posner Cuing Task\nIn this exercise, we will program the Posner Cuing task with two spatial locations: left and right sides of the screen. We will focus on creating the exogenous cue condition. On each trial, a cue will flash at either the right or left location, followed by a target X appearing at either the left or right location. The task is to indicate which location the target appears in.\nThe cue will be 75% valid, meaning that on 75% of trials, the cue indicates the correct location where the target will appear. We will manipulate the stimulus onset asynchrony (SOA), which refers to the time interval between the cue and the target. We will test three different SOAs designed to capture the temporal dynamics of exogenous attention: short (100ms), medium (300ms), and long (800ms).\nThese specific durations allow us to observe the complete profile of exogenous attention effects. At 100ms, we expect to see automatic attention capture with faster responses to validly cued locations. At 300ms, the initial facilitation effect diminishes.\nThe initial folder contains the standard jsPsych boilerplate files with no additional components added yet.\n\n📂 L07\n├──  📄 index.html\n├──  📄 exp.js\n├──  📄 style.css\n└──  📂 jspsych\n\n\n18.2.1 Initiate JsPsych\nLet’s begin by initializing jsPsych with the basic setup we typically need. In the HTML index page, all necessary files have been linked: the jsPsych core files, our exp.js file, our style.css file, and the two plugins required for this experiment (the instructions plugin and the HTML keyboard response plugin).\nWe will add an instructions trial that can be populated with task instructions later, and conclude the experiment with a save data trial to store participant responses.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.2 Create an Outline\nOne of the ways I’ll get started on a new programming task is by creating an outline of what needs to happen on every trial.\nFor the Posner cuing paradigm, we need a (1) fixation (2) cue (3) target. In all three displays there should be two boxes, one on the left and one on the right. The fixation cross won’t have a box around it, but it will stay on screen the entire time.\nHere’s how I’d start. Before creating all the complicated displays, I create a simple outline with placeholders. I also added comments inside the timeline to help keep it organized. Remember that the browser does not care about white space and comments are ignored. So I can keep my code organized by labeling the parts of the trial.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"fixation\",\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"cue\",\n      trial_duration: 300,\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"target\",\n      choices: [\"a\", \"l\"]\n    }\n  ]\n\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.3 Create an HTML display\nNow, let’s create our display with three locations: left, center, and right. First, we’ve replaced our stimulus for the target display with a function. Remember that we’re going to need some if-else logic to change where the cue and target appear, so we’ll need a function to do that.\nNext, we use flexbox at two levels to achieve the layout we need for the Posner cuing task. I highly recommend reviewing how flexbox works. It is a very convenient way to set to get complex layouts. You can read more about it here: https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nHere’s a breakdown of what we’ve done in this step.\nThe outer container uses display: flex with justify-content: space-between to distribute the three locations evenly across the 600px width. The space-between property pushes the left and right boxes to the edges while centering the middle location. We add margin: 0 auto to center the entire 600px container on the page.\nEach of the three locations also uses display: flex with both align-items: center and justify-content: center. This creates perfect centering for any text content within each box. The align-items: center handles vertical centering, while justify-content: center handles horizontal centering.\nThis nested flexbox approach gives us precise control over both the spacing between locations and the positioning of content within each location, which is essential for the spatial precision required in attention experiments.\nTwo Notes: First, keep in mind that I have some intuition about how large the divs should be, but you may go through some trial-and-error before you settle on CSS that you’re happy with. That is perfectly normal.\nSecond, I decided to write the CSS in the external stylesheet because I know that I am going to have to repeat this code a few times. Therefore, it makes sense to write it once in the stylesheet and refer to the classes in the HTML. There are three classes, one for the container, one for the location boxes, and the third is for the border. I had to separate that out because not all the boxes have borders.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"fixation\",\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: \"cue\",\n      trial_duration: 300,\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;L&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;C&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;R&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ]\n\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n .posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid black;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.4 Copy the HTML across trials\nNow that we have a display we’re happy with, let’s copy that across the fixation and cue parts and see how it looks.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;L&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;CUE&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;R&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 300,\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;L&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;C&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;R&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ]\n\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n .posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid black;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.5 Add Timeline Variables\nBefore we can add the logic to update the display, we’re going to need our timeline_variables that are going to control the logic.\nTo control the cue location, we’ll need a timeline variable that indicates left or right. To control the target location, we’ll need a timeline variable that indicates whether it is left or right.\nFor now, we’re just going to add one for each possible left/right combination.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;L&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;CUE&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;R&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 300,\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;L&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;C&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;R&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ],\n  timeline_variables: [\n    {cue_location: \"left\", target_location: \"left\"},\n    {cue_location: \"right\", target_location: \"right\"},\n    {cue_location: \"left\", target_location: \"right\"},\n    {cue_location: \"right\", target_location: \"left\"}\n  ],\n  randomize_order: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n .posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid black;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.6 Add Cue and Target Logic\nAlright, let’s add our logic! We’ll add some if-else statements inside our cue and target stimulus to change where the cue appears (we’ll use the background color as a cue) and where the target appears (we’ll use an X for the target).\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n          let cue_location = jsPsych.evaluateTimelineVariable(\"cue_location\")\n          \n          if(cue_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(cue_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      trial_duration: 300,\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n         let output \n         let target_location = jsPsych.evaluateTimelineVariable(\"target_location\")\n\n         if(target_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(target_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ],\n  timeline_variables: [\n    {cue_location: \"left\", target_location: \"left\"},\n    {cue_location: \"right\", target_location: \"right\"},\n    {cue_location: \"left\", target_location: \"right\"},\n    {cue_location: \"right\", target_location: \"left\"}\n  ],\n  randomize_order: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n .posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid black;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.7 Change to 75% Valid Trials\nNow that we have the basic setup, we need to add our key manipulations. First, we need to make 75% of the trials “valid”. Valid trials are when the cue is in the same location as the target.\nI’m going to add some helpful labels to our timeline variables indicating valid/invalid. Then, I’m going to change the proportion of trials in the simplest way: I’ll make it so that there are 3 valid trials of each type and only 1 invalid trial of each type.\nRemember that white space doesn’t matter anywhere, so I also added some comments and formatting to make it easier to read what is happening in the timeline_variables.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n          let cue_location = jsPsych.evaluateTimelineVariable(\"cue_location\")\n          \n          if(cue_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(cue_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      trial_duration: 300,\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n         let output \n         let target_location = jsPsych.evaluateTimelineVariable(\"target_location\")\n\n         if(target_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(target_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ],\n  timeline_variables: [\n    // valid trials 75%\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\"},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\"},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\"},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\"},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\"},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\"},\n\n    // invalid trials 25%\n    {cue_location: \"left\", target_location: \"right\", validity: \"invalid\"},\n    {cue_location: \"right\", target_location: \"left\", validity: \"invalid\"}\n  ],\n  randomize_order: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n .posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid black;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.8 Manipulate Cue Duration\nThe final thing we need to do is manipulate the cue duration. We’re going to have two different cue durations: 100 and 300 milliseconds.\nWe’ll need to add a new timeline variable (100 or 300) and we’ll double the trials to make sure we have one of each type.\nKeep in mind, we don’t need a function to vary the trial_duration, we just need to make sure our timeline variable is in the correct format (numeric) and refer to it in the parameter using jsPsych.timelineVariable.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n          let cue_location = jsPsych.evaluateTimelineVariable(\"cue_location\")\n          \n          if(cue_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(cue_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      trial_duration: jsPsych.timelineVariable(\"cue_duration\"),\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n         let output \n         let target_location = jsPsych.evaluateTimelineVariable(\"target_location\")\n\n         if(target_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(target_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ],\n  timeline_variables: [\n    // 100 ms SOA\n    // valid trials 75%\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 100},\n\n    // invalid trials 25%\n    {cue_location: \"left\", target_location: \"right\", validity: \"invalid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"left\", validity: \"invalid\", cue_duration: 100},\n\n    // 300 ms SOA\n    // valid trials 75%\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 300},\n\n    // invalid trials 25%\n    {cue_location: \"left\", target_location: \"right\", validity: \"invalid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"left\", validity: \"invalid\", cue_duration: 300}\n  ],\n  randomize_order: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n .posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid black;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n18.2.9 Instructions & Styling\nAs our final step, let’s add some proper instructions and change the styling of the experiment to have a dark background with off-white text. Note that I had to change the border color to match the text. This was simple because I just needed to change it in my external stylesheet once.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 7: Attention&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // 1. Initialize jsPsych\nconst jsPsych = initJsPsych();\n\n // 2. Define our trials\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n\n    `&lt;p&gt;On every trial, you will see a fixation point and two boxes&lt;/p&gt;\n     &lt;p&gt;A target symbol  (\"X\") will be presented in either the left or right box.&lt;/p&gt;`,\n\n    `&lt;p&gt;Press the left key (\"A\") if the X appears in the left box.&lt;/p&gt;\n     &lt;p&gt;Press the right key (\"L\") if the X appears in the right box.&lt;/p&gt;`,\n\n    `&lt;p&gt;Every trial, you will also see a yellow box appear, which is a cue. &lt;/p&gt;\n     &lt;p&gt;Do not respond to the yellow box, just ignore it!&lt;/p&gt;\n     &lt;p&gt;Only respond to the X, using the left and right keys.&lt;/p&gt;`,\n\n    `&lt;p&gt;Try to respond as quickly and as accurately as possible.&lt;/p&gt;\n    &lt;p&gt;When you are ready to begin the first trial, press \"Next\".&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\nconst posnerExo = {\n  timeline: [\n    // 1. Fixation\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n\n          output = `&lt;div class=\"posner-container\"&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                      &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;`\n\n          return output\n      },\n      trial_duration: 1000,\n      choices: \"NO_KEYS\"\n    },\n\n    // 2. Cue\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n          let output \n          let cue_location = jsPsych.evaluateTimelineVariable(\"cue_location\")\n          \n          if(cue_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(cue_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\" style=\"background-color: yellow \"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      trial_duration: jsPsych.timelineVariable(\"cue_duration\"),\n      choices: \"NO_KEYS\"\n    },\n\n    // 3. Target\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function(){\n         let output \n         let target_location = jsPsych.evaluateTimelineVariable(\"target_location\")\n\n         if(target_location === \"left\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          } else if(target_location === \"right\"){\n            output = `&lt;div class=\"posner-container\"&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;&lt;/div&gt;\n                        &lt;div class=\"posner-location\"&gt;+&lt;/div&gt;\n                        &lt;div class=\"posner-location posner-box\"&gt;X&lt;/div&gt;\n                      &lt;/div&gt;`\n\n          }\n\n          return output\n      },\n      choices: [\"a\", \"l\"]\n    }\n  ],\n  timeline_variables: [\n    // 100 ms SOA\n    // valid trials 75%\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 100},\n\n    // invalid trials 25%\n    {cue_location: \"left\", target_location: \"right\", validity: \"invalid\", cue_duration: 100},\n    {cue_location: \"right\", target_location: \"left\", validity: \"invalid\", cue_duration: 100},\n\n    // 300 ms SOA\n    // valid trials 75%\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"left\", target_location: \"left\", validity: \"valid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"right\", validity: \"valid\", cue_duration: 300},\n\n    // invalid trials 25%\n    {cue_location: \"left\", target_location: \"right\", validity: \"invalid\", cue_duration: 300},\n    {cue_location: \"right\", target_location: \"left\", validity: \"invalid\", cue_duration: 300}\n  ],\n  randomize_order: true\n}\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"attention_data.csv\");\n    });\n  }\n};\n\n// 3. Run jsPsych with our trials\njsPsych.run([\n  instructions,\n  posnerExo,\n  saveData\n]); \n\n\n body {\n  background-color: #1a1a1a;\n  color: #e0e0e0\n}\n\n.posner-container {\n  display: flex;\n  justify-content: space-between;\n  width: 600px;\n  margin: 0 auto;\n  font-size: 48px;\n}\n\n.posner-location {\n  width: 100px;\n  height: 100px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.posner-box {\n  border: 2px solid #e0e0e0;\n} \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Lab 7: Spatial Attention</span>"
    ]
  },
  {
    "objectID": "18-L07.html#stretch-goals",
    "href": "18-L07.html#stretch-goals",
    "title": "18  Lab 7: Spatial Attention",
    "section": "18.3 Stretch Goals",
    "text": "18.3 Stretch Goals\n\n18.3.1 Add feedback following each trial\nAdd another display after they’ve responded which indicates whether they were correct or incorrect.\nTo emphasize response speed, also add feedback that says “Too Slow! Respond Faster!” if they take longer than 1500 milliseconds.\nHave the feedback display be presented for only 1500 milliseconds before automatically going to the next trial.\n\n\n18.3.2 Add proper data labels\nAdd data labels for:\n\nall the timeline_variables\ntask_type (e.g., instructions, posner, saveData)\ntrial_part (e.g., fixation, cue, target)\n\n\n\n18.3.3 Create a block of trials that uses an endogenous arrow cue\nIn the endogenous version of the task, there is not yellow box that flashes. Instead, an arrow at the center of the screen points left or right.\nCreate another block of trials called posnerEndo that is identical to the exogenous block, except that an arrow is used as a cue instead of the yellow box.\nThere are HTML codes for a variety of symbols, including arrows. To insert a right arrow like this ➡, you can insert this HTML code &#10145;\nFor a left arrow,⬅ you can use &#11013;.",
    "crumbs": [
      "Unit 7: Dynamic Parameters",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Lab 7: Spatial Attention</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html",
    "href": "19-dynamic-flow.html",
    "title": "19  Controlling the Flow",
    "section": "",
    "text": "19.1 Introduction\nThroughout this book, we’ve been building experiments by arranging trials and timelines in a specific order. For instance, in a Stroop task, we might show a fixation cross, then the stimulus, then move on to the next trial:\nSimilarly, we control the order of entire phases or tasks by arranging them in the array we pass to jsPsych.run():\nThis works great for experiments where the sequence is always the same. But what if you need the flow to change based on what happens during the experiment?\nConsider these scenarios:\nAll of these require dynamic flow control, the ability to make decisions about what happens next based on data collected during the experiment. That’s what we’ll learn in this chapter.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#introduction",
    "href": "19-dynamic-flow.html#introduction",
    "title": "19  Controlling the Flow",
    "section": "",
    "text": "let stroop = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('stimulus'),\n      choices: [\"r\", \"b\", \"g\", \"y\"]\n    }\n  ],\n  timeline_variables: [\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;BLUE&lt;/p&gt;`}\n  ]\n};\n\njsPsych.run([\n  instructions,\n  practice,\n  main_task,\n  debrief\n])\n\n\n\nShow feedback only on incorrect trials\nRepeat a practice block until accuracy reaches 80%\nSkip the French language task if the participant indicated English as their first language\nShow a warning message after three consecutive missed responses",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#its-timelines-all-the-way-down",
    "href": "19-dynamic-flow.html#its-timelines-all-the-way-down",
    "title": "19  Controlling the Flow",
    "section": "19.2 It’s Timelines All the Way Down",
    "text": "19.2 It’s Timelines All the Way Down\nBefore we dive into flow control, let’s clarify an important concept: in jsPsych, everything is a timeline.\nWhen we talk casually about “trials” and “tasks” and “phases,” it’s easy to think of them as fundamentally different things. But to jsPsych, they’re all just timelines. A single trial is a timeline with one object. A task is a timeline with multiple trials. An entire experiment is a timeline containing other timelines.\nThis means we can nest timelines inside timelines, inside more timelines, as deep as we need:\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the experiment!&lt;/p&gt;`\n};\n\nlet goodbye = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Thank you for participating!&lt;/p&gt;`\n};\n\nlet stroop = {\n  timeline: [/* stroop trials */]\n};\n\nlet flanker = {\n  timeline: [/* flanker trials */]\n};\n\nlet simon = {\n  timeline: [/* simon trials */]\n};\n\n// Group all the cognitive tasks together\nlet allTasks = {\n  timeline: [\n    stroop,\n    flanker,\n    simon\n  ]\n};\n\n// The complete experiment\nlet everything = {\n  timeline: [\n    welcome,\n    allTasks,\n    goodbye\n  ]\n};\n\njsPsych.run([everything]);\nThis code will run in the following order:\n\nwelcome\nstroop\nflanker\nsimon\ngoodbye\n\nIn this case, it is equivalent to the following code:\njsPsych.run([\n  welcome,\n  stroop,\n  flanker,\n  simon,\n  goodbye\n])\nWhy does this matter? Because the flow control tools we’re about to learn work the same way at every level. Whether you’re controlling a single feedback trial or an entire task phase, you’ll use the same mechanisms. Understanding that it’s “timelines all the way down” helps make sense of how these tools work.\nAs we will see, by grouping some trials/tasks together, we will gain more control over whether those groups of trials/tasks are shown or not show, repeat, etc.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#a-side-note-about-organization",
    "href": "19-dynamic-flow.html#a-side-note-about-organization",
    "title": "19  Controlling the Flow",
    "section": "19.3 A Side-Note About Organization",
    "text": "19.3 A Side-Note About Organization\nNow that we understand the nested nature of timelines, let’s take a moment to talk about code organization. Understanding that “it’s timelines all the way down” opens up different ways to structure your code, and choosing the right approach can make your experiments much easier to read and modify.\n\n19.3.1 Two Ways to Write the Same Thing\nConsider our Stroop task example from earlier. We wrote it like this:\nlet stroop = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('stimulus'),\n      choices: [\"r\", \"b\", \"g\", \"y\"]\n    }\n  ],\n  timeline_variables: [\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;BLUE&lt;/p&gt;`}\n  ]\n};\nBut we could have written it this way instead:\nlet fixation = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n  choices: \"NO_KEYS\",\n  trial_duration: 500\n};\n\nlet stroop_stimulus = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable('stimulus'),\n  choices: [\"r\", \"b\", \"g\", \"y\"]\n};\n\nlet stroop = {\n  timeline: [fixation, stroop_stimulus],\n  timeline_variables: [\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;BLUE&lt;/p&gt;`}\n  ]\n};\nThese two approaches are completely equivalent. jsPsych doesn’t care whether you define trials inline (inside the timeline array) or separately (as named variables that you reference in the timeline array).\nWe can even move our timeline_variables off into their own variable and refer to it inside our stroop trial:\nlet fixation = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n  choices: \"NO_KEYS\",\n  trial_duration: 500\n};\n\nlet stroop_stimulus = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable('stimulus'),\n  choices: [\"r\", \"b\", \"g\", \"y\"]\n};\n\nlet stroop_timeline_variables = [\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`},\n    {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;BLUE&lt;/p&gt;`}\n  ]\n\nlet stroop = {\n  timeline: [fixation, stroop_stimulus],\n  timeline_variables: stroop_timeline_variables\n};\n\n\n19.3.2 When to Use Each Approach\nUse inline definitions (first approach) when:\n\nThe trial is simple and short\nYou want to see the entire task structure at a glance\nThe task only has a few components\n\nUse separate definitions (second approach) when:\n\nTrial definitions are getting long or complex\nYou want to clearly see the flow and structure of your task\nYou’re building tasks with many components\nYou want to focus on one piece at a time while coding\n\n\n\n19.3.3 Example: Simple Task - Inline Works Fine\nFor a simple task with just a couple of short trials, inline definitions are perfectly readable:\nlet simple_task = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p&gt;Press any key to see a word&lt;/p&gt;`\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable('word'),\n      choices: ['f', 'j']\n    }\n  ],\n  timeline_variables: [\n    {word: 'HAPPY'},\n    {word: 'SAD'}\n  ]\n};\nThis is easy to read because everything is short and straightforward.\n\n\n19.3.4 Example: Complex Task - Separate Definitions Help\nBut imagine your trials start getting more complex - maybe they have custom styling, data properties, callback functions, and dynamic parameters. The inline approach becomes harder to read:\nlet complex_task = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;div style=\"font-size: 24px; color: #333; background-color: #f0f0f0; padding: 20px; border-radius: 10px;\"&gt;\n        &lt;p&gt;Get ready...&lt;/p&gt;\n      &lt;/div&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 1000,\n      post_trial_gap: 200\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500,\n      post_trial_gap: 0\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        let stim = jsPsych.timelineVariable('stimulus');\n        let color = jsPsych.timelineVariable('color');\n        return `&lt;div style=\"font-size: 48px; color: ${color}; font-weight: bold;\"&gt;\n          ${stim}\n        &lt;/div&gt;`;\n      },\n      choices: ['r', 'b', 'g', 'y'],\n      data: {\n        task: 'stroop',\n        condition: jsPsych.timelineVariable('condition'),\n        correct_response: jsPsych.timelineVariable('correct_key')\n      },\n      on_finish: function(data) {\n        data.correct = data.response == data.correct_response;\n      },\n      post_trial_gap: 250\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        let last_trial = jsPsych.data.get().last(1).values()[0];\n        if (last_trial.correct) {\n          return `&lt;p style=\"color: green; font-size: 24px;\"&gt;Correct!&lt;/p&gt;`;\n        } else {\n          return `&lt;p style=\"color: red; font-size: 24px;\"&gt;Incorrect&lt;/p&gt;`;\n        }\n      },\n      choices: \"NO_KEYS\",\n      trial_duration: 800\n    }\n  ],\n  timeline_variables: [\n    {stimulus: 'RED', color: 'red', condition: 'congruent', correct_key: 'r'},\n    {stimulus: 'RED', color: 'blue', condition: 'incongruent', correct_key: 'r'},\n    // ... more stimuli\n  ]\n};\nThat’s a lot to take in! You have to scroll through all the trial details to understand the basic structure. It’s hard to see at a glance that this task has four parts: a warning, a fixation, a stimulus, and feedback.\nNow compare this to the separate approach:\n// ============================================\n// STROOP COMPONENTS\n// ============================================\n\n// Warning screen before each trial\nlet warning = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;div style=\"font-size: 24px; color: #333; background-color: #f0f0f0; padding: 20px; border-radius: 10px;\"&gt;\n    &lt;p&gt;Get ready...&lt;/p&gt;\n  &lt;/div&gt;`,\n  choices: \"NO_KEYS\",\n  trial_duration: 1000,\n  post_trial_gap: 200\n};\n\n// Fixation cross\nlet fixation = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n  choices: \"NO_KEYS\",\n  trial_duration: 500,\n  post_trial_gap: 0\n};\n\n// Main Stroop stimulus\nlet stroop_stimulus = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function() {\n    let stim = jsPsych.timelineVariable('stimulus');\n    let color = jsPsych.timelineVariable('color');\n    return `&lt;div style=\"font-size: 48px; color: ${color}; font-weight: bold;\"&gt;\n      ${stim}\n    &lt;/div&gt;`;\n  },\n  choices: ['r', 'b', 'g', 'y'],\n  data: {\n    task: 'stroop',\n    condition: jsPsych.timelineVariable('condition'),\n    correct_response: jsPsych.timelineVariable('correct_key')\n  },\n  on_finish: function(data) {\n    data.correct = data.response == data.correct_response;\n  },\n  post_trial_gap: 250\n};\n\n// Feedback display\nlet feedback = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function() {\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n    if (last_trial.correct) {\n      return `&lt;p style=\"color: green; font-size: 24px;\"&gt;Correct!&lt;/p&gt;`;\n    } else {\n      return `&lt;p style=\"color: red; font-size: 24px;\"&gt;Incorrect&lt;/p&gt;`;\n    }\n  },\n  choices: \"NO_KEYS\",\n  trial_duration: 800\n};\n\n// ============================================\n// STROOP TIMELINE\n// ============================================\n\nlet stroop = {\n  timeline: [warning, fixation, stroop_stimulus, feedback],\n  timeline_variables: [\n    {stimulus: 'RED', color: 'red', condition: 'congruent', correct_key: 'r'},\n    {stimulus: 'RED', color: 'blue', condition: 'incongruent', correct_key: 'r'},\n    // ... more stimuli\n  ]\n};\nNow the structure is immediately clear: timeline: [warning, fixation, stroop_stimulus, feedback]. You can see the flow of the task at a glance. If you need to understand the details of any component, you can look at its definition separately. If you need to modify the feedback, you know exactly where to find it.\n\n\n19.3.5 Example: Understanding Task Flow\nThe separate approach is especially helpful when you’re trying to understand or explain the sequence of events in your experiment:\n// It's immediately clear what happens in each block\nlet practice_block = {\n  timeline: [instructions, practice_trial, feedback]\n};\n\nlet main_block = {\n  timeline: [fixation, stimulus, response_prompt]\n};\n\nlet experiment = {\n  timeline: [\n    welcome,\n    consent,\n    practice_block,\n    break_screen,\n    main_block,\n    demographics,\n    debrief\n  ]\n};\nCompare this to having all those components defined inline - you’d have to scroll through hundreds of lines of code to see the overall structure.\n\n\n19.3.6 A Practical Guideline\nHere’s a simple rule of thumb: If a trial definition is longer than about 10 lines, or if your timeline has more than 2-3 components, consider using separate definitions.\nYour code should be organized in a way that makes it easy to understand the flow and structure of your experiment. When someone (including future you!) looks at your code, they should be able to quickly answer:\n\nWhat are the main phases of this experiment?\nWhat happens in each trial?\nWhat’s the sequence of events?\n\nThe separate approach often makes these questions easier to answer, especially as your experiments grow more complex.\nHowever, your code should be organized in a way that makes it easy for you (and others) to understand and modify. There’s no single “right” way. You should choose the approach that makes the most sense for your specific experiment.\nAs we move forward with flow control, you’ll see that the separate approach often makes it easier to add conditional and loop functions, because you can clearly see which component you’re adding the function to. But both approaches work, and you can mix them in the same experiment if that makes sense for your design.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#two-levels-of-flow-control",
    "href": "19-dynamic-flow.html#two-levels-of-flow-control",
    "title": "19  Controlling the Flow",
    "section": "19.4 Two Levels of Flow Control",
    "text": "19.4 Two Levels of Flow Control\njsPsych provides two main mechanisms for controlling flow dynamically:\n\nConditional Functions (conditional_function): Control whether individual trials or entire timelines run\nLoop Functions (loop_function): Control whether timelines repeat\n\nThese mechanisms can operate at different scales:\n\nTrial-level control: Show/hide feedback, adjust what appears on screen, change available responses\nTimeline-level control: Include/exclude practice blocks, repeat phases, skip entire tasks\n\nLet’s start small with trial-level control, then scale up to timeline-level control.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#conditional-trial-components",
    "href": "19-dynamic-flow.html#conditional-trial-components",
    "title": "19  Controlling the Flow",
    "section": "19.5 Conditional Trial Components",
    "text": "19.5 Conditional Trial Components\nThe simplest form of flow control is showing or hiding parts of a single trial. One common use case is conditional feedback, where we show feedback only when participants make errors. When participants are performing well, we may not want to interrupt them every trial with a feedback message, but we still want to provide corrective feedback if they’re making errors.\nNotice that this requires some if-then logic: “If they were incorrect on the previous trial, then show feedback. If they were correct on the previous trial then skip the feedback. Another way to say this, is that whether the feedback is shown is conditional on on something being true or false.\nA conditional_function is a property you can add to any timeline object. It’s a function that returns either true (run this timeline) or false (skip this timeline). jsPsych calls this function right before it would run the timeline, giving you a chance to decide whether it should actually run.\nHere’s the basic structure:\nlet some_timeline = {\n  timeline: [/* your trials here */],\n  conditional_function: function() {\n    // Your logic here\n    // Return true to show this timeline\n    // Return false to skip this timeline\n  }\n};\nA common mistake is trying to put a conditional_function directly on a trial object. This won’t work:\n// This DOESN'T work\nlet feedback = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Incorrect!&lt;/p&gt;`,\n  conditional_function: function() {\n    // This will be ignored!\n    return false;\n  }\n};\nInstead, you need to wrap the trial in a timeline, then put the conditional_function on the timeline:\n// This DOES work\nlet feedback = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p&gt;Incorrect!&lt;/p&gt;`\n    }\n  ],\n  conditional_function: function() {\n    // This will work!\n    return false;\n  }\n};\nRemember: conditional functions control timelines, not individual trials. Even if your timeline only contains one trial, you still need that timeline wrapper.\n\n19.5.1 Example: Feedback Only on Errors\nLet’s build a complete example where feedback appears only when participants make mistakes. We’ll break it down step by step.\n\n19.5.1.1 Step 1: Create the main trial\nFirst, we need a trial that records whether the response was correct:\nlet trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable('stimulus'),\n  choices: ['w', 'n'],\n  data: {\n    correct_response: jsPsych.timelineVariable('correct_key'),\n    task: 'Lexical Decision Task'\n  },\n  on_finish: function(data) {\n    // Check if the response matches the correct response\n    data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n  }\n};\nNotice that we’re using on_finish to add a correct property to the data. This will be either true or false, and we’ll use it in our conditional function.\n\n\n19.5.1.2 Step 2: Create the feedback trial\nNow let’s create a feedback trial that will only appear sometimes. Remember, we need to wrap it in a timeline to use conditional_function:\nlet feedback = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        // Get the data from the trial that just finished\n        let last_trial = jsPsych.data.get().last(1).values()[0];\n\n        // Create feedback message\n        return `&lt;p style=\"color: red; font-size: 24px;\"&gt;Incorrect!&lt;/p&gt;\n                &lt;p&gt;You pressed: ${last_trial.response}&lt;/p&gt;\n                &lt;p&gt;Correct response: ${last_trial.correct_response}&lt;/p&gt;`;\n      },\n      choices: \"NO_KEYS\",\n      trial_duration: 1500\n    }\n  ],\n  conditional_function: function() {\n    // Get the data from the trial that just finished\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n\n    // Only show feedback if they got it wrong\n    if (last_trial.correct === true) {\n      return false;  // Don't show feedback\n    } else {\n      return true;   // Show feedback\n    }\n  }\n};\nLet’s break down what’s happening:\n\nThe feedback is wrapped in a timeline array (even though it’s just one trial)\nThe conditional_function is at the timeline level, not inside the trial\nInside the conditional function:\n\njsPsych.data.get() - Gets all the data collected so far\n.last(1) - Gets just the most recent trial\n.values()[0] - Extracts the data object from that trial\nWe check if last_trial.correct === true\nReturn false to skip the feedback, true to show it\n\n\n\n\n19.5.1.3 Step 3: Combine them into a timeline\nlet trial_with_feedback = {\n  timeline: [trial, feedback],\n  timeline_variables: [\n    {stimulus: \"HOUSE\", correct_key: \"w\"},\n    {stimulus: \"BLARB\", correct_key: \"n\"}\n  ]\n};\nNow when you run this timeline, every trial will show the stimulus and wait for a response. The feedback trial will only appear if the participant was incorrect. If they were correct, jsPsych skips the feedback trial entirely and moves to the next trial\nWe can see it in action right here:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\n// ============================================\n// Lexical Decision Task\n// ============================================\n\n// Stimulus\n\nlet trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable(\"stimulus\"),\n  choices: [\"w\", \"n\"],\n  data: {\n    correct_response: jsPsych.timelineVariable(\"correct_key\"),\n    task: \"Lexical Decision Task\"\n  },\n  on_finish: function(data) {\n    // Check if the response matches the correct response\n    data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n\n  }\n};\n\n// Conditional Feedback\n\nlet feedback = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        // Get the data from the trial that just finished\n        let last_trial = jsPsych.data.get().last(1).values()[0];\n\n        // Create feedback message\n        return `&lt;p style=\"color: red; font-size: 24px;\"&gt;Incorrect!&lt;/p&gt;\n                &lt;p&gt;You pressed: ${last_trial.response}&lt;/p&gt;\n                &lt;p&gt;Correct response: ${last_trial.correct_response}&lt;/p&gt;`;\n      },\n      choices: \"NO_KEYS\",\n      trial_duration: 1500\n    }\n  ],\n  conditional_function: function() {\n    // Get the data from the trial that just finished\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n\n    // Only show feedback if they got it wrong\n    if (last_trial.correct === true) {\n      return false;  // Dont show feedback\n    } else {\n      return true;   // Show feedback\n    }\n  }\n};\n\n// Lexical Decision Timeline\n\nlet trial_with_feedback = {\n  timeline: [trial, feedback],\n  timeline_variables: [\n    {stimulus: \"HOUSE\", correct_key: \"w\"},\n    {stimulus: \"BLARB\", correct_key: \"n\"}\n  ]\n};\n\n// ============================================\n// Experiment Timeline\n// ============================================\n\njsPsych.run([\n  welcome,\n  trial_with_feedback\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n19.5.1.4 Simplifying the Conditional Logic\nYou might notice that our conditional function is a bit verbose. There are always multiple ways to write the same code. In this case, we could write it in at least three different ways:\nconditional_function: function() {\n  let last_trial = jsPsych.data.get().last(1).values()[0];\n\n  // These three versions do the same thing:\n\n  // Version 1: Explicit if/else\n  if (last_trial.correct === true) {\n    return false;\n  } else {\n    return true;\n  }\n\n  // Version 2: Return the opposite of correct\n  return !last_trial.correct;  // ! means \"not\"\n\n  // Version 3: Check if correct is false\n  return last_trial.correct === false;\n}\nAll three versions work identically. Use whichever makes the most sense to you. The ! operator (called “not”) flips true to false and false to true, which is handy for these situations.\nAs a beginner, I’d stick with the code that is the clearest to you, even if that means it’s more verbose.\n\n\n\n19.5.2 Example: Skip Based on Survey Response\nLet’s look at another simple example. Imagine you want to ask participants if they wear glasses, and only show a follow-up question if they answer “Yes”. I won’t walk through the steps of creating this example, but the general principles are the same as the previous.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-text.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nconst debrief = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Thank you for completing our survey!`,\n  choices: \"NO_KEYS\", \n  post_trial_gap: 250\n}\n\n// ============================================\n// Vision Questionnaire\n// ============================================\n\nlet glasses_question = {\n  type: jsPsychSurveyMultiChoice,\n  questions: [\n    {\n      prompt: \"Do you wear glasses or contact lenses?\",\n      options: [\"Yes\", \"No\"],\n      required: true,\n      name: \"wears_glasses\"\n    }\n  ]\n};\n\nlet glasses_followup = {\n  timeline: [\n    {\n      type: jsPsychSurveyText,\n      questions: [\n        {\n          prompt: \"How many years have you been wearing glasses or contacts?\",\n          name: \"years_wearing_glasses\",\n          required: true\n        }\n      ]\n    }\n  ],\n  conditional_function: function() {\n    // Get the response from the previous question\n    let last_response = jsPsych.data.get().last(1).values()[0];\n\n    // Only show this follow-up if they answered \"Yes\"\n    if (last_response.response.wears_glasses === \"Yes\") {\n      return true;   // Show the follow-up\n    } else {\n      return false;  // Skip the follow-up\n    }\n  }\n};\n\n// Run both in sequence\nlet vision_questions = {\n  timeline: [glasses_question, glasses_followup]\n};\n\n// ============================================\n// Experiment Timeline\n// ============================================\n\njsPsych.run([\n  welcome,\n  vision_questions,\n  debrief\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nLet’s break this down:\n\nFirst question: We ask if they wear glasses, storing the response with the name ‘wears_glasses’\nFollow-up question: We wrap it in a timeline so we can add a conditional_function\nConditional logic:\n\nWe get the last trial’s data (the glasses question)\nWe check if their response to wears_glasses was “Yes”\nIf yes, return true to show the follow-up\nIf no, return false to skip it\n\n\nThis is a common pattern in surveys where you only want to ask certain questions based on previous answers. Participants who answered “No” will never see the follow-up question, and the experiment will simply continue to whatever comes next.\n\n\n19.5.3 Example: Conditional Inattention Warning\nHere’s a more complicated, but practical example for online studies. The Sustained Attention to Response Task (SART) is designed to measure attention lapses. Participants see a series of digits (1-9) presented one at a time, and their job is to press the spacebar for every digit except the number 3. When they see a 3, they should withhold their response.\nThe key feature of the SART is that trials don’t wait for a response. Each digit appears for a fixed duration (typically around 1 second) and then the next digit appears automatically. This means participants can miss trials, which could indicate an attention lapse.\nHowever, in online studies, we can’t monitor participants directly. We don’t know if they’re texting on their phone, if they’ve opened another browser tab, or if they’ve simply walked away from the computer. While missing one or two trials in a row might reflect normal attention lapses (which is what we’re trying to measure), missing many trials in a row suggests the participant isn’t doing the task at all.\nOne solution is to pause the task and show a warning if participants miss more trials than we’d expect from normal attention lapses. This helps ensure they’re actually engaged with the task:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n // ============================================\n// Instructions\n// ============================================\n\nconst welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `Welcome to the Experiment! Press any key to begin.`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\n// ============================================\n// Sustained Attention to Response Task\n// ============================================\n\n// Variable to track consecutive misses\n\nlet missed_in_a_row = 0;\n\n// sart trial\n\nlet sart_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable(\"digit\"),\n  choices: [\" \"],  // Spacebar\n  trial_duration: 1000,  // Trial proceeds automatically after 1 second\n  response_ends_trial: false,  // response does NOT end the trial\n  data: {\n    digit: jsPsych.timelineVariable(\"digit\"),\n    is_target: jsPsych.timelineVariable(\"is_target\")\n  },\n  on_finish: function(data) {\n    // Correct response: press space for non-targets (1-2, 4-9), withhold for target (3)\n    if (data.is_target) {\n      data.correct = data.response === null;  // Should NOT press for target\n      \n      // If it was a target, reset counter\n      missed_in_a_row = 0;\n\n    } else {\n      data.correct = data.response === \" \";   // Should press for non-target\n\n     // Track consecutive misses (only track on non-target trials)\n        if (data.response === null) {\n          missed_in_a_row++;\n        } else {\n          missed_in_a_row = 0;  // Reset if they responded\n        }\n    }\n  }\n};\n\n// inattention warning\n\nlet inattention_warning = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;div style=\"color: orange; font-size: 24px;\"&gt;\n        &lt;p&gt;⚠️ Attention Check ⚠️&lt;/p&gt;\n        &lt;p&gt;You've missed ${missed_in_a_row} trials in a row.&lt;/p&gt;\n        &lt;p&gt;Please stay focused and respond to the digits.&lt;/p&gt;\n        &lt;p&gt;Press any key to continue.&lt;/p&gt;\n      &lt;/div&gt;`,\n      choices: \"ALL_KEYS\"\n    }\n  ],\n  conditional_function: function() {\n    // Show warning if they've missed 3 or more in a row\n    if (missed_in_a_row &gt;= 3) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  on_finish: function() {\n    missed_in_a_row = 0;  // Reset counter after showing warning\n  }\n};\n\n// sart task timeline\n\nlet sart_task = {\n  timeline: [sart_trial, inattention_warning],\n  timeline_variables: [\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;1&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;2&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;3&lt;/p&gt;`, is_target: true},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;4&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;5&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;6&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;7&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;8&lt;/p&gt;`, is_target: false},\n    {digit: `&lt;p style=\"font-size: 72px;\"&gt;9&lt;/p&gt;`, is_target: false}\n  ],\n  randomize_order: true,\n  repetitions: 10  // 90 trials total\n};\n\n\n// ============================================\n// Experiment Timeline\n// ============================================\n\njsPsych.run([\n  welcome,\n  sart_task \n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nLet’s break down how this works:\n\nTracking misses: The missed_in_a_row variable keeps count of consecutive trials where the participant didn’t respond\nTrial proceeds automatically: With trial_duration: 1000, the trial moves on after 1 second whether they respond or not\nUpdating the counter: In on_finish:\n\nIf data.response === null (no response), we increment the counter\nIf they responded, we reset the counter to 0\nConditional warning: The warning timeline only appears when missed_in_a_row &gt;= 3\nResetting after warning: After showing the warning, we reset the counter so they get a fresh start\n\n\nThis pattern helps distinguish between normal attention lapses (which we want to measure) and complete task disengagement (which we want to prevent). The warning pauses the task and requires the participant to actively press a key to continue, ensuring they’re still present and engaged. If a participant continues to not respond even after multiple warnings, you might want to consider ending the experiment early or flagging their data for exclusion during analysis.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#conditional-timelines",
    "href": "19-dynamic-flow.html#conditional-timelines",
    "title": "19  Controlling the Flow",
    "section": "19.6 Conditional Timelines",
    "text": "19.6 Conditional Timelines\nEverything we just learned about conditional functions works exactly the same way for entire timelines. Instead of showing or hiding a single feedback trial, we can show or hide entire phases of the experiment.\n\n19.6.1 Understanding Timeline-Level Conditionals\nWhen you put a conditional_function on a timeline that contains multiple trials, jsPsych evaluates the condition once, before running any of the trials in that timeline. If the function returns false, the entire timeline is skipped.\nThis is perfect for scenarios like showing different versions of a task based on participant characteristics, skipping optional sections based on previous performance, or branching to different experimental paths.\nThe general principles from the previous section apply here in exactly the same way. The only difference is that we’ll control larger timelines that contain entire tasks, rather than single parts of one task.\n\n\n19.6.2 Example: Language-Specific Tasks\nLet’s build an experiment that shows different Stroop tasks based on the participant’s first language. For this first example, we’ll walk through the steps of creating it:\n\n19.6.2.1 Step 1: Ask about language\n// ============================================\n// Language Check\n// ============================================\n\nlet language_check = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: \"What is your first language?\",\n            options: [\"English\", \"French\"],\n            required: true,\n            name: 'first_language'\n        }\n    ],\n    data: {\n        phase: \"Language Check\"\n    }\n};\n\n\n19.6.2.2 Step 2: Create language-specific tasks\nNow, we’ll create our language-specific tasks with conditional functions. In this case, we’re checking to see what their response was in the language check phase.\nSince conditional functions only allow us to either show or skip a particular timeline, we’ll need a conditional function on each version of the task. The logic works like this: if the response was “English”, we show the English Stroop and skip the French Stroop. But if the response was “French”, we skip the English version and show the French version.\nThis means each task needs its own conditional function that checks for a different language:\n// ============================================\n// French Stroop\n// ============================================\n\nlet french_stroop = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable('stimulus'),\n            choices: ['r', 'b', 'v', 'j']\n        }\n    ],\n    timeline_variables: [\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;ROUGE&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLEU&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: green\"&gt;VERT&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: yellow\"&gt;JAUNE&lt;/p&gt;`}\n    ],\n    conditional_function: function() {\n        // Get the response from the language check\n        let language_data = jsPsych.data.get().filter({phase: 'Language Check'}).values()[0];\n        let selected_language = language_data.response.first_language;\n\n        // Only run this timeline if they selected French\n        return selected_language === \"French\";\n    },\n    data: {\n        phase: \"French Stroop\"\n    }\n};\n\n// ============================================\n// English Stroop\n// ============================================\n\nlet english_stroop = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable('stimulus'),\n            choices: ['r', 'b', 'g', 'y']\n        }\n    ],\n    timeline_variables: [\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: green\"&gt;GREEN&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: yellow\"&gt;YELLOW&lt;/p&gt;`}\n    ],\n    conditional_function: function() {\n        let language_data = jsPsych.data.get().filter({phase: 'Language Check'}).values()[0];\n        let selected_language = language_data.response.first_language;\n\n        return selected_language === \"English\";\n    },\n    data: {\n        phase: \"English Stroop\"\n    }\n};\n\n\n19.6.2.3 Step 3: Run the experiment\nFinally, we put BOTH tasks into our jsPsych.run to the conditional functions can control whether they are displayed or not.\n// ============================================\n// Experiment Timeline\n// ============================================\n\njsPsych.run([\n    welcome,\n    language_check,\n    french_stroop,   // Only runs if French selected\n    english_stroop,  // Only runs if English selected\n    debrief\n]);\nHere’s the full working example. Try selecting a language, refreshing and selecting the other language.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \n\n// ============================================\n// Instructions\n// ============================================\n\nconst welcome = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `Welcome to the Experiment! Press any key to begin.`,\n    choices: \"ALL_KEYS\",\n    post_trial_gap: 250\n}\n\nconst debrief = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `Thank you for completing our experiment!`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250\n}\n\n// ============================================\n// Language Check\n// ============================================\n\nlet language_check = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: \"What is your first language?\",\n            options: [\"English\", \"French\"],\n            required: true,\n            name: \"first_language\"\n        }\n    ],\n    data: {\n        phase: \"Language Check\"\n    }\n};\n\n// ============================================\n// French Stroop\n// ============================================\n\nlet french_stroop = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"r\", \"b\", \"v\", \"j\"]\n        }\n    ],\n    timeline_variables: [\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;ROUGE&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLEU&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: green\"&gt;VERT&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: yellow\"&gt;JAUNE&lt;/p&gt;`}\n    ],\n    conditional_function: function() {\n        // Get the response from the language check\n        let language_data = jsPsych.data.get().filter({phase: \"Language Check\"}).values()[0];\n        let selected_language = language_data.response.first_language;\n\n        // Only run this timeline if they selected French\n        return selected_language === \"French\";\n    },\n    data: {\n        phase: \"French Stroop\"\n    }\n};\n\n// ============================================\n// English Stroop\n// ============================================\n\nlet english_stroop = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"r\", \"b\", \"g\", \"y\"]\n        }\n    ],\n    timeline_variables: [\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: green\"&gt;GREEN&lt;/p&gt;`},\n        {stimulus: `&lt;p style=\"font-size:48px; color: yellow\"&gt;YELLOW&lt;/p&gt;`}\n    ],\n    conditional_function: function() {\n        let language_data = jsPsych.data.get().filter({phase: \"Language Check\"}).values()[0];\n        let selected_language = language_data.response.first_language;\n\n        return selected_language === \"English\";\n    },\n    data: {\n        phase: \"English Stroop\"\n    }\n};\n\n\n// ============================================\n// Experiment Timeline\n// ============================================\n\njsPsych.run([\n    welcome,\n    language_check,\n    french_stroop,   // Only runs if French selected\n    english_stroop,  // Only runs if English selected\n    debrief\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n\n19.6.3 Example: Language-Specific Tasks Expanded\nIn the previous example, we just swapped out the task based on first language. Of course, if someone speaks French as a first language, we’d probably want all of the instructions and debrief in French too!\nGoing back to the idea that it’s ‘timelines all the way down’, we can expand our logic to create more complex, nested timelines so that each task gets its own set of instructions and debrief in the appropriate language.\nLet’s update the experiment code to do that:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \n// ============================================\n// Language Check\n// ============================================\n\nlet language_check = {\n    type: jsPsychSurveyMultiChoice,\n    questions: [\n        {\n            prompt: \"What is your first language? / Quelle est votre langue maternelle?\",\n            options: [\"English\", \"Français\"],\n            required: true,\n            name: \"first_language\"\n        }\n    ],\n    data: {\n        phase: \"Language Check\"\n    }\n};\n\n// ============================================\n// French Version (Instructions + Task + Debrief)\n// ============================================\n\nlet french_instructions = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;div style=\"font-size: 20px;\"&gt;\n        &lt;p&gt;Bienvenue à l'expérience Stroop!&lt;/p&gt;\n        &lt;p&gt;Vous allez voir des mots de couleur affichés à l'écran.&lt;/p&gt;\n        &lt;p&gt;Appuyez sur la touche correspondant à la COULEUR du mot:&lt;/p&gt;\n        &lt;ul style=\"list-style-type: none;\"&gt;\n            &lt;li&gt;R pour Rouge&lt;/li&gt;\n            &lt;li&gt;B pour Bleu&lt;/li&gt;\n            &lt;li&gt;V pour Vert&lt;/li&gt;\n            &lt;li&gt;J pour Jaune&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;p&gt;Appuyez sur n'importe quelle touche pour commencer.&lt;/p&gt;\n    &lt;/div&gt;`,\n    choices: \"ALL_KEYS\"\n};\n\nlet french_stroop_task = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"r\", \"b\", \"v\", \"j\"],\n            data: {\n                correct_response: jsPsych.timelineVariable(\"correct_key\")\n            },\n            on_finish: function(data) {\n                data.correct = data.response === data.correct_response;\n            }\n        }\n    ],\n    timeline_variables: [\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;ROUGE&lt;/p&gt;`, correct_key: \"r\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLEU&lt;/p&gt;`, correct_key: \"b\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: green\"&gt;VERT&lt;/p&gt;`, correct_key: \"v\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: yellow\"&gt;JAUNE&lt;/p&gt;`, correct_key: \"j\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;ROUGE&lt;/p&gt;`, correct_key: \"b\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;BLEU&lt;/p&gt;`, correct_key: \"r\"}\n    ],\n    randomize_order: true\n};\n\nlet french_debrief = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;div style=\"font-size: 20px;\"&gt;\n        &lt;p&gt;Merci d'avoir participé à notre expérience!&lt;/p&gt;\n        &lt;p&gt;Appuyez sur n'importe quelle touche pour terminer.&lt;/p&gt;\n    &lt;/div&gt;`,\n    choices: \"NO_KEYS\"\n};\n\n// Combine all French components into one timeline\nlet french_experiment = {\n    timeline: [french_instructions, french_stroop_task, french_debrief],\n    conditional_function: function() {\n        let language_data = jsPsych.data.get().filter({phase: \"Language Check\"}).values()[0];\n        let selected_language = language_data.response.first_language;\n        return selected_language === \"Français\";\n    }\n};\n\n// ============================================\n// English Version (Instructions + Task + Debrief)\n// ============================================\n\nlet english_instructions = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;div style=\"font-size: 20px;\"&gt;\n        &lt;p&gt;Welcome to the Stroop experiment!&lt;/p&gt;\n        &lt;p&gt;You will see color words displayed on the screen.&lt;/p&gt;\n        &lt;p&gt;Press the key corresponding to the COLOR of the word:&lt;/p&gt;\n        &lt;ul style=\"list-style-type: none;\"&gt;\n            &lt;li&gt;R for Red&lt;/li&gt;\n            &lt;li&gt;B for Blue&lt;/li&gt;\n            &lt;li&gt;G for Green&lt;/li&gt;\n            &lt;li&gt;Y for Yellow&lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;p&gt;Press any key to begin.&lt;/p&gt;\n    &lt;/div&gt;`,\n    choices: \"ALL_KEYS\"\n};\n\nlet english_stroop_task = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: jsPsych.timelineVariable(\"stimulus\"),\n            choices: [\"r\", \"b\", \"g\", \"y\"],\n            data: {\n                correct_response: jsPsych.timelineVariable(\"correct_key\")\n            },\n            on_finish: function(data) {\n                data.correct = data.response === data.correct_response;\n            }\n        }\n    ],\n    timeline_variables: [\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;RED&lt;/p&gt;`, correct_key: \"r\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;BLUE&lt;/p&gt;`, correct_key: \"b\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: green\"&gt;GREEN&lt;/p&gt;`, correct_key: \"g\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: yellow\"&gt;YELLOW&lt;/p&gt;`, correct_key: \"y\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: blue\"&gt;RED&lt;/p&gt;`, correct_key: \"b\"},\n        {stimulus: `&lt;p style=\"font-size:48px; color: red\"&gt;BLUE&lt;/p&gt;`, correct_key: \"r\"}\n    ],\n    randomize_order: true\n};\n\nlet english_debrief = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;div style=\"font-size: 20px;\"&gt;\n        &lt;p&gt;Thank you for participating in our experiment!&lt;/p&gt;\n        &lt;p&gt;Press any key to finish.&lt;/p&gt;\n    &lt;/div&gt;`,\n    choices: \"NO_KEYS\"\n};\n\n// Combine all English components into one timeline\nlet english_experiment = {\n    timeline: [english_instructions, english_stroop_task, english_debrief],\n    conditional_function: function() {\n        let language_data = jsPsych.data.get().filter({phase: \"Language Check\"}).values()[0];\n        let selected_language = language_data.response.first_language;\n        return selected_language === \"English\";\n    }\n};\n\n// ============================================\n// Experiment Timeline\n// ============================================\n\njsPsych.run([\n    language_check,\n    french_experiment,   // Only runs if French selected\n    english_experiment   // Only runs if English selected\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nNotice what we’ve done here:\n\nCreated complete language versions: Each language now has its own instructions, task, and debrief\nNested timelines: We created french_experiment and english_experiment, each containing multiple components\nSingle conditional check: Instead of checking the language for each component separately, we check once at the experiment level\nCleaner structure: The main experiment timeline is now very simple - just the language check followed by two conditional experiment versions\n\nThis demonstrates the power of nested timelines. The conditional_function on french_experiment controls whether the entire French version runs (instructions, task, and debrief). If it returns false, jsPsych skips all of those components and moves on to check the English version. The conditional_function on english_experiment controls whether the entire English version runs (instructions, task, and debrief). If it returns false, jsPsych skips all of those components and moves on. We could have added further languages, each with their own conditional function if we required more variants.\nThis pattern is much more maintainable than putting conditional functions on every single component. If you need to add a new section (like a practice block), you just add it to the appropriate language timeline, and it will automatically be included or excluded based on the participant’s language selection.\n\n\n19.6.4 Example: Time-Restricted Experiment\nAlthough up until now, we have been checking a previous response to determine whether something should be displayed, it’s important to remember that we can put whatever logic we want inside of the conditional function.\nHere’s an example that will only display the experiment if the participant’s local time is between 5 PM and 10 PM:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \nlet main_experiment = {\n  timeline: [\n    // Your experiment trials here\n     {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        let now = new Date();\n        let current_time = now.toLocaleTimeString();\n\n        return `&lt;div style=\"font-size: 20px;\"&gt;\n          &lt;p&gt;The current local time is ${current_time}&lt;/p&gt;\n          &lt;p&gt;Welcome to the experiment!&lt;/p&gt;\n        &lt;/div&gt;`;\n      },\n    choices: \"NO_KEYS\"\n     }\n  ],\n  conditional_function: function() {\n    // Get the current time\n    let now = new Date();\n    let current_hour = now.getHours();  // Returns 0-23\n\n    // Check if it's between 5 PM (17) and 10 PM (20)\n    if (current_hour &gt;= 17 && current_hour &lt; 20) {\n      return true;   // Show the experiment\n    } else {\n      return false;  // Skip the experiment\n    }\n  }\n};\n\nlet time_restriction_message = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        let now = new Date();\n        let current_time = now.toLocaleTimeString();\n\n        return `&lt;div style=\"font-size: 20px;\"&gt;\n          &lt;p&gt;The current local time is ${current_time}.&lt;/p&gt;\n          &lt;p&gt;This experiment is only available between 5:00 PM and 10:00 PM.&lt;/p&gt;\n          &lt;p&gt;Please return during these hours to participate.&lt;/p&gt;\n        &lt;/div&gt;`;\n      },\n      choices: \"NO_KEYS\"\n    }\n  ],\n  conditional_function: function() {\n    let now = new Date();\n    let current_hour = now.getHours();\n\n    // Show this message if it's NOT between 5 PM and 10 PM\n    if (current_hour &lt; 17 || current_hour &gt;= 20) {\n      return true;   // Show the restriction message\n    } else {\n      return false;  // Skip the message\n    }\n  }\n};\n\njsPsych.run([\n  main_experiment,           // Only runs during allowed hours\n  time_restriction_message   // Only runs outside allowed hours\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n19.6.5 Example: Random Assignment to Conditions\nSometimes you want to randomly assign participants to different experimental conditions. We’ll dive deeper into randomization later, and discuss why this probably isn’t the best way to randomize your conditions.\nHowever, as a demonstration of conditional functions, here’s an example that randomly shows one of two different instruction sets determine be randomly selecting a number between 0 and 1.\nClick the ‘refresh’ button to see it randomly switch between instruction prompts.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \n// Generate random assignment once at the start\nlet condition = Math.random() &lt;= 0.5 ? \"standard\" : \"detailed\";\n\nlet standard_instructions = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;div style=\"font-size: 20px;\"&gt;\n        &lt;p&gt;In this task, respond as quickly as possible.&lt;/p&gt;\n        &lt;p&gt;Press any key to begin.&lt;/p&gt;\n      &lt;/div&gt;`,\n      data: {\n        instruction_condition: \"standard\"\n      }\n    }\n  ],\n  conditional_function: function() {\n    return condition === \"standard\";\n  }\n};\n\nlet detailed_instructions = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;div style=\"font-size: 20px;\"&gt;\n        &lt;p&gt;In this task, respond as quickly as possible.&lt;/p&gt;\n        &lt;p&gt;Speed is more important than accuracy.&lt;/p&gt;\n        &lt;p&gt;Don't worry if you make mistakes.&lt;/p&gt;\n        &lt;p&gt;Press any key to begin.&lt;/p&gt;\n      &lt;/div&gt;`,\n      data: {\n        instruction_condition: \"detailed\"\n      }\n    }\n  ],\n  conditional_function: function() {\n    return condition === \"detailed\";\n  }\n};\n\njsPsych.run([\n  standard_instructions,  // Shows if condition === \"standard\"\n  detailed_instructions   // Shows if condition === \"detailed\"\n]);\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nIn this example, we generate a random number between 0 and 1, and if it’s less than 0.5 than we store “standard” in the condition variable. If it is greater than 0.5, then we store “detailed” in the condition variable.\nLater, inside the conditional function, we check what condition is to determine which should be displayed.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#looping-timelines",
    "href": "19-dynamic-flow.html#looping-timelines",
    "title": "19  Controlling the Flow",
    "section": "19.7 Looping Timelines",
    "text": "19.7 Looping Timelines\nA loop_function is similar to a conditional_function, but it’s evaluated after a timeline completes, not before. It receives the data from all the trials that just ran, and returns either true (run the timeline again) or false (move on to the next thing).\nJust like conditional_function, the loop_function must be placed on a timeline object, not directly on a trial object. The function should return true to repeat the timeline, or false to move on.\nHere’s the basic structure for loop functions:\nlet some_timeline = {\n  timeline: [/* your trials here */],\n  loop_function: function() {\n    // Your logic here\n    // Return true to repeat this timeline\n    // Return false to move on\n  }\n};\nRemember: loop functions control timelines, not individual trials. Even if your timeline only contains one trial, you still need that timeline wrapper.\n\n19.7.1 Example: Audio Check\nIn online studies, we can’t verify that participants have their audio working. Here’s an audio check that loops until they correctly identify a spoken word:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-audio-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \nlet welcome = {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p&gt;Press any key to begin the sound check.&lt;/p&gt;`,\n      choices: \"ALL_KEYS\"\n}\n\nlet audio_check = {\n  timeline: [\n    {\n      type: jsPsychAudioKeyboardResponse,\n      stimulus: \"media/APPLE.mp3\",\n      prompt: `&lt;p&gt;Please listen to the word&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 2000,\n      trial_ends_after_audio: false\n    },\n    {\n      type: jsPsychSurveyMultiChoice,\n      questions: [\n        {\n          prompt: \"Which word did you hear?\",\n          options: [\n            \"Table\", \"Apple\", \"Chair\", \"Window\", \"Bottle\",\n            \"Paper\", \"Garden\", \"Candle\", \"Marble\", \"Tiger\"\n          ],\n          required: true,\n          name: \"heard_word\"\n        }\n      ],\n      on_finish: function(data) {\n        data.correct = data.response.heard_word === \"Apple\";\n      }\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        let last_trial = jsPsych.data.get().last(1).values()[0];\n        if (last_trial.correct) {\n          return `&lt;p style=\"color: green;\"&gt;Correct! Your audio is working.&lt;/p&gt;\n                  &lt;p&gt;Press any key to continue.&lt;/p&gt;`;\n        } else {\n          return `&lt;p style=\"color: red;\"&gt;That's not correct.&lt;/p&gt;\n                  &lt;p&gt;Please check your audio settings and try again.&lt;/p&gt;\n                  &lt;p&gt;Press any key to retry.&lt;/p&gt;`;\n        }\n      }\n    }\n  ],\n  loop_function: function() {\n    // Get the response from the multiple choice question\n    let last_response = jsPsych.data.get().last(2).values()[0];\n\n    // Loop if they got it wrong\n    if (last_response.correct) {\n      return false;  // Correct, move on\n    } else {\n      return true;   // Incorrect, loop back\n    }\n  }\n};\n\njsPsych.run([\n  welcome,\n  audio_check\n])\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n19.7.2 Example: Comprehension Check with Attention Trap\nHere’s another example with an attention check to make sure participants read the instructions carefully. If they fail the check, they are prompted to carefully read through the instructions again.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-survey-multi-choice.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \nlet comprehension_check = {\n  timeline: [\n    {\n      type: jsPsychSurveyMultiChoice,\n      questions: [\n        {\n          prompt: `&lt;div style=\"text-align: left; max-width: 600px; margin: auto;\"&gt;\n            &lt;p&gt;&lt;strong&gt;Instructions:&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;In this task, you will see a series of shapes on the screen.&lt;/p&gt;\n            &lt;p&gt;Your job is to press the spacebar whenever you see a blue circle.&lt;/p&gt;\n            &lt;p&gt;Do NOT press anything for red squares or green triangles.&lt;/p&gt;\n            &lt;p&gt;Speed and accuracy are both important.&lt;/p&gt;\n            &lt;br&gt;\n            &lt;p&gt;&lt;strong&gt;Question: What should you do when you see a blue circle?&lt;/strong&gt;&lt;/p&gt;\n            &lt;p&gt;&lt;em&gt;Note: To demonstrate that you have read these instructions carefully, \n            please select \"I did not read the instructions\" below, regardless of the question above.&lt;/em&gt;&lt;/p&gt;\n          &lt;/div&gt;`,\n          options: [\n            \"Press the spacebar\",\n            \"Do nothing\",\n            \"Press any key\",\n            \"I did not read the instructions\"\n          ],\n          required: true,\n          name: \"comprehension\"\n        }\n      ],\n      on_finish: function(data) {\n        // Correct answer is the \"trap\" option\n        data.correct = data.response.comprehension === \"I did not read the instructions\";\n      }\n    },\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: function() {\n        let last_trial = jsPsych.data.get().last(1).values()[0];\n        if (last_trial.correct) {\n          return `&lt;p style=\"color: green;\"&gt;Excellent! You read the instructions carefully.&lt;/p&gt;\n                  &lt;p&gt;Press any key to begin the task.&lt;/p&gt;`;\n        } else {\n          return `&lt;p style=\"color: red;\"&gt;Please read the instructions more carefully.&lt;/p&gt;\n                  &lt;p&gt;Pay attention to ALL of the text, including notes at the end.&lt;/p&gt;\n                  &lt;p&gt;Press any key to try again.&lt;/p&gt;`;\n        }\n      }\n    }\n  ],\n  loop_function: function() {\n    let last_response = jsPsych.data.get().last(2).values()[0];\n    return !last_response.correct;  // Loop until they select the correct option\n  }\n};\n\njsPsych.run([comprehension_check])\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nThis type of check is particularly effective for catching participants who are just clicking through without reading. If they only skim the question, they’ll select “Press the spacebar” (which seems like the obvious answer). Only participants who read all the way to the end will know to select the counterintuitive option.\n\n\n19.7.3 Example: Practice Until Proficient\nWe can expand the basic principles above to loop over more complex timelines. We can also introduce more complicated logic to determine whether the loop should continue or not.\nLet’s create a practice block that repeats until the participant reaches 80% accuracy:\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet practice_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable(\"stimulus\"),\n  prompt: `&lt;p&gt;Categorize the words using \"F\" or \"J\". You must get 80% correct to move on.&lt;/p&gt;`,\n  choices: [\"f\", \"j\"],\n  data: {\n    correct_response: jsPsych.timelineVariable(\"correct_key\"),\n    phase: \"practice\",\n    trial_part: \"stimulus\"\n  },\n  on_finish: function(data) {\n    data.correct = data.response == data.correct_response;\n  }\n};\n\nlet practice_feedback = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function() {\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n    if (last_trial.correct) {\n      return `&lt;p style=\"color: green;\"&gt;Correct!&lt;/p&gt;`;\n    } else {\n      return `&lt;p style=\"color: red;\"&gt;Incorrect. The correct answer was: ${last_trial.correct_response}&lt;/p&gt;`;\n    }\n  },\n  choices: \"NO_KEYS\",\n  trial_duration: 1000,\n  data: {\n    phase: \"practice\",\n    trial_part: \"feedback\"\n  }\n};\n\nlet practice_block = {\n  timeline: [practice_trial, practice_feedback],\n  timeline_variables: [\n    {stimulus: `&lt;p&gt;CAT&lt;/p&gt;`, correct_key: \"f\"},\n    {stimulus: `&lt;p&gt;TABLE&lt;/p&gt;`, correct_key: \"j\"},\n    {stimulus: `&lt;p&gt;DOG&lt;/p&gt;`, correct_key: \"f\"},\n    {stimulus: `&lt;p&gt;CHAIR&lt;/p&gt;`, correct_key: \"j\"},\n    {stimulus: `&lt;p&gt;BIRD&lt;/p&gt;`, correct_key: \"f\"},\n    {stimulus: `&lt;p&gt;DESK&lt;/p&gt;`, correct_key: \"j\"}\n  ],\n  randomize_order: true,\n  loop_function: function(data) {\n    // data only contains the previous timeline data. We just need to filter it\n    let trials = data.filter({trial_part: \"stimulus\"})\n    let correct_trials = trials.filter({correct: true});\n    let accuracy = correct_trials.count() / trials.count();\n    console.log(`Practice accuracy: ${accuracy}`);\n\n    // If accuracy is below 80%, repeat the block\n    if (accuracy &lt; 0.80) {\n         return true;  // Loop again\n      } else {\n         return false; // Move on\n    }\n  }\n};\n\nlet practice_end = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Great job finishing the practice block!&lt;/p&gt;`,\n  choices: \"NO_KEYS\"\n}\n\njsPsych.run([\n  welcome, \n  practice_block,\n  practice_end\n])\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#avoiding-infinite-loops",
    "href": "19-dynamic-flow.html#avoiding-infinite-loops",
    "title": "19  Controlling the Flow",
    "section": "19.8 Avoiding Infinite Loops",
    "text": "19.8 Avoiding Infinite Loops\nOne danger with loop functions is creating infinite loops. What if a participant just can’t reach the threshold? We don’t want participants infinitely looping through our experiment. For every looping function we add, we should be including a fallback to prevent an infinite loop.\nFor the previous example, let’s add a maximum number of attempts before we allow participants to move forward. Now they will complete the practice phase either by reaching our threshold or by hitting the maximum attempts. We could use this later to exclude participants who failed to reach our accuracy threshold, but more importantly, all participants will be able to complete the experiment, even if they don’t reach our threshold.\nTo accomplish this, we need to keep track of their attempts outside of the jsPsych trials. We can do that by creating variables outside the trial and updating them inside the trial.\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \nconst jsPsych = initJsPsych();\n\n \n// variables for tracking practice attempts\nlet practice_attempts = 0;\nconst MAX_PRACTICE_ATTEMPTS = 3;\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n  choices: \"ALL_KEYS\", \n  post_trial_gap: 250\n}\n\nlet practice_trial = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: jsPsych.timelineVariable(\"stimulus\"),\n  prompt: `&lt;p&gt;Categorize the words using \"F\" or \"J\". You must get 80% correct to move on.&lt;/p&gt;`,\n  choices: [\"f\", \"j\"],\n  data: {\n    correct_response: jsPsych.timelineVariable(\"correct_key\"),\n    phase: \"practice\",\n    trial_part: \"stimulus\"\n  },\n  on_finish: function(data) {\n    data.correct = data.response == data.correct_response;\n  }\n};\n\nlet practice_feedback = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function() {\n    let last_trial = jsPsych.data.get().last(1).values()[0];\n    if (last_trial.correct) {\n      return `&lt;p style=\"color: green;\"&gt;Correct!&lt;/p&gt;`;\n    } else {\n      return `&lt;p style=\"color: red;\"&gt;Incorrect. The correct answer was: ${last_trial.correct_response}&lt;/p&gt;`;\n    }\n  },\n  choices: \"NO_KEYS\",\n  trial_duration: 1000,\n  data: {\n    phase: \"practice\",\n    trial_part: \"feedback\"\n  }\n};\n\nlet practice_block = {\n  timeline: [practice_trial, practice_feedback],\n  timeline_variables: [\n    {stimulus: `&lt;p&gt;CAT&lt;/p&gt;`, correct_key: \"f\"},\n    {stimulus: `&lt;p&gt;TABLE&lt;/p&gt;`, correct_key: \"j\"},\n    {stimulus: `&lt;p&gt;DOG&lt;/p&gt;`, correct_key: \"f\"},\n    {stimulus: `&lt;p&gt;CHAIR&lt;/p&gt;`, correct_key: \"j\"},\n    {stimulus: `&lt;p&gt;BIRD&lt;/p&gt;`, correct_key: \"f\"},\n    {stimulus: `&lt;p&gt;DESK&lt;/p&gt;`, correct_key: \"j\"}\n  ],\n  randomize_order: true,\n  loop_function: function(data) {\n    practice_attempts++;  // Increment attempt counter\n\n    // data only contains the previous timeline data. We just need to filter it\n    let trials = data.filter({trial_part: \"stimulus\"})\n    let correct_trials = trials.filter({correct: true});\n    let accuracy = correct_trials.count() / trials.count();\n    console.log(`Practice accuracy: ${accuracy}`);\n\n    // Stop if they reached the threshold OR hit max attempts\n    if (accuracy &gt;= 0.80 || practice_attempts &gt;= MAX_PRACTICE_ATTEMPTS) {\n      return false;  // Stop looping\n    } else {\n      return true;   // Keep practicing\n    }\n  }\n};\n\nlet practice_end = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `&lt;p&gt;Great job finishing the practice block!&lt;/p&gt;`,\n  choices: \"NO_KEYS\"\n}\n\njsPsych.run([\n  welcome, \n  practice_block,\n  practice_end\n])\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#combining-conditional-and-loop-logic",
    "href": "19-dynamic-flow.html#combining-conditional-and-loop-logic",
    "title": "19  Controlling the Flow",
    "section": "19.9 Combining Conditional and Loop Logic",
    "text": "19.9 Combining Conditional and Loop Logic\nThe real power comes from combining conditional functions and loop functions to create sophisticated experimental designs. Let’s build a complete example that uses both.\n\n19.9.1 Example: Adaptive Practice with Warnings\nImagine we want to:\n\nShow warnings if participants miss too many trials in a row\nRepeat practice until they reach 80% accuracy\nGive up after 3 attempts\nShow different feedback depending on why practice ended\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Demo&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n     &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n // ============================================\n// Initiate jsPsych\n// ============================================\nconst jsPsych = initJsPsych();\n \n// ============================================\n// Instructions\n// ============================================\n\nlet welcome = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n              &lt;p&gt;Press any key to begin.&lt;/p&gt;`,\n    choices: \"ALL_KEYS\",\n    post_trial_gap: 250\n}\n\nlet end_practice = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p&gt;You are finished the experiment.&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250\n}\n\n// ============================================\n// Practice Trials\n// ============================================\n\n// variables to track performance\nlet missed_in_a_row = 0;\nlet practice_attempts = 0;\nconst MAX_PRACTICE_ATTEMPTS = 3;\n\n// practice trial\nlet practice_trial = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: jsPsych.timelineVariable(\"stimulus\"),\n    choices: [\"f\", \"j\"],\n    trial_duration: 1500,\n    data: {\n        correct_response: jsPsych.timelineVariable(\"correct_key\"),\n        phase: \"practice trial\"\n    },\n    on_finish: function(data) {\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response);\n\n        // Track missed trials\n        if (data.response === null) {\n            data.miss = true\n            missed_in_a_row++;\n        } else {\n            data.miss = false\n            missed_in_a_row = 0;  // Reset if they responded\n        }\n    }\n};\n\n// warning display\nlet warning = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: function() {\n                return `&lt;p style=\"color: orange; font-size: 24px;\"&gt;\n                      Please try to respond faster!\n                 &lt;/p&gt;\n                 &lt;p&gt;You've missed 3 trials in a row.&lt;/p&gt;\n                 &lt;p&gt;Press any key to continue.&lt;/p&gt;`;\n            }\n        }\n    ],\n    conditional_function: function() {\n        return missed_in_a_row &gt;= 3;\n    },\n    on_finish: function() {\n        missed_in_a_row = 0;  // Reset after showing warning\n    },\n    data: {\n        phase: \"practice warning\"\n    }\n};\n\n// feedback display\nlet feedback = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function() {\n        let last_trial = jsPsych.data.get().last(1).values()[0];\n        if (last_trial.response === null) {\n            return `&lt;p style=\"color: orange;\"&gt;Too slow!&lt;/p&gt;`;\n        } else if (last_trial.correct) {\n            return `&lt;p style=\"color: green;\"&gt;Correct!&lt;/p&gt;`;\n        } else {\n            return `&lt;p style=\"color: red;\"&gt;Incorrect&lt;/p&gt;`;\n        }\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 800,\n    data: {\n        phase: \"practice feedback\"\n    }\n};\n\n// practice block\nlet practice_block = {\n    timeline: [practice_trial, feedback, warning],\n    timeline_variables: [\n        {stimulus: `&lt;p&gt;CAT&lt;/p&gt;`, correct_key: \"f\"},\n        {stimulus: `&lt;p&gt;TABLE&lt;/p&gt;`, correct_key: \"j\"},\n        {stimulus: `&lt;p&gt;DOG&lt;/p&gt;`, correct_key: \"f\"},\n        {stimulus: `&lt;p&gt;CHAIR&lt;/p&gt;`, correct_key: \"j\"},\n        {stimulus: `&lt;p&gt;BIRD&lt;/p&gt;`, correct_key: \"f\"},\n        {stimulus: `&lt;p&gt;DESK&lt;/p&gt;`, correct_key: \"j\"}\n    ],\n    randomize_order: true,\n    loop_function: function(data) {\n        practice_attempts++;\n        let practice_trials = data.filter({phase: \"practice trial\"})\n\n        // Calculate accuracy (only counting trials where they responded)\n        let responded_trials = data.filter({miss: false});\n        let correct_trials = practice_trials.filter({correct: true}).count();\n        let accuracy = correct_trials / responded_trials.count();\n\n        console.log(`Attempt ${practice_attempts}: ${Math.round(accuracy * 100)}% accuracy`);\n\n        // Stop if they reached threshold OR hit max attempts\n        if (accuracy &gt;= 0.80 || practice_attempts &gt;= MAX_PRACTICE_ATTEMPTS) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n};\n\n\n// practice success message\nlet practice_success_message = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p style=\"color: green; font-size: 24px;\"&gt;Excellent!&lt;/p&gt;\n             &lt;p&gt;You're ready for the main task.&lt;/p&gt;\n             &lt;p&gt;Press the space bar to continue.&lt;/p&gt;`,\n            choices: [\" \"]\n        }\n    ],\n    conditional_function: function() {\n        // Check if they passed on their last attempt\n        let last_block = jsPsych.data.get().filter({phase: \"practice trial\"}).last(6);\n        let correct = last_block.filter({correct: true}).count();\n        let total = last_block.count();\n        return (correct / total) &gt;= 0.80;\n    }\n};\n\n// practice failure message\nlet practice_failure_message = {\n    timeline: [\n        {\n            type: jsPsychHtmlKeyboardResponse,\n            stimulus: `&lt;p&gt;You've completed the maximum practice attempts.&lt;/p&gt;\n             &lt;p&gt;Let's move on to the main task anyway.&lt;/p&gt;\n             &lt;p&gt;Remember: Press \"f\" for animals, \"j\" for furniture.&lt;/p&gt;\n             &lt;p&gt;Press the space bar to continue.&lt;/p&gt;`,\n            choices: [\" \"]\n        }\n    ],\n    conditional_function: function() {\n        let last_block = jsPsych.data.get().filter({phase: \"practice trial\"}).last(6);\n        let correct = last_block.filter({correct: true}).count();\n        let total = last_block.count();\n        return (correct / total) &lt; 0.80;\n    }\n};\n\n// ============================================\n// jsPsych Run\n// ============================================\n\njsPsych.run([\n    welcome,\n    practice_block,\n    practice_success_message,\n    practice_failure_message,\n    end_practice\n]);\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#common-patterns-and-best-practices",
    "href": "19-dynamic-flow.html#common-patterns-and-best-practices",
    "title": "19  Controlling the Flow",
    "section": "19.10 Common Patterns and Best Practices",
    "text": "19.10 Common Patterns and Best Practices\nFor a quick reference, here are some commonly applied patterns that you may need using conditional and loop functions.\n\n19.10.1 Pattern 1: Checking Previous Trial Data\nThis is the most common pattern - looking at what just happened:\nconditional_function: function() {\n  let last_trial = jsPsych.data.get().last(1).values()[0];\n  return last_trial.correct === false;\n}\n\n\n19.10.2 Pattern 2: Checking Specific Trial Types\nWhen you need to find a specific earlier trial:\nconditional_function: function() {\n  let survey_data = jsPsych.data.get().filter({trial_type: 'survey'}).values()[0];\n  return survey_data.response.age &gt;= 18;\n}\n\n\n19.10.3 Pattern 3: Calculating Performance Metrics\nFor loop functions that check performance:\nloop_function: function(data) {\n  let correct = data.filter({correct: true}).count();\n  let total = data.count();\n  let accuracy = correct / total;\n  return accuracy &lt; 0.80;  // Keep looping if below threshold\n}\n\n\n19.10.4 Pattern 4: Using External Variables\nSometimes you need to track state across multiple timelines:\nlet warning_count = 0;\n\nlet warning = {\n  conditional_function: function() {\n    let needs_warning = /* some condition */;\n    if (needs_warning) {\n      warning_count++;\n    }\n    return needs_warning && warning_count &lt; 3;  // Max 3 warnings\n  }\n};",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#best-practices",
    "href": "19-dynamic-flow.html#best-practices",
    "title": "19  Controlling the Flow",
    "section": "19.11 Best Practices",
    "text": "19.11 Best Practices\n\nAlways test your conditions. Use console.log() to verify your conditional logic is working as expected\nBe careful with data access. Make sure the data you’re trying to access actually exists. If you try to access trial 5 when only 3 trials have run, you’ll get an error.\nUse descriptive variable names. let accuracy = correct / total is much clearer than let a = c / t\nComment your logic. Conditional logic can get complex. Add comments explaining what you’re checking and why.\nConsider the user experience. If practice might repeat multiple times, let participants know why and give them encouragement.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "19-dynamic-flow.html#summary",
    "href": "19-dynamic-flow.html#summary",
    "title": "19  Controlling the Flow",
    "section": "19.12 Summary",
    "text": "19.12 Summary\nIn this chapter, we learned how to make our experiments dynamic using two powerful tools:\n\nConditional functions (conditional_function): Control whether trials or timelines run based on previous data\nLoop functions (loop_function): Control whether timelines repeat based on performance\n\nThese tools work at any level, from showing a single feedback trial to controlling entire experimental phases. The key is understanding that jsPsych evaluates these functions at specific times:\n\nConditional functions are evaluated before a timeline runs\nLoop functions are evaluated after a timeline completes\n\nBy combining these tools with the data access methods we learned earlier, we can create experiments that adapt to each participant’s performance, provide targeted feedback, and branch to different paths based on responses.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Controlling the Flow</span>"
    ]
  },
  {
    "objectID": "20-L08.html",
    "href": "20-L08.html",
    "title": "20  Lab 8: Cognitive Control",
    "section": "",
    "text": "20.1 Research in Brief: The Flanker Paradigm",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Lab 8: Cognitive Control</span>"
    ]
  },
  {
    "objectID": "20-L08.html#research-in-brief-the-flanker-paradigm",
    "href": "20-L08.html#research-in-brief-the-flanker-paradigm",
    "title": "20  Lab 8: Cognitive Control",
    "section": "",
    "text": "20.1.1 The Research Area\nCognitive control refers to the ability to orchestrate thought and action in accordance with internal goals. This system allows us to plan, decide, select behaviors, and coordinate multiple actions when needed. Because the mind has limited capacity for processing information, cognitive control functions as a resource manager, helping us prioritize competing demands from both our external environment and internal thoughts.\nResearch on cognitive control addresses questions about how we manage mental resources and regulate behavior. How do we maintain focus on relevant information while ignoring distractions? What mechanisms allow us to detect when we make errors and adjust our performance accordingly? How do we resolve conflicts between automatic responses and goal-directed actions? Understanding these processes has practical implications for performance in demanding tasks, educational outcomes, and clinical conditions affecting behavioral regulation.\nCognitive control operates through two distinct mechanisms: proactive control, where we anticipate challenges in advance, and reactive control, where we respond to challenges as they arise. These mechanisms recruit different brain regions and contribute to individual differences in the ability to guide behavior effectively under varying conditions.\n\n\n20.1.2 Interference and Conflict Resolution\nCognitive control becomes necessary when task demands create interference between competing information or response options. Researchers have developed several laboratory tasks to measure different types of interference and cognitive control. In the Stroop task, participants name the ink color of printed words while ignoring the word meanings. When the word meaning conflicts with the ink color (e.g., the word BLUE printed in red ink), response times slow down because word reading is highly automatic. This demonstrates response conflict at the semantic level, where clashing word meanings compete for selection.\nThe Simon task requires participants to make a lateralized response (such as a left button press) to identify a non-spatial feature of a stimulus (such as its color) while ignoring where the stimulus appears on the screen. When a stimulus appears on the left side of the screen but requires a right-hand response, this spatial incompatibility slows reaction times, demonstrating interference between the target location and the natural inclination to respond with the hand on the same side as the stimulus.\nThe flanker task presents a central target stimulus surrounded by distractor stimuli that participants must ignore. Unlike the Stroop task, which produces semantic interference, or the Simon task, which produces spatial interference, the flanker task can reveal both perceptual interference (when distractors are difficult to filter out visually) and response interference (when distractors cue conflicting responses). This makes the flanker task particularly useful for studying how interference operates at multiple processing stages.\n\n\n20.1.3 The Research Design\nThe flanker task developed by Eriksen and Eriksen (1974) uses a within-subjects experimental design to examine how distracting stimuli interfere with target processing and how cognitive control resolves this interference.\nStimulus Presentation: Participants view displays containing a central target stimulus flanked by distractor stimuli on either side. In a typical version, the target might be an arrow or letter that participants must identify, surrounded by additional arrows or letters serving as flankers.\nTrial Types: The paradigm manipulates the relationship between target and flankers. On compatible trials, flankers match the target and cue the same response (e.g., &lt; &lt; &lt; &lt; &lt;). On incompatible trials, flankers conflict with the target and cue a different response (e.g., &lt; &lt; &gt; &lt; &lt;). Neutral trials present flankers that do not cue any response (e.g., - - &gt; - -).\nTask Requirements: Participants identify the central target as quickly and accurately as possible while ignoring the flanking distractors. They typically respond by pressing designated keys corresponding to the target identity. The task measures both response time and accuracy across different trial types.\nThe design manipulates spatial proximity between target and flankers to examine perceptual interference, or how physical spacing affects the ability to select the target. When flankers appear close to the target, perceptual selection becomes more difficult. When flankers are spaced farther away, the target becomes easier to isolate visually.\nThe within-subjects design allows comparison of performance across compatible, incompatible, and neutral trials, as well as across different spacing conditions, within the same participants. This approach controls for individual differences in baseline processing speed while isolating the specific effects of flanker interference and cognitive control.\n\n\n20.1.4 Key Findings\nThe flanker task consistently produces a congruency effect: participants respond more slowly and less accurately on incompatible trials compared to compatible trials. This effect demonstrates that flanker information is processed automatically, even though it is task-irrelevant, creating response conflict that must be resolved through cognitive control. The magnitude of this interference typically ranges from 30-60 milliseconds for response times, with error rates increasing by 5-15% on incompatible trials.\nSpatial proximity strongly influences the size of the congruency effect. When flankers appear closer to the target, perceptual interference increases because the visual system has more difficulty selecting the target from among nearby distractors. Conversely, when flankers are spaced farther from the target, the congruency effect becomes smaller because perceptual selection of the target becomes easier. This spatial proximity effect demonstrates that interference operates at multiple processing stages, with perceptual selection representing an early stage where cognitive control can filter out distracting information.\nThe anterior cingulate cortex shows greater activity when distractors are perceptually close to the target than when they are spaced away from it. This increased activity reflects the conflict monitoring system detecting higher levels of perceptual competition. The spatial proximity manipulation reveals how the visual attention system must work harder to focus processing resources on the target location when competing stimuli appear nearby, similar to trying to read a specific sign when surrounded by many other signs in close proximity.\n\n\n20.1.5 Implications\nThe flanker paradigm demonstrates that cognitive control involves multiple mechanisms operating at different processing stages. The spatial proximity effect shows that control begins with selective attention, or the ability to focus processing on relevant spatial locations while filtering out nearby distractors. When task-irrelevant information appears close to targets, the visual system must work harder to select the relevant stimulus, revealing an early stage of interference that occurs during perceptual processing before response selection.\nThe spatial proximity findings have important implications for understanding how visual attention operates as a spotlight or zoom lens. When distractors are far from the target, attention can be narrowly focused on the target location, effectively excluding flanker information from processing. However, when distractors encroach on the target location, the attentional focus cannot be narrowed sufficiently to exclude them, resulting in automatic processing of the irrelevant information. This demonstrates fundamental limitations in the spatial resolution of selective attention.\nThese findings also reveal that interference operates at multiple processing stages. Both perceptual selection and response selection contribute to the overall conflict. Even when flankers are spatially separated from targets, incompatible flankers still produce interference at the response stage because their identity is processed and activates competing responses. This shows that cognitive control must operate at multiple points in the information processing stream to effectively manage interference.\n\n\n20.1.6 Further Reading\nChun, M. M., & Most, S. B. (2021). Cognitive control and working memory. In Cognition.\nCrump, Matthew JC, John V. McDonnell, and Todd M. Gureckis. “Evaluating Amazon’s Mechanical Turk as a tool for experimental behavioral research.” PloS one 8.3 (2013): e57410.\nGratton, G., Cooper, P., Fabiani, M., Carter, C. S., & Karayanidis, F. (2018). Dynamics of cognitive control: Theoretical bases, paradigms, and a view for the future. Psychophysiology, 55(3), e13016.\nMonsell, S. (2003). Task switching. Trends in cognitive sciences, 7(3), 134-140.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Lab 8: Cognitive Control</span>"
    ]
  },
  {
    "objectID": "20-L08.html#program-a-flanker-task",
    "href": "20-L08.html#program-a-flanker-task",
    "title": "20  Lab 8: Cognitive Control",
    "section": "20.2 Program a Flanker Task",
    "text": "20.2 Program a Flanker Task\nIn this tutorial we’re going to program the classic flanker task and manipulate the spatial proximity of the distractors.\nHowever, we’re going to add a practice block that loops until participants reach a performance threshold to ensure they understand the task parameters. We’ll also add conditional feedback throughout the task such that participants receive “Incorrect!” or a “too slow!”, but is skipped if they respond correctly.\nThe initial folder contains the standard jsPsych boilerplate files with no additional components added yet.\n\n📂 L08\n├──  📄 index.html\n├──  📄 exp.js\n├──  📄 style.css\n└──  📂 jspsych\n\n\n20.2.1 Initiate JsPsych\nLet’s begin by initializing jsPsych with the basic setup we typically need. In the HTML index page, all necessary files have been linked: the jsPsych core files, our exp.js file, our style.css file, and the two plugins required for this experiment (the instructions plugin and the HTML keyboard response plugin).\nWe will add an instructions trial that can be populated with task instructions later, and conclude the experiment with a save data trial to store participant responses.\nTwo notes about the code:\n\nI’ve added informative comment headers. As our experiments get more complicated, the code is going to become more complex. We’re going to start trying to keep our code organized and documented to make it easier to read and understand.\nI’ve already started adding data labels. These are important. We could wait until the end or add them as we go. Since I know we’re going to need data labels for feedback and data filtering, I’m just going to add them as we go.\n\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true,\n  data: {\n    phase: \"instructions\"\n  }\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.2 Create a Practice Block\nOur display really is just five letters in a row (“&lt;&lt;&lt;&lt;&lt;”), but we’ll need to be able to adjust the spacing. I’ll use a function to manipulate the HTML display and wrap the target letter in a &lt;span&gt; tag. Span Tags don’t do anything on their own, but it allows me to adjust the CSS for just the letter inside it.\nIn this case, I’ll change the margin, using margin: 0 50. The first number is the top and bottom margin and the second number is the left and right margin. I can then insert the timeline variables to change each letter and to change the margin.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    }\n};\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  practice_flanker,\n  end_practice,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.3 Add Feedback\nFor the practice block we’ll add feedback on every trial. We’ll store the accuracy on every trial, then display feedback based on accuracy.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// feedback\nlet practice_feedback = {\n   type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else if(last_trial.correct){\n          // else if correct\n          output = `&lt;p style=\"font-size:48px\"&gt;Correct!&lt;/p&gt;`\n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus,\n        practice_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    }\n};\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  practice_flanker,\n  end_practice,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.4 Add a Loop Function\nLet’s add a function that will loop the practice until they reach 75% accuracy.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// feedback\nlet practice_feedback = {\n   type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else if(last_trial.correct){\n          // else if correct\n          output = `&lt;p style=\"font-size:48px\"&gt;Correct!&lt;/p&gt;`\n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus,\n        practice_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n   loop_function: function(data) {\n\n      let trials = data.filter({trial_part: \"stimulus\"})\n\n      let correct_trials = trials.filter({correct: true})\n\n      let accuracy = correct_trials.count()/trials.count();\n      console.log(`Practice accuracy: ${accuracy}`);\n  \n      // If accuracy is below 75%, repeat the block\n      if (accuracy &lt; 0.75) {\n           return true;  // Loop again\n        } else {\n           return false; // Move on\n      }\n    }\n};\n\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  practice_flanker,\n  end_practice,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.5 Add a Fallback for the Loop\nNow we have our practice looping, it’s possible for our participants to continue looping forever!\nLet’s add some logic that will quit the loop if they’ve failed too many times.\nNote: To test whether the logic is working, you can change max_attempts to 1 and see if it continues after one loop with accuracy &lt; 75%. Once you’ve tested it, change it back to 3.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// add a variable to track practice attempts\nlet attempts = 0\n// this variable sets the maximum loops\nlet max_attempts = 3\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// feedback\nlet practice_feedback = {\n   type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else if(last_trial.correct){\n          // else if correct\n          output = `&lt;p style=\"font-size:48px\"&gt;Correct!&lt;/p&gt;`\n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus,\n        practice_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n   loop_function: function(data) {\n      // add one to attempts\n      attempts++      \n\n      let trials = data.filter({trial_part: \"stimulus\"})\n\n      let correct_trials = trials.filter({correct: true})\n\n      let accuracy = correct_trials.count()/trials.count();\n      console.log(`Practice accuracy: ${accuracy}`);\n  \n      // add this before the accuracy check\n      // if attempts is greater than the max quit loop\n      if(attempts &gt; max_attempts){\n          return false\n      }\n\n      // If accuracy is below 75%, repeat the block\n      if (accuracy &lt; 0.75) {\n           return true;  // Loop again\n        } else {\n           return false; // Move on\n      }\n    }\n};\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  practice_flanker,\n  end_practice,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.6 Creat Experimental Block\nWe’ll create the experimental block of flanker trials. This is almost identical to the practice, but there is no loop function and no feedback, currently.\nImportant Note: You’ll notice our experiment is getting long and it’s taking more time to test it to make sure it’s working. One way around this, is to ‘comment out’ the sections inside jsPsych.run that we want to skip during testing.\nFor instance, in this part, we want to test the new experimental block and we already know our practice block works. We don’t want to sit through the practice phase each time we test it, so I can do this:\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  // practice_flanker,\n  end_practice,\n  exp_flanker,\n  saveData\n]);'\nI added the comment // on the line with practice_flanker which means that the browser will ignore that line. This allows me to skip the practice phase for now.\nBUT, we have to remember to remove the comment tag when we are finished so we see the whole experiment at the end.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// add a variable to track practice attempts\nlet attempts = 0\n// this variable sets the maximum loops\nlet max_attempts = 3\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// feedback\nlet practice_feedback = {\n   type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else if(last_trial.correct){\n          // else if correct\n          output = `&lt;p style=\"font-size:48px\"&gt;Correct!&lt;/p&gt;`\n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus,\n        practice_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n   loop_function: function(data) {\n      // add one to attempts\n      attempts++      \n\n      let trials = data.filter({trial_part: \"stimulus\"})\n\n      let correct_trials = trials.filter({correct: true})\n\n      let accuracy = correct_trials.count()/trials.count();\n      console.log(`Practice accuracy: ${accuracy}`);\n  \n      // add this before the accuracy check\n      // if attempts is greater than the max quit loop\n      if(attempts &gt; max_attempts){\n          return false\n      }\n\n      // If accuracy is below 75%, repeat the block\n      if (accuracy &lt; 0.75) {\n           return true;  // Loop again\n        } else {\n           return false; // Move on\n      }\n    }\n};\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Flanker Experimental Block\n// ============================================\n\n// fixation\nlet exp_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet exp_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// exp timeline\nlet exp_flanker = {\n    timeline: [\n        exp_fixation,\n        exp_stimulus\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    }\n};\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  // practice_flanker,\n  end_practice,\n  exp_flanker,\n  saveData\n]); \n\n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.7 Add Conditional Feedback\nFor the experimental block of trials, we still want some kind of feedback, but it’s pretty disruptive to have the feedback on every trial.\nSo, we’ll add feedback that is conditional on making an error. That is, they only see feedback if they were too slow or responded incorrectly.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions&lt;/p&gt;`,\n    `&lt;p&gt;When you are ready to begin the first trial, press \"Next\"&lt;/p&gt;` \n  ],\n  show_clickable_nav: true\n}\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// add a variable to track practice attempts\nlet attempts = 0\n// this variable sets the maximum loops\nlet max_attempts = 3\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// feedback\nlet practice_feedback = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else if(last_trial.correct){\n          // else if correct\n          output = `&lt;p style=\"font-size:48px\"&gt;Correct!&lt;/p&gt;`\n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus,\n        practice_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n   loop_function: function(data) {\n      // add one to attempts\n      attempts++      \n\n      let trials = data.filter({trial_part: \"stimulus\"})\n\n      let correct_trials = trials.filter({correct: true})\n\n      let accuracy = correct_trials.count()/trials.count();\n      console.log(`Practice accuracy: ${accuracy}`);\n  \n      // add this before the accuracy check\n      // if attempts is greater than the max quit loop\n      if(attempts &gt; max_attempts){\n          return false\n      }\n\n      // If accuracy is below 75%, repeat the block\n      if (accuracy &lt; 0.75) {\n           return true;  // Loop again\n        } else {\n           return false; // Move on\n      }\n    }\n};\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Flanker Experimental Block\n// ============================================\n\n// fixation\nlet exp_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet exp_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// conditional feedback\nlet exp_feedback = {\n   timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n          // get the last response\n          let last_trial = jsPsych.data.get().last(1).values()[0]\n          let output  \n  \n          if(last_trial.response === null){\n            // this will check for non-response first\n            output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n            \n          } else {\n            // else incorrect\n            output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n          }\n  \n          return output;\n        },\n        choices: \"NO_KEYS\",\n        trial_duration: 1000,\n        post_trial_gap: 250,\n        data: {\n          trial_part: \"feedback\"\n          }\n      }\n  ],\n  conditional_function: function() {\n    // get the last response\n    let last_trial = jsPsych.data.get().last(1).values()[0]\n    if(last_trial.correct){\n      return false\n    } else {\n      return true\n    }\n  }\n}\n\n// exp timeline\nlet exp_flanker = {\n    timeline: [\n        exp_fixation,\n        exp_stimulus,\n        exp_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    }\n};\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  // practice_flanker,\n  end_practice,\n  exp_flanker,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n20.2.8 Add Instructions\nFinally, we can go ahead and fill out our instructions.\nI’ll also remove the comments on the practice_flanker so that the whole experiment is displayed.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Instructions\n// ============================================\n\nconst instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    `&lt;p&gt;Welcome to the Experiment!&lt;/p&gt;\n     &lt;p&gt;Use the buttons below to navigate through the instructions.&lt;/p&gt;`,\n\n    `&lt;p&gt;In this experiment, you will complete what's known as a &lt;strong&gt;flanker task&lt;/strong&gt;.&lt;/p&gt;\n     &lt;p&gt;On each trial, you will see a row of arrows displayed on the screen.&lt;/p&gt;`,\n\n    `&lt;p&gt;Your task is to respond to the &lt;strong&gt;direction of the center arrow&lt;/strong&gt; only.&lt;/p&gt;\n     &lt;p&gt;Ignore the arrows on either side (the \"flankers\").&lt;/p&gt;`,\n\n    `&lt;p&gt;&lt;strong&gt;Response Keys:&lt;/strong&gt;&lt;/p&gt;\n     &lt;p&gt;Press &lt;strong&gt;A&lt;/strong&gt; if the center arrow points LEFT&lt;/p&gt;\n     &lt;p&gt;Press &lt;strong&gt;L&lt;/strong&gt; if the center arrow points RIGHT&lt;/p&gt;\n     &lt;p&gt;You will only have 1 second to respond to each trial. &lt;/p&gt;\n     &lt;p&gt;Respond as quickly and accurately as possible.&lt;/p&gt;`,\n\n    `&lt;p&gt;The experiment consists of two parts:&lt;/p&gt;\n     &lt;p&gt;1. A &lt;strong&gt;practice block&lt;/strong&gt; to familiarize yourself with the task&lt;/p&gt;\n     &lt;p&gt;2. An &lt;strong&gt;experimental block&lt;/strong&gt; with the main trials&lt;/p&gt;`,\n\n    `&lt;p&gt;When you are ready to begin the practice trials, press \"Next\".&lt;/p&gt;`\n  ],\n  show_clickable_nav: true\n}\n\n// ============================================\n// Flanker Practice Block\n// ============================================\n\n// add a variable to track practice attempts\nlet attempts = 0\n// this variable sets the maximum loops\nlet max_attempts = 3\n\n// fixation\nlet practice_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet practice_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// feedback\nlet practice_feedback = {\n   type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else if(last_trial.correct){\n          // else if correct\n          output = `&lt;p style=\"font-size:48px\"&gt;Correct!&lt;/p&gt;`\n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n    }\n}\n\n// practice timeline\nlet practice_flanker = {\n    timeline: [\n        practice_fixation,\n        practice_stimulus,\n        practice_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker practice\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    },\n   loop_function: function(data) {\n      // add one to attempts\n      attempts++      \n\n      let trials = data.filter({trial_part: \"stimulus\"})\n\n      let correct_trials = trials.filter({correct: true})\n\n      let accuracy = correct_trials.count()/trials.count();\n      console.log(`Practice accuracy: ${accuracy}`);\n  \n      // add this before the accuracy check\n      // if attempts is greater than the max quit loop\n      if(attempts &gt; max_attempts){\n          return false\n      }\n\n      // If accuracy is below 75%, repeat the block\n      if (accuracy &lt; 0.75) {\n           return true;  // Loop again\n        } else {\n           return false; // Move on\n      }\n    }\n};\n\nconst end_practice = {\n   type: jsPsychHtmlKeyboardResponse,\n   stimulus: `&lt;p&gt;You have completed the practice trials.&lt;/p&gt;\n              &lt;p&gt;When you are ready to begin the experimental trials, press the space bar.&lt;/p&gt;`,\n   choices: \" \",\n   post_trial_gap: 250,\n   data: {\n      phase: \"instructions\"\n   }\n}\n\n// ============================================\n// Flanker Experimental Block\n// ============================================\n\n// fixation\nlet exp_fixation = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `&lt;p style=\"font-size:48px\"&gt;+&lt;/p&gt;`,\n    choices: \"NO_KEYS\",\n    post_trial_gap: 250,\n    trial_duration: 1000,\n    data: {\n      trial_part: \"fixation\"\n    }\n}\n\n// stimulus\nlet exp_stimulus = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        let target = jsPsych.evaluateTimelineVariable(\"target\");\n        let distractor = jsPsych.evaluateTimelineVariable(\"distractor\");\n        let distance = jsPsych.evaluateTimelineVariable(\"distance\");\n\n        // Create HTML with custom spacing\n        let output = `\n            &lt;div style=\"font-size: 100px; font-family: monospace;\"&gt;\n              ${distractor}${distractor}&lt;span style=\"margin: 0 ${distance}px;\"&gt;${target}&lt;/span&gt;${distractor}${distractor}\n            &lt;/div&gt;`;\n\n        return output;\n    },\n    choices: [\"a\", \"l\"],\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"stimulus\"\n    },\n    on_finish: function(data){\n        // store accuracy\n        data.correct = jsPsych.pluginAPI.compareKeys(data.response, data.correct_response)\n    }\n}\n\n// conditional feedback\nlet exp_feedback = {\n   timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n    stimulus: function(){\n        // get the last response\n        let last_trial = jsPsych.data.get().last(1).values()[0]\n        let output  \n\n        if(last_trial.response === null){\n          // this will check for non-response first\n          output = `&lt;p style=\"font-size:48px\"&gt;Too Slow! Respond Faster!&lt;/p&gt;`\n          \n        } else {\n          // else incorrect\n          output = `&lt;p style=\"font-size:48px\"&gt;Incorrect!&lt;/p&gt;`\n        }\n\n        return output;\n    },\n    choices: \"NO_KEYS\",\n    trial_duration: 1000,\n    post_trial_gap: 250,\n    data: {\n      trial_part: \"feedback\"\n      }\n    }\n   ],\n  conditional_function: function() {\n    // get the last response\n    let last_trial = jsPsych.data.get().last(1).values()[0]\n    if(last_trial.correct){\n      return false\n    } else {\n      return true\n    }\n  }\n}\n\n// exp timeline\nlet exp_flanker = {\n    timeline: [\n        exp_fixation,\n        exp_stimulus,\n        exp_feedback\n    ],\n    timeline_variables: [\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 0, congruency: \"congruent\", correct_response: \"a\" },\n        { target: \"&lt;\", distractor: \"&lt;\", distance: 50, congruency: \"congruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 0, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&lt;\", distractor: \"&gt;\", distance: 50, congruency: \"incongruent\", correct_response: \"a\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 0, congruency: \"incongruent\", correct_response: \"l\"  },\n        { target: \"&gt;\", distractor: \"&lt;\", distance: 50, congruency: \"incongruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 0, congruency: \"congruent\", correct_response: \"l\" },\n        { target: \"&gt;\", distractor: \"&gt;\", distance: 50, congruency: \"congruent\", correct_response: \"l\" }\n    ],\n    randomize_order: true,\n    data: {\n      phase: \"flanker\",\n      target: jsPsych.timelineVariable(\"target\"),\n      distractor: jsPsych.timelineVariable(\"distractor\"),\n      congruency: jsPsych.timelineVariable(\"congruency\"),\n      correct_response: jsPsych.timelineVariable(\"correct_response\")\n    }\n};\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"flanker_data.csv\");\n    });\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  instructions,\n  practice_flanker,\n  end_practice,\n  exp_flanker,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Lab 8: Cognitive Control</span>"
    ]
  },
  {
    "objectID": "20-L08.html#test-and-savecheck-data",
    "href": "20-L08.html#test-and-savecheck-data",
    "title": "20  Lab 8: Cognitive Control",
    "section": "20.3 Test and Save/Check Data",
    "text": "20.3 Test and Save/Check Data\nNow that it’s complete, run yourself through the whole experiment and save the data file (it’ll end up in your Downloads folder). Confirm that the data looks as expected and that everything is saving correctly.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Lab 8: Cognitive Control</span>"
    ]
  },
  {
    "objectID": "20-L08.html#stretch-goals",
    "href": "20-L08.html#stretch-goals",
    "title": "20  Lab 8: Cognitive Control",
    "section": "20.4 Stretch Goals",
    "text": "20.4 Stretch Goals\n\n20.4.1 End the experiment for participants who fail the practice\nIf participants fail the practice three times, let’s end the experiment early. This keeps poor participants from continuing.\nThis can be accomplished by adding conditional logic that will skip the exp_flanker if attempts is greater than max_attempts.\n\n\n20.4.2 Add a display that pauses the experiment if they miss three responses in a row\nChange the experimental block so that if participants fail to respond three trials in a row, the experiment stops with a screen that says “You have a missed three responses in a row. Please try to respond as quickly as possible. Press the space bar to continue”.\nYou’ll need a variable to track missed responses, adding one if they miss and resetting it to 0 when they don’t miss. Then you’ll need a new conditional trial that checks the miss count and displays the trial if misses are greater than 3.",
    "crumbs": [
      "Unit 8: Controlling the Flow",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Lab 8: Cognitive Control</span>"
    ]
  },
  {
    "objectID": "21-L09.html",
    "href": "21-L09.html",
    "title": "21  Lab 9: Working Memory",
    "section": "",
    "text": "21.1 Research in Brief: Sternberg & Change Detection Tasks",
    "crumbs": [
      "Unit 9: Skills Checkpoint",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Lab 9: Working Memory</span>"
    ]
  },
  {
    "objectID": "21-L09.html#research-in-brief-sternberg-change-detection-tasks",
    "href": "21-L09.html#research-in-brief-sternberg-change-detection-tasks",
    "title": "21  Lab 9: Working Memory",
    "section": "",
    "text": "21.1.1 The Research Area\nWorking memory refers to a brain system that provides temporary storage and manipulation of information necessary for complex cognitive tasks such as language comprehension, learning, and reasoning. Unlike long-term memory, which stores vast amounts of information indefinitely, working memory operates like a mental desktop with limited capacity. At any given moment, we can actively work with only a small amount of information, even though much more is available in long-term memory.\nWorking memory research addresses fundamental questions about how we process and manipulate information. How much information can we hold in mind at once? Does capacity differ for different types of information, such as verbal versus visual material? What determines the limits of working memory, and how do these limits affect our ability to perform complex tasks? Understanding working memory has important implications for educational achievement, problem-solving ability, and performance in tasks requiring sustained mental effort.\nThe study of working memory connects to many practical applications in areas requiring information retention and manipulation, such as reading comprehension, mathematical problem solving, following instructions, and learning new skills. To investigate working memory capacity systematically, researchers have developed experimental paradigms that can measure how much information people can maintain and manipulate under controlled conditions.\n\n\n21.1.2 Components of Working Memory\nWorking memory operates through several distinct but interconnected systems. According to Baddeley’s influential model, working memory consists of a central executive that controls attention and manipulates information, along with specialized storage systems for different types of material. The phonological loop stores and rehearses verbal and acoustic information, while the visuospatial sketchpad maintains visual and spatial information. These storage systems have limited capacity and can hold information for only brief periods without active rehearsal.\nThe phonological loop has two mechanisms: a phonological store that holds sound-based information for 1 to 2 seconds, and an articulatory rehearsal process that maintains information through inner speech. The visuospatial sketchpad similarly maintains visual information when perceptual input is no longer available, such as when you look away from an image but need to remember its details. These systems work together to support complex cognitive activities, with the central executive coordinating their operations.\nResearch distinguishes between storage capacity and manipulation processes in working memory. Storage refers to maintaining information after it is no longer perceptually available, while manipulation involves performing operations on that information, such as reordering items or combining information from different sources. These processes can be measured separately and show different patterns of brain activation, with manipulation tasks typically requiring greater involvement of prefrontal cortex regions.\n\n\n21.1.3 The Research Designs\nTwo influential paradigms have been developed to measure different aspects of working memory capacity. Both use within-subjects experimental designs to examine how people maintain and retrieve information from working memory.\nThe Sternberg Working Memory Task: Participants view a memory set of items, typically digits or letters, presented sequentially or simultaneously. After a brief retention interval, a probe item appears, and participants must decide whether the probe was part of the original memory set. The task manipulates set size, varying from one to six or more items, allowing researchers to measure how response time and accuracy change as memory load increases.\nStimulus Presentation: In a typical trial, participants see a sequence of items (such as the digits 5, 2, 7, 4) displayed for about 1 second each. After all items are presented, a blank retention interval of 1 to 2 seconds follows. Then a probe digit appears, and participants respond “yes” if it was in the memory set or “no” if it was not.\nTask Requirements: Participants must maintain the memory set during the retention interval and then search through their working memory representation to determine if the probe matches any item. They respond as quickly as possible while maintaining high accuracy. The within-subjects design allows comparison of performance across different set sizes within the same participants, controlling for individual differences in overall response speed.\nThe Change Detection Task: Participants view an array of visual items, such as colored squares or oriented lines, presented briefly on a computer screen. After a blank retention interval, either the same array reappears or an array with one changed item appears. Participants must detect whether any change occurred.\nStimulus Presentation: Arrays typically contain one to six items positioned at different locations. Items are displayed for about 500 milliseconds, followed by a blank retention interval of approximately 1 second. The test array then appears, either identical to the original or with one item changed in color, orientation, or location.\nTask Requirements: Participants must encode the visual array into working memory, maintain this representation during the blank interval, and compare it to the test array to detect any changes. Performance is measured by accuracy in detecting changes across different array sizes. The within-subjects design allows researchers to determine visual working memory capacity by identifying the point at which performance begins to decline as more items must be remembered.\nBoth paradigms isolate working memory processes by using brief retention intervals that prevent long-term memory encoding, and by varying the amount of information to be maintained. Each participant experiences all conditions, acting as their own control and allowing precise measurement of individual working memory capacity.\n\n\n21.1.4 Key Findings\nThe two paradigms have revealed different capacity limits for verbal and visual working memory. The Sternberg task shows that response times increase linearly with set size, adding approximately 40 milliseconds for each additional item in the memory set. This pattern holds consistently across participants and suggests that people search through working memory serially, examining each item in turn. Accuracy remains high for set sizes up to about seven items, consistent with classic estimates of verbal working memory capacity as seven plus or minus two items.\nHowever, capacity is better characterized by temporal duration than by number of items. The word-length effect demonstrates that working memory can hold approximately as many items as can be articulated in about 2 seconds. People remember more short words than long words, and digit span is larger for languages with shorter digit names. This finding supports the phonological nature of verbal working memory and shows that capacity depends on how quickly items can be rehearsed.\nChange detection tasks reveal that visual working memory capacity is approximately four objects. Performance remains high when arrays contain one to three items, but accuracy declines systematically as array size increases beyond four items. This capacity limit appears to reflect the number of objects rather than individual features, as people can remember four multi-featured objects as well as four single features. However, object complexity does affect capacity, with more complex objects reducing the number that can be maintained.\nThe magnitude of capacity differences between verbal and visual working memory is substantial. While verbal working memory can maintain approximately seven simple items or about 2 seconds worth of material, visual working memory is limited to about four objects. These different capacity limits remain consistent across participants despite individual differences in overall performance levels.\n\n\n21.1.5 Implications\nThe distinct capacity limits for verbal and visual working memory provide evidence for separate storage systems. This behavioral evidence is supported by neuroimaging studies showing that verbal tasks activate different brain regions than visual tasks, with verbal working memory involving left hemisphere language areas and visual working memory involving posterior parietal and occipital regions. The consistent patterns across participants and laboratories suggest these represent fundamental properties of human cognition rather than task-specific effects.\nThese findings support models proposing separate storage buffers for different types of information within working memory. The phonological loop and visuospatial sketchpad operate independently, allowing people to maintain verbal and visual information simultaneously without interference. This architecture explains why you can remember a phone number while navigating through a building, but have difficulty remembering two phone numbers at once.\nWorking memory capacity strongly predicts performance in complex cognitive tasks. Higher working memory capacity correlates with better reading comprehension, mathematical problem solving, and reasoning ability. Individual differences in working memory capacity, as measured by these paradigms, predict academic achievement and performance in demanding real-world tasks such as air traffic control and piloting aircraft. Understanding working memory limitations helps explain why people make errors in tasks requiring information maintenance and manipulation.\n\n\n21.1.6 Further Reading\nAlvarez, G. A., & Cavanagh, P. (2004). The capacity of visual short-term memory is set both by visual information load and by number of objects. Psychological Science, 15(2), 106-111.\nBaddeley, A. (1992). Working memory. Science, 255(5044), 556-559.\nBaddeley, A. (2003). Working memory: Looking back and looking forward. Nature Reviews Neuroscience, 4(10), 829-839.\nLuck, S. J., & Vogel, E. K. (1997). The capacity of visual working memory for features and conjunctions. Nature, 390(6657), 279-281.\nMiller, G. A. (1956). The magical number seven, plus or minus two: Some limits on our capacity for processing information. Psychological Review, 63(2), 81-97.\nSternberg, S. (1966). High-speed scanning in human memory. Science, 153(3736), 652-654.",
    "crumbs": [
      "Unit 9: Skills Checkpoint",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Lab 9: Working Memory</span>"
    ]
  },
  {
    "objectID": "21-L09.html#skills-checkpoint",
    "href": "21-L09.html#skills-checkpoint",
    "title": "21  Lab 9: Working Memory",
    "section": "21.2 Skills Checkpoint",
    "text": "21.2 Skills Checkpoint\nIn this lab, you will not be given step-by-step tutorials for creating the Sternberg and Change Detection working memory tasks. Instead, you are provided with brief method descriptions, similar to what you would read in a journal article, and are tasked with implementing the experiments yourself using the techniques you have learned.\nFor each task, you should provide clear instructions for participants and save the data locally using the methods from previous labs. Ensure that your data files are properly labeled with meaningful column names, and that your code is well-organized and documented with comments explaining key sections.",
    "crumbs": [
      "Unit 9: Skills Checkpoint",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Lab 9: Working Memory</span>"
    ]
  },
  {
    "objectID": "21-L09.html#program-the-sternberg-memory-scanning-task-basic",
    "href": "21-L09.html#program-the-sternberg-memory-scanning-task-basic",
    "title": "21  Lab 9: Working Memory",
    "section": "21.3 Program the Sternberg Memory Scanning Task (Basic)",
    "text": "21.3 Program the Sternberg Memory Scanning Task (Basic)\n\n21.3.1 Procedure\nThe task consisted of 20 experimental trials preceded by 5 practice trials. Each trial began with a fixation cross presented for 500 ms at the center of the screen. A memory set of 1-5 digits was then displayed simultaneously for 1000 ms, which participants were instructed to memorize. Following a 1000 ms blank retention interval, a single probe digit appeared on the screen. Participants indicated whether the probe digit was part of the memory set by pressing the ‘F’ key for “yes” or the ‘J’ key for “no” as quickly and accurately as possible. The probe remained visible until response or for a maximum of 2000 ms.\nDuring the practice phase, feedback (“Correct” or “Incorrect”) was displayed for 500 ms after each response. No feedback was provided during the experimental trials. A 500 ms inter-trial interval preceded the next trial. Design\nThe experiment used five set size conditions (1, 2, 3, 4, and 5 digits), with 4 trials per condition. Half of the trials were positive trials (probe present in memory set) and half were negative trials (probe absent from memory set), resulting in 2 positive and 2 negative trials per set size. The 5 practice trials included one trial of each set size (1-5 digits), with 3 positive and 2 negative trials. Trial order was randomized for each participant.\nDigits (0-9) were randomly selected for each memory set. For positive trials, the probe digit was randomly selected from the memory set with all serial positions equally likely. For negative trials, the probe digit was randomly selected from the digits not in the memory set.\n\n\n21.3.2 Stimuli\nDigits were presented in black text on a white background using a sans-serif font. Memory sets were displayed horizontally at the center of the screen with digits separated by spaces. The fixation cross and probe digit also appeared at screen center.\n\n\n21.3.3 Data Collection\nResponse time (measured from probe onset) and accuracy were recorded for each trial.",
    "crumbs": [
      "Unit 9: Skills Checkpoint",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Lab 9: Working Memory</span>"
    ]
  },
  {
    "objectID": "21-L09.html#program-a-change-detection-task-advanced",
    "href": "21-L09.html#program-a-change-detection-task-advanced",
    "title": "21  Lab 9: Working Memory",
    "section": "21.4 Program a Change Detection Task (Advanced)",
    "text": "21.4 Program a Change Detection Task (Advanced)\n\n21.4.1 Procedure\nThe task consisted of 20 experimental trials preceded by 5 practice trials. Each trial began with a fixation cross presented for 500 ms at the center of the screen. A memory array of 1-5 colored squares was then displayed for 500 ms in randomly selected positions within a 3x3 grid. Participants were instructed to memorize the colors and locations of all squares. Following a 1000 ms blank retention interval, a test array appeared containing the same number of squares in the same locations. Participants indicated whether any square had changed color by pressing the ‘F’ key for “change” or the ‘J’ key for “no change” as quickly and accurately as possible. The test array remained visible until response or for a maximum of 2000 ms.\nDuring the practice phase, feedback (“Correct” or “Incorrect”) was displayed for 500 ms after each response. No feedback was provided during the experimental trials. A 500 ms inter-trial interval preceded the next trial.\n\n\n21.4.2 Design\nThe experiment used five set size conditions (1, 2, 3, 4, and 5 squares), with 4 trials per condition. Half of the trials were change trials (one square changed color) and half were no-change trials (all squares remained the same color), resulting in 2 change and 2 no-change trials per set size. The 5 practice trials included one trial of each set size (1-5 squares), with 3 change and 2 no-change trials. Trial order was randomized for each participant.\nFor each trial, square positions were randomly selected from the nine possible locations in the 3x3 grid without replacement. Colors were randomly selected without replacement from a set of highly discriminable colors (red, blue, green, yellow, magenta, cyan, orange, pink). For change trials, one square was randomly selected to change to a different color not present in the memory array.\n\n\n21.4.3 Stimuli\nColored squares (80 × 80 pixels) were presented on a gray background. The 3x3 grid was invisible but defined the possible locations for squares, with 40 pixel gaps between adjacent squares. The fixation cross appeared at the center of the screen.\n\n\n21.4.4 Data Collection\nResponse time (measured from test array onset) and accuracy were recorded for each trial.",
    "crumbs": [
      "Unit 9: Skills Checkpoint",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Lab 9: Working Memory</span>"
    ]
  },
  {
    "objectID": "22-randomization.html",
    "href": "22-randomization.html",
    "title": "22  Randomization in Experimental Design",
    "section": "",
    "text": "22.1 Introduction\nWhen you run an experiment, you’re trying to isolate the effect of your independent variable on your dependent variable. But the world is messy, and participants differ from each other in countless ways, stimuli have unique characteristics, and the order in which things happen can influence responses. Without proper randomization, these factors can become confounding variables that make it impossible to draw clear conclusions from your data.\nRandomization is your primary tool for controlling these potential confounds. It helps ensure that any differences you observe between conditions are due to your experimental manipulation, not to systematic biases in how participants were assigned, how stimuli were selected, or how trials were ordered.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Randomization in Experimental Design</span>"
    ]
  },
  {
    "objectID": "22-randomization.html#introduction",
    "href": "22-randomization.html#introduction",
    "title": "22  Randomization in Experimental Design",
    "section": "",
    "text": "22.1.1 Randomization vs. Counterbalancing\nBefore we dive into implementation, it’s important to distinguish between randomization and counterbalancing, as both are mentioned in experimental design textbooks but require different technical approaches.\nRandomization means using a random process to determine assignment or order for each participant independently. For example, each participant might be randomly assigned to a condition, or each participant might see trials in a randomly shuffled order. This is straightforward to implement in jsPsych using JavaScript’s built-in random functions.\nCounterbalancing means systematically varying the order of conditions across participants according to a predetermined scheme (like complete counterbalancing or Latin square designs). For example, if you have conditions A and B, you might want exactly half your participants to experience A-then-B and the other half to experience B-then-A. This requires tracking how many participants have been assigned to each order and making assignments accordingly. This typically requires server-side code because you need coordinate across participants.\nIn this chapter, we’ll focus on randomization techniques that can be fully implemented in jsPsych without server-side coordination. While counterbalancing is often preferred in experimental design (especially for within-subjects experiments with few conditions), randomization is more practical for online experiments and still provides good control over confounds, particularly with larger sample sizes. If you need true counterbalancing for your research, you’ll need to implement server-side logic beyond the scope of this textbook.\n\n\n22.1.2 Types of Randomization in jsPsych Experiments\nIn online experiments built with jsPsych, you’ll typically need to implement three distinct types of randomization:\n\nRandom assignment of participants to conditions: In between-subjects designs, ensuring that participants are equivalently distributed across experimental conditions\nRandomization of trial and block order: Preventing order effects by randomizing the sequence in which participants experience trials and blocks, and implementing counterbalancing strategies for within-subjects designs\nRandom assignment of stimuli to conditions: Controlling for item-level differences by randomly selecting or assigning specific stimuli from your stimulus pool\n\nBy the end of this chapter, you’ll be able to implement each of these randomization strategies in jsPsych, building experiments that properly control for confounds through strategic use of randomization, an important skill for conducting rigorous experimental research.\nNote: While randomization is a powerful tool, remember that it’s not magic. Random assignment works better with larger samples, and even with proper randomization, you should always check whether your groups are balanced on key variables. The inferential statistics you’ll use to analyze your data account for the probabilistic nature of random assignment, but good experimental design starts with thoughtful implementation of these randomization principles.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Randomization in Experimental Design</span>"
    ]
  },
  {
    "objectID": "22-randomization.html#random-assignment-of-participants-to-conditions",
    "href": "22-randomization.html#random-assignment-of-participants-to-conditions",
    "title": "22  Randomization in Experimental Design",
    "section": "22.2 Random Assignment of Participants to Conditions",
    "text": "22.2 Random Assignment of Participants to Conditions\nIn between-subjects designs, where each participant experiences only one level of your independent variable, you need to randomly assign participants to conditions. This ensures that the groups are equivalent on average in that they should have similar distributions of age, motivation, fatigue, prior knowledge, and countless other variables you haven’t even measured.\nFor example, if you’re testing whether studying with music affects memory performance, you might randomly assign half your participants to study with music and half to study in silence. Random assignment means that any pre-existing differences in memory ability should be distributed equally across both groups.\nKey Principle: Random assignment controls for participant-level confounds in between-subjects designs.\n\n22.2.1 Implementing Random Assignment\nWe have already learned some techniques for controlling what participants do in the experiment using conditional functions. For instance, we can show/skip the ‘music’ versus ‘no music’ condition based on which condition they were assigned to like this:\nlet assigned_condition = \"music\"\n\nlet music_trials = {\n    timeline: [/* trials */],\n    conditional_function: function(){\n      if(assigned_condition == \"music\"){\n        return true\n      } else {\n        return false\n      }\n    }\n}\n\nlet no_music_trials = {\n    timeline: [/* trials */],\n    conditional_function: function(){\n      if(assigned_condition == \"no music\"){\n        return true\n      } else {\n        return false\n      }\n    }\n}\n\njsPsych.run([\n  introduction,\n  music_trials,\n  no_music_trials,\n  debrief\n])\nWe can even control what version of the task they see using simpler if else logic. For instance, I could simply change what is placed in jsPsych.run like this:\nif(assigned_condition === \"music\"){\n  \n  jsPsych.run([\n    introduction,\n    music_trials,\n    debrief\n  ])\n  \n} else if(assigned_condition === \"no music\"){\n  \n  jsPsych.run([\n    introduction,\n    no_music_trials,\n    debrief\n  ])\n  \n}\nBut, how exactly do we determine whether the current participant should be assigned to the ‘music’ or ‘no music’ group?\n\n\n22.2.2 Simple Solution: Math.random()\nThe most straightforward approach is to use JavaScript’s built-in Math.random() function to randomly assign each participant when they load the experiment. This function returns a random decimal between 0 and 1, which we can use to make assignment decisions.\nFor a simple two-condition experiment:\n// Randomly assign to one of two conditions\nlet assigned_condition;\n\nif(Math.random() &lt; 0.5){\n  assigned_condition = \"music\";\n} else {\n  assigned_condition = \"no music\";\n}\nFor experiments with more than two conditions, you can extend this logic:\n// Randomly assign to one of three conditions\nlet assigned_condition;\nlet random_number = Math.random();\n\nif(random_number &lt; 0.33){\n  assigned_condition = \"music\";\n} else if(random_number &lt; 0.67){\n  assigned_condition = \"no music\";\n} else {\n  assigned_condition = \"white noise\";\n}\njsPsych also has built-in randomization methods, which you can use for cleaner code. For instance, we use the sampleWithoutReplacement to select one item from a conditions array:\n// Randomly select one condition from an array\nlet conditions = [\"music\", \"no music\", \"white noise\"];\nlet assigned_condition = jsPsych.randomization.sampleWithoutReplacement(conditions, 1)[0];\nThe advantages to using these approaches is that it is simple to implement, requires no external services, and works immediately.\nThere are some limitations, however:\nFirst, you have no control over how many participants end up in each condition. With small samples, you might end up with unequal group sizes (e.g., 7 in one condition and 13 in another). This is generally not a serious problem, but it’s less statistically efficient than equal group sizes. Typically, if you wanted at least 50 participants per group, you’d have to keep collecting data until both groups reach a minimum of 50, and you may end up with something like 54 in one group and 50 in the other.\nA more important limitation, however, is that this approach doesn’t actually randomly assign participants to conditions! Instead, it randomly assigns sessions to a conditions. Each time someone reloads the webpage, they are randomly assigned again. This means a single participant could reload the page multiple times and experience different conditions, either accidentally or intentionally. This violates the principle of random assignment, where each participant should be assigned to exactly one condition.\nTo give one example where this could be a serious limitation, consider a ‘reward’ versus ‘no reward’ manipulation. In the introductory instructions one group receives the prompt “You will have the opportunity to earn up to $5!”, but the no reward group does not receive that instruction. A participant could reload the page multiple times until they get the instruction version they would prefer.\nFor casual testing or demonstrations this may be acceptable, but for research purposes, this is a significant limitation.\n\n\n22.2.3 Preferred Solution: External ID in URL\nMany online research platforms (like Prolific, MTurk, or SONA) can pass a participant ID through the URL when launching your experiment. You can use this ID to determine condition assignment in a reproducible way.\nBefore we dive into the code, let’s understand what URL parameters are. You’ve probably seen URLs that look like this: https://www.example.com/search?query=psychology&sort=recent\nEverything after the question mark (?) consists of URL parameters (also called query parameters). These are key-value pairs separated by ampersands (&). In the example above:\n\nquery=psychology (the key is “query” and the value is “psychology”)\nsort=recent (the key is “sort” and the value is “recent”)\n\nURL parameters are a way to pass information to a webpage. When you click a link or type a URL with parameters, the webpage can read those values and use them to customize what it displays or how it behaves.\nFor online experiments, recruitment platforms can automatically add a participant ID to your experiment’s URL. For example: https://yourstudy.com/experiment.html?participant=12345\nOr with multiple parameters: https://yourstudy.com/experiment.html?participant=12345&session=2&study=memory\nThis ID is linked to a particular participant, and does not change when they reload the page. That means we can use it as a way of assigning a participant to a condition!\njsPsych provides a convenient method for reading URL parameters: jsPsych.data.getURLVariable(). This method takes the name of the parameter you want to retrieve and returns its value. If your URL is https://yourstudy.com/experiment.html?participant=12345\n// URL: https://yourstudy.com/experiment.html?participant=12345\n// Extract the participant ID from the URL\nconst participant_id = jsPsych.data.getURLVariable('participant');\n\nconsole.log(participant_id); // Will print: 12345\nIf a parameter doesn’t exist in the URL, getURLVariable()returns undefined:\n// URL: https://yourstudy.com/experiment.html\nconst participant_id = jsPsych.data.getURLVariable('participant'); // undefined if not in URL\nconst session_num = jsPsych.data.getURLVariable('session'); // undefined if not in URL\nNow that we can extract the participant ID from the URL, we can use it to determine condition assignment. However, the exact approach depends on the format of the participant ID provided by your recruitment platform.\n\n22.2.3.1 Numeric IDs (e.g., SONA)\nSONA and some other platforms provide numeric participant IDs. These can be used directly with the modulo operator:\n// // URL: https://yourstudy.com/experiment.html?id=12345\n// Get participant ID from URL\nconst participant_id = jsPsych.data.getURLVariable('id');\n\n// Use the ID to determine condition\n// Even IDs get music, odd IDs get no music\nlet assigned_condition;\nif(participant_id % 2 === 0){\n  assigned_condition = \"music\";\n} else {\n  assigned_condition = \"no music\";\n}\n\n// Save id and assignment to data\njsPsych.data.addProperties({\n  participant_id: participant_id,\n  assigned_condition: assigned_condition\n});\nThe modulo operator (%) gives us the remainder after division. So participant_id % 2 will be 0 for even numbers and 1 for odd numbers. This creates a simple alternating pattern of condition assignment.\nFor more than two conditions:\n// Assign to one of three conditions based on ID\nlet conditions = [\"music\", \"no music\", \"white noise\"];\nlet assigned_condition = conditions[participant_id % 3];\nHere’s how this works:\n\nIf participant_id is 12345, then 12345 % 3 = 0, so they get conditions[0] = “music”\nIf participant_id is 12346, then 12346 % 3 = 1, so they get conditions[1] = “no music”\nIf participant_id is 12347, then 12347 % 3 = 2, so they get conditions[2] = “white noise”\nIf participant_id is 12348, then 12348 % 3 = 0, so they get conditions[0] = “music” (the pattern repeats)\n\nThere’s one problem with the code above: if someone opens your webpage without the ID in their URL, the experiment will crash. We can add a fallback to handle this:\n// Get participant ID from URL, or generate random one if not found\nlet participant_id = jsPsych.data.getURLVariable('participant') || jsPsych.randomization.randomInt(1, 100000);\n\n// Assign to one of three conditions based on ID\nlet conditions = [\"music\", \"no music\", \"white noise\"];\nlet assigned_condition = conditions[participant_id % 3];\nThe || operator (logical OR) works as a fallback: if getURLVariable('participant') returns undefined, it will use the randomly generated ID instead.\nThis approach is useful during development and testing, but remember that visitors without a proper ID will be randomly assigned each time they reload the page (the same limitation as the Math.random() approach).\n\n\n22.2.3.2 Alphanumeric IDs (e.g., Prolific)\nSome platforms like Prolific use alphanumeric IDs that look like 5f8d9a2b3c4e5f6a7b8c9d0e. These cannot be used directly with the modulo operator because they’re strings, not numbers. You need to convert them to numbers first.\nA reliable approach is to sum the character codes of all characters in the string:\n// Function to convert any string to a number\nfunction stringToNumber(str) {\n  let sum = 0;\n  for (let i = 0; i &lt; str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum;\n}\n\n// Get participant ID from URL, or generate random one if not found\nlet participant_id = jsPsych.data.getURLVariable('participant') || jsPsych.randomization.randomInt(1, 100000).toString();\n\n// Convert to number and assign condition\nconst numeric_id = stringToNumber(participant_id);\nlet conditions = [\"music\", \"no music\", \"white noise\"];\nlet assigned_condition = conditions[numeric_id % 3];\n\n// Save id and assignment to data\njsPsych.data.addProperties({\n  participant_id: participant_id,\n  assigned_condition: assigned_condition\n});\nThis works because:\n\nEach character has a numeric code (e.g., ‘a’ = 97, ‘b’ = 98, ‘5’ = 53)\nSumming these codes gives us a unique number for each unique string\nAs long as the platform generates IDs randomly, the sums will be evenly distributed\nThe modulo operator then distributes these evenly across conditions\n\nThis solution also includes the fallback for missing URL parameters. Note that we convert the random integer to a string using .toString() so it matches the format of IDs from recruitment platforms. The stringToNumber() function works for both numeric IDs (like “12345”) and alphanumeric IDs (like “5f8d9a2b3c4e”), making it a flexible solution for any recruitment platform.\n\n\n\n22.2.4 Assigning Multiple Conditions\nSometimes we have multiple between-subjects conditions and participants need to be assigned to a combination of conditions. For example, you might manipulate both background music (music vs. no music) and block order (ABC vs. BCA vs. CAB), creating a 2 × 3 factorial design with 6 total condition combinations.\nThe key challenge is ensuring that these assignments are independent—that is, participants assigned to the “music” condition should be equally likely to receive any of the three block orders, and vice versa. If we simply used the participant ID directly for both assignments, they would be correlated.\nThe solution is to use different “seeds” by adding different strings to the participant ID before converting it to a number:\nfunction stringToNumber(str) {\n  let sum = 0;\n  for (let i = 0; i &lt; str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum;\n}\n\nlet participant_id = jsPsych.data.getURLVariable('participant') || \n                     jsPsych.randomization.randomInt(1, 100000).toString();\n\n// Use ID with different \"seeds\" for independent assignments\nlet music_hash = stringToNumber(participant_id + \"_music\");\nlet font_hash = stringToNumber(participant_id + \"_font\");\n\nlet music_conditions = [\"music\", \"no_music\"];\nlet assigned_music = music_conditions[music_hash % 2];\n\nlet font_conditions = [\"large\", \"small\"];\nlet assigned_font = font_conditions[font_hash % 2];\n\n// Save both assignments to data\njsPsych.data.addProperties({\n  participant_id: participant_id,\n  music_condition: assigned_music,\n  font_condition: assigned_font\n});\nBy adding “_music” and “_font” to the participant ID before hashing, we create two different numbers from the same ID. These numbers will be uncorrelated, ensuring independent random assignment to each factor.\nThis approach scales to any number of factors. For example, if you also wanted to randomly assign text color (red vs. blue), you could add:\nlet color_hash = stringToNumber(participant_id + \"_color\");\nlet color_conditions = [\"red\", \"blue\"];\nlet assigned_color = color_conditions[color_hash % 2];\nEach factor uses a unique seed string, ensuring all assignments are independent while remaining consistent for each participant ID. This creates a fully crossed factorial design where participants are randomly assigned to one combination of all factors, and the assignment remains stable across sessions.\n\n\n22.2.5 Handling Missing IDs: Allow Access or Restrict?\nThe examples above use a fallback that generates a random ID when none is provided in the URL. This is convenient for testing, but you have another option for actual data collection: restricting access entirely to participants with valid IDs.\nlet participant_id = jsPsych.data.getURLVariable('participant');\n\n// evaluates to true if present or false if undefined/null\nif(participant_id){\n\n  // Valid ID - run the actual experiment\n  jsPsych.run([experiment]);\n  \n} else {\n\n  // No valid ID - show error message\n  let no_experiment = {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: `\n      &lt;p&gt;This study is only accessible through SONA/Prolific.&lt;/p&gt;\n      &lt;p&gt;Please return to the recruitment platform and use the provided link.&lt;/p&gt;\n    `,\n    choices: \"NO_KEYS\"\n  };\n\n  jsPsych.run([no_experiment]);\n\n}\nThis ensures that only participants with valid IDs from your recruitment platform can complete the study, preventing accidental or unauthorized access.\nWhich approach should you use? During development, the fallback with random assignment is most convenient for testing. For actual data collection, restricting access provides the most control and ensures data quality by preventing unauthorized access.\n\n\n22.2.6 Testing with URL Parameters\nWhen you’re developing your experiment locally, you can test different conditions by manually adding parameters to your URL. For example:\nfile:///path/to/your/experiment.html?participant=100\nfile:///path/to/your/experiment.html?participant=101\nfile:///path/to/your/experiment.html?participant=5f8d9a2b3c4e\nOr if you’re using a local server:\nhttp://localhost:8000/experiment.html?participant=100\nhttp://localhost:8000/experiment.html?participant=101\nhttp://localhost:8000/experiment.html?participant=5f8d9a2b3c4e\nYou can also test the fallback behavior by opening the URL without any parameters:\nhttp://localhost:8000/experiment.html\nThis lets you verify that each condition works correctly before deploying your experiment.\n\n\n22.2.7 How Recruitment Platforms Use URL Parameters\nWhen you set up your study on platforms like SONA or Prolific, you’ll provide them with your experiment’s base URL. They will automatically append the participant ID (and sometimes other information) to this URL when directing participants to your study.\nFor example, on SONA you might configure your study URL as:\nhttps://yourstudy.com/experiment.html?id=%SURVEY_CODE%\nSONA will replace %SURVEY_CODE% with each participant’s unique ID. On Prolific, you might use:\nhttps://yourstudy.com/experiment.html?participant={{%PROLIFIC_PID%}}\nEach platform has its own syntax for these placeholders so you should check their documentation for the exact format.\nAdvantages:\n\nAssignment is reproducible—the same ID always gets the same condition, which can be helpful for debugging.\nThis ensures that a single participant is assigned to exactly one condition. If a participant drops out and restarts, or accidentally reloads the page, they’ll get the same condition because their participant ID doesn’t change. This is true random assignment of participants (not just sessions) to conditions.\nYou can plan your sample size to ensure equal groups (e.g., recruit participants in multiples of your number of conditions).\n\nLimitations: Requires that you’re using a platform that provides participant IDs. The assignment is only pseudo-random, so it depends on the order in which the platform assigns IDs to participants, though in practice this is rarely a concern.\n\n\n22.2.8 Key Principles for Participant Assignment\nWhen implementing participant assignment to conditions:\n\nUse URL parameters for consistency: Extract participant IDs from the URL to ensure participants always see the same condition across sessions\nHandle different ID formats: Account for both numeric (e.g., SONA) and alphanumeric (e.g., Prolific) ID systems using appropriate conversion methods\nImplement fallback logic: Decide whether to allow access with a random ID (for testing) or restrict access (for data collection) when IDs are missing\nUse modulo for balanced assignment: The modulo operator ensures equal distribution across conditions as participant numbers grow\nSave assignments to data: Always record the assigned condition and participant ID in your data file for later analysis\nTest with multiple IDs: Verify that your assignment logic produces the expected distribution across a range of participant IDs\nUse independent hash seeds: When making multiple assignments from the same ID, add different strings before hashing to ensure assignments are uncorrelated\n\nBy following these principles, you can implement robust participant assignment procedures that ensure balanced, consistent, and reproducible condition assignments across your study.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Randomization in Experimental Design</span>"
    ]
  },
  {
    "objectID": "22-randomization.html#randomization-of-trial-order",
    "href": "22-randomization.html#randomization-of-trial-order",
    "title": "22  Randomization in Experimental Design",
    "section": "22.3 Randomization of Trial Order",
    "text": "22.3 Randomization of Trial Order\nThe order in which trials and blocks appear can profoundly affect participant responses. As discussed in the textbook excerpt, order effects can take several forms:\n\nPractice effects: Performance improves because participants get better at the task\nFatigue effects: Performance declines because participants get tired or bored\nContext effects: Responses to one stimulus are influenced by what came immediately before it\n\nThese effects can occur both within blocks (trial-to-trial) and across blocks. For example, if your experiment has a memory block followed by an attention block, participants might perform differently than if the attention block came first.\nOrder randomization (at both trial and block levels) helps control for these order effects and carryover effects. For within-subjects designs with many trials, you typically randomize the trial order for each participant. When you have multiple blocks or tasks, you may also need to randomize or counterbalance the block order.\n\n22.3.1 Basic Trial Randomization with randomize_order\nWe have already been using a simple method for randomizing the order of trials. It’s worth revisiting that method so that we fully understand what it does:\nlet sart = {\n  timeline: [\n    {\n    type: jsPsychHtmlKeyboardResponse,\n    stimulus: jsPsych.timelineVariable(\"number\"),\n    choices: [\" \"],\n    trial_duration: 1300\n    }\n  ],\n  timeline_variables: [\n    {number: 0}, \n    {number: 1}, \n    {number: 2}, \n    {number: 3}, \n    {number: 4},\n    {number: 5},  \n    {number: 6}, \n    {number: 7}, \n    {number: 8}, \n    {number: 9}\n  ],\n  randomize_order: true,\n  repetitions: 2\n}\nBy adding randomize_order: true, we are instructing jsPsych to randomly shuffle the order of our timeline_variables so that one participant might see 1,6,7,8,2,5,3,0,4,9 and the next might see 0,4,1,9,2,8,6,7,3,5.\nBut what happens when we add repetitions: 2? Of course, we are instructing jsPsych to repeat through our timeline_variables twice, but how are they randomized?\nIt turns out that jsPsych treats each repetition as a separate block. In practice, that means if you’re randomizing the order and repeating twice, you first complete one randomized list of 0-9, then you complete another randomized list of 0-9. That’s a small but quite important detail. Even though we’re asking for two repetitions in a random order, the two repetitions are kept separate. Therefore, you can never receive two 9s in a row (one from the end of the first repetition and one from the start of the second), even though each number is presented twice overall.\nThat, of course, might be exactly what you want to happen. But it may not be. Perhaps you really want the possibility of the same number appearing on consecutive trials. This method does not accomplish that. In fact, if we use this method, we have no control over how the trials are randomized since we can only shuffle the order within each repetition block.\n\n\n22.3.2 Custom Randomization with sample\nFortunately, jsPsych provides a method for defining custom randomization functions through the sample parameter. This gives us complete freedom to arrange the trials in any way we see fit.\nThe sample parameter accepts an object with two properties:\n\ntype: The sampling method to use (set to ‘custom’ for custom functions)\nfn: A custom function that determines the trial order\n\nThe custom function receives an array of indices (position numbers) as input and must return an array of indices that specifies the order in which trials should be presented.\nFor example, if you have 5 timeline_variables, jsPsych passes your function the array[0, 1, 2, 3, 4]. Each number corresponds to a position in your timeline_variables array:\n\n0 refers to the first timeline variable\n1 refers to the second timeline variable\n2 refers to the third timeline variable\nAnd so on…\n\nWhatever array of indices you return determines the exact order trials will be presented. For example:\n\nReturning [0, 1, 2, 3, 4] presents trials in their original order\nReturning [4, 3, 2, 1, 0] presents trials in reverse order\nReturning [0, 0, 1, 1, 2, 2, 3, 3, 4, 4] presents each trial twice in sequence\n\nLet’s look at a simple example using words to make this concrete:\nlet lexical_decision = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['f', 'j'],\n      prompt: '&lt;p&gt;Press F for word, J for non-word&lt;/p&gt;'\n    }\n  ],\n  timeline_variables: [\n    {word: \"table\"},   // index 0\n    {word: \"blirk\"},   // index 1\n    {word: \"chair\"},   // index 2\n    {word: \"glorp\"},   // index 3\n    {word: \"house\"}    // index 4\n  ],\n  sample: {\n    type: 'custom',\n    fn: function(indices) {\n      // indices = [0, 1, 2, 3, 4]\n      // Let's return them in reverse order\n      return [4, 3, 2, 1, 0];\n      // This will present: \"house\", then \"glorp\", then \"chair\", then \"blirk\", then \"table\"\n    }\n  }\n}\nIn this example, indices is [0, 1, 2, 3, 4], and we return [4, 3, 2, 1, 0], which means:\n\nFirst trial: show timeline_variables[4] (which is {word: “house”})\nSecond trial: show timeline_variables[3] (which is {word: “glorp”})\nThird trial: show timeline_variables[2] (which is {word: “chair”})\nFourth trial: show timeline_variables[1] (which is {word: “blirk”})\nFifth trial: show timeline_variables[0] (which is {word: “table”})\n\nNow let’s look at several practical examples of how we can use custom sampling to achieve different randomization goals.\nYou’ll notice across these examples, we’re going to be taking advantage of the built-in array methods you can review in the Appendix, and the jsPsych randomization functions, you can read more about here.\n\n\n22.3.3 Example 1: Two Repetitions as One Fully Randomized Block\nWhat if we want two repetitions but truly randomized as one block, allowing the same number to appear consecutively?\nlet lexical_decision = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['f', 'j'],\n      prompt: '&lt;p&gt;Press F for word, J for non-word&lt;/p&gt;'\n    }\n  ],\n  timeline_variables: [\n    {word: \"table\"},   // index 0\n    {word: \"blirk\"},   // index 1\n    {word: \"chair\"},   // index 2\n    {word: \"glorp\"},   // index 3\n    {word: \"house\"}    // index 4\n  ],\n  sample: {\n    type: 'custom',\n    fn: function(indices) {\n      // indices = [0, 1, 2, 3, 4\n      // Duplicate the array to get two of each index\n      let doubled = indices.concat(indices);\n      // doubled = [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]\n\n      // Shuffle the entire combined array\n      return jsPsych.randomization.shuffle(doubled);\n      // Might return something like: [3, 0, 0, 1, 2, 4, 1, 3, 2, 4]\n    }\n  }\n}\nThis approach:\n\nTakes the original array of indices [0, 1, 2, 3, 4]\nConcatenates it with itself to create two copies: [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]\nShuffles the entire combined array as one block\nNow consecutive trials can be the same number (e.g., you might see 3 followed by 3)\n\nNote that I’m using some of JavaScript’s built-in functions for arrays. You can read more about those in the Appendix.\n\n\n22.3.4 Example 2: Always Start with a Specific Trial\nWhat if we always want to start the block with 0, but randomize the rest of the trials?\nlet lexical_decision = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"word\"),\n      choices: ['f', 'j'],\n      prompt: '&lt;p&gt;Press F for word, J for non-word&lt;/p&gt;'\n    }\n  ],\n  timeline_variables: [\n    {word: \"table\"},   // index 0\n    {word: \"blirk\"},   // index 1\n    {word: \"chair\"},   // index 2\n    {word: \"glorp\"},   // index 3\n    {word: \"house\"}    // index 4\n  ],\n  sample: {\n    type: 'custom',\n    fn: function(indices) {\n      // remove the first one and put it in first_trial\n      let first_trial = indices.shift()\n      \n      // shuffle the rest of the trials\n      let trials = jsPsych.randomization.shuffle(indices)\n      \n      // put the first trial at the beginning\n      let all_trials = [first_trial].concat(trials)\n    \n      // return all trials\n      return all_trials\n      // might return something like 0,4,2,3,1 \n    }\n  }\n}\n\n\n22.3.5 Example 3: Unequal Repetitions\nWhat if we want half the trials to appear twice and half to appear once, all in a random order? BUT we want to randomly pick which ones appear twice, so that each participant gets different items that repeat?\nlet sart = {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: jsPsych.timelineVariable(\"number\"),\n      choices: [\" \"],\n      trial_duration: 1300\n    }\n  ],\n  timeline_variables: [\n    {number: 0}, \n    {number: 1}, \n    {number: 2}, \n    {number: 3}, \n    {number: 4},\n    {number: 5},  \n    {number: 6}, \n    {number: 7}, \n    {number: 8},\n    {number: 9}\n  ],\n  sample: {\n    type: 'custom',\n    fn: function(indices) {\n      // indices will be = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n      // shuffle the full array\n      let shuffled = jsPsych.randomization.shuffle(indices);\n\n      // get both halves of the shuffled array\n      let half1 = shuffled.slice(0, Math.floor(indices.length / 2));\n      let half2 = shuffled.slice(Math.floor(indices.length / 2), indices.length );\n      \n      // randomize and repeat each item twice\n      half1 = jsPsych.randomization.repeat(half1, 2)\n      \n      // Combine both halves\n      let combined = half1.concat(half2);\n      // Shuffle the entire array\n      combined = jsPsych.randomization.shuffle(combined);\n    \n      return combined\n    }\n  }\n}",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Randomization in Experimental Design</span>"
    ]
  },
  {
    "objectID": "22-randomization.html#randomization-of-block-order",
    "href": "22-randomization.html#randomization-of-block-order",
    "title": "22  Randomization in Experimental Design",
    "section": "22.4 Randomization of Block Order",
    "text": "22.4 Randomization of Block Order\nIn many experiments, you need to present multiple blocks or tasks to participants. The order in which these blocks appear can influence performance due to practice effects, fatigue, or carryover effects between tasks. Randomizing block order helps control for these sequential effects.\n\n22.4.1 Basic Block Randomization with shuffle()\nThe simplest way to randomize block order is to store your blocks in an array and shuffle them:\n// Define your experimental blocks\nlet memory_block = {\n  timeline: [/* memory task trials */]\n};\n\nlet attention_block = {\n  timeline: [/* attention task trials */]\n};\n\nlet reasoning_block = {\n  timeline: [/* reasoning task trials */]\n};\n\n// Put blocks in an array\nlet blocks = [memory_block, attention_block, reasoning_block];\n\n// Shuffle the order\nblocks = jsPsych.randomization.shuffle(blocks);\n\n// Add shuffled order to a new timeline\nlet all_tasks = {\n  timeline: blocks\n}\n\n// Run\njsPsych.run([\n   welcome,\n   all_tasks,\n   debrief\n])\nEach participant will now see the three blocks in a different random order, while the welcome and debrief screens remain in fixed positions.\n\n\n22.4.2 Randomizing Block Order Across Participants\nJust as we used participant IDs to assign conditions, we can use them to determine block order. This ensures that each participant consistently sees the same block order if they need to return to the experiment:\n// Get participant ID from URL\nlet participant_id = jsPsych.data.getURLVariable('participant') ||\n                     jsPsych.randomization.randomInt(1, 100000).toString();\n\n// Convert to number (using our stringToNumber function for alphanumeric IDs) if you need to\nfunction stringToNumber(str) {\n  let sum = 0;\n  for (let i = 0; i &lt; str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum;\n}\n\nlet numeric_id = stringToNumber(participant_id);\n\n// Define blocks\nlet memory_block = {\n  timeline: [/* memory task trials */]\n};\n\nlet attention_block = {\n  timeline: [/* attention task trials */]\n};\n\nlet reasoning_block = {\n  timeline: [/* reasoning task trials */]\n};\n\n// Create array of possible block orders\nlet block_orders = [\n  [memory_block, attention_block, reasoning_block],\n  [memory_block, reasoning_block, attention_block],\n  [attention_block, memory_block, reasoning_block],\n  [attention_block, reasoning_block, memory_block],\n  [reasoning_block, memory_block, attention_block],\n  [reasoning_block, attention_block, memory_block]\n];\n\n// Assign block order based on participant ID using modulo\nlet assigned_blocks = block_orders[numeric_id % block_orders.length];\n\n// Add to timeline\nlet all_tasks = {\n  timeline: assigned_blocks\n}\n\n// Run\njsPsych.runs([\n  welcome,\n  all_tasks,\n  debrief\n])\nThis approach ensures that block order is balanced across participants (each order appears equally often) and remains consistent for each participant ID.\n\n\n22.4.3 Independent Randomization of Condition and Block Order\nYou can use the same participant ID to independently assign both experimental condition and block order by using different “seeds” as we discussed in the participant assignment section:\nlet participant_id = jsPsych.data.getURLVariable('participant') || \n                     jsPsych.randomization.randomInt(1, 100000).toString();\n\nfunction stringToNumber(str) {\n  let sum = 0;\n  for (let i = 0; i &lt; str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum;\n}\n\n// Use ID with different seeds for independent assignments\nlet condition_hash = stringToNumber(participant_id + \"_condition\");\nlet order_hash = stringToNumber(participant_id + \"_order\");\n\n// Assign experimental condition (e.g., music vs. no music)\nlet conditions = [\"music\", \"no_music\"];\nlet assigned_condition = conditions[condition_hash % 2];\n\n// Assign block order\nlet block_orders = [\n  [memory_block, attention_block, reasoning_block],\n  [memory_block, reasoning_block, attention_block],\n  [attention_block, memory_block, reasoning_block],\n  [attention_block, reasoning_block, memory_block],\n  [reasoning_block, memory_block, attention_block],\n  [reasoning_block, attention_block, memory_block]\n];\nlet assigned_blocks = block_orders[order_hash % block_orders.length];\n\n// Save assignments to data\njsPsych.data.addProperties({\n  participant_id: participant_id,\n  condition: assigned_condition,\n  block_order: order_hash % block_orders.length\n});\n\n\n// Add to timeline\nlet all_tasks = {\n  timeline: assigned_blocks\n}\n\n// Run\njsPsych.runs([\n  welcome,\n  all_tasks,\n  debrief\n])\n\n\n22.4.4 Key Principles for Block Order Randomization\n\nStore blocks in arrays: Organize your blocks as array elements to enable programmatic reordering\nChoose the right randomization method: Use shuffle() or ID-based assignment for between-participant consistency\nCreate independent assignments: When assigning both condition and block order, use different hash seeds to ensure they’re uncorrelated\nDocument block orders: Save the block order assignment to your data so you can analyze order effects if needed\nTest thoroughly: Verify that all possible block orders work correctly and that randomization produces the expected distribution",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Randomization in Experimental Design</span>"
    ]
  },
  {
    "objectID": "22-randomization.html#random-assignment-of-stimuli-to-conditions",
    "href": "22-randomization.html#random-assignment-of-stimuli-to-conditions",
    "title": "22  Randomization in Experimental Design",
    "section": "22.5 Random Assignment of Stimuli to Conditions",
    "text": "22.5 Random Assignment of Stimuli to Conditions\nEven within a single participant’s experience, you often need to randomly assign which specific stimuli appear in which conditions. This is particularly important in within-subjects designs, where participants see multiple trials or items.\nConsider a word memory experiment where you want to test whether concrete nouns (like “dog” or “table”) are remembered better than abstract nouns (like “truth” or “justice”). You might have 50 concrete nouns and 50 abstract nouns in your stimulus set. But what if, by chance, all your concrete nouns happen to be shorter, more common, or more emotionally charged than your abstract nouns? These differences could drive any effect you observe, rather than the concreteness itself.\nThe solution is to randomly select which specific words from your larger stimulus pool get shown to each participant, and potentially to randomly assign individual words to conditions when you have stimuli that could plausibly fit into multiple categories.\nThe key principle is that random stimulus assignment helps control for item-level confounds; characteristics of individual stimuli that might influence your results independent of your experimental manipulation.\n\n22.5.1 Programmatically Generating timeline_variables\nIn order to understand how we can randomly assign stimuli, it’s worth taking a moment to understanding that the goal, which is to create our timeline_variables array, which is an array of objects { }, in a programmtic way. That is, we build the array with it’s individual components using JavaScript logic, rather than writing out the array manually.\nFor instance, let’s say we’re changing the color of the words to see if the color influences response times. If we have 4 words, then we want to randomly assign 2 to be ‘red’ and the other 2 to be ‘green’.\nThe end result is that we want a timeline_variables array of objects that can be used inside a jsPsych trial, like this:\nlet stims = [\n  {word: \"house\", color: \"red\"},\n  {word: \"nurse\", color: \"red\"},\n  {word: \"hate\", color: \"blue\"},\n  {word: \"truck\", color: \"blue\"}\n]\n\nlet trials = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function(){\n    return `&lt;p style=\"color:${jsPsych.evaluateTimelineVariable(\"color\")}\"&gt; ${jsPsych.evaluateTimelineVariable(\"word\")}&lt;/p&gt;`\n  },\n  timeline_variables: stims\n}\nBut if we’re interested in the effects of color on response time, we want to randomize which words are assigned to each color to control for word-specific effects. For example, “hate” might be a word that people always take longer to respond to because it’s negative. If we make “hate” blue for every participant, we might erroneously conclude that blue words cause people to slow down. Instead, we want about half the participants to see “hate” in blue and the other half in red, so that the effect of “hate” is averaged out across both color conditions across participants.\n\n22.5.1.1 Building Arrays Programmatically\nTo accomplish random assignment, we need to work backwards. We need to decide on the array structure we want to end up with, separate out the parts, and put them back together. Here’s how we can recreate the same array programmatically:\n// Goal: recreate this array of objects\n// let stims = [\n//  {word: \"house\", color: \"red\"},\n//  {word: \"nurse\", color: \"red\"},\n//  {word: \"hate\", color: \"blue\"},\n//  {word: \"truck\", color: \"blue\"}\n// ]\n\n// Step 1: Separate out the parts\nlet words = [\"house\", \"nurse\", \"hate\", \"truck\"]\nlet colors = [\"red\", \"red\", \"blue\", \"blue\"]\n\n// Step 2: Use a loop to create each object and add them to an array\nlet stims = []\nfor(i = 0; i &lt; words.length; i++){\n  let combo = {\n    word: words[i], \n    color: colors[i]\n    }\n    \n  stims.push(combo)\n}\n\n// Step 3: Use the programmatically created array\nlet trials = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function(){\n    return `&lt;p style=\"color:${jsPsych.evaluateTimelineVariable(\"color\")}\"&gt; ${jsPsych.evaluateTimelineVariable(\"word\")}&lt;/p&gt;`\n  },\n  timeline_variables: stims\n}\nThis code produces exactly the same result as writing the array manually, but now we have the flexibility to modify it programmatically.\n\n\n22.5.1.2 Adding Randomization\nOnce we understand how to recreate the timeline_variables array programmatically, we can add randomization:\n// Goal: Create the same array structure BUT with random word-color pairings\n\n// Step 1: Separate out the parts\nlet words = [\"house\", \"nurse\", \"hate\", \"truck\"]\nlet colors = [\"red\", \"red\", \"blue\", \"blue\"]\n\n// Step 2: Randomize the order of words!\nwords = jsPsych.randomization.shuffle(words)\n\n// Step 3: Use a loop to pair each word with a color\nlet stims = []\nfor(i = 0; i &lt; words.length; i++){\n  let combo = {\n    word: words[i], \n    color: colors[i]\n    }\n    \n  stims.push(combo)\n}\n\n// One possible result:\n// Array(4) [ {…}, {…}, {…}, {…} ]\n// 0: Object { word: \"hate\", color: \"red\" }\n// 1: Object { word: \"house\", color: \"red\" }\n// 2: Object { word: \"truck\", color: \"blue\" }\n// 3: Object { word: \"nurs\", color: \"blue\" }\n\n\n// Step 4: Use the programmatically created array\nlet trials = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: function(){\n    return `&lt;p style=\"color:${jsPsych.evaluateTimelineVariable(\"color\")}\"&gt; ${jsPsych.evaluateTimelineVariable(\"word\")}&lt;/p&gt;`\n  },\n  timeline_variables: stims\n}\nBy shuffling the words array before pairing it with the colors array, each participant gets a different random assignment of words to colors. The first two words (whatever they happen to be after shuffling) will be red, and the last two will be blue.\nTo accomplish these randomization goals, we’ll need to make use of common JavaScript array methods and jsPsych’s built-in randomization functions. JavaScript provides powerful array methods like .slice(), .concat(), .push(), and .filter() that allow us to manipulate arrays in flexible ways (see the Appendix for a reference guide to these methods). jsPsych provides specialized randomization functions like jsPsych.randomization.shuffle() and jsPsych.randomization.sampleWithoutReplacement() that are specifically designed for experimental randomization needs (see the jsPsych randomization documentation for a complete list). By combining these tools, we can implement sophisticated stimulus assignment schemes that meet the specific needs of our experimental designs.\n\n\n\n22.5.2 Example 1: Randomly Select a Subset of Stimuli and Assign to Conditions\nOften you have a large pool of stimuli but only want to use a subset for each participant. This helps ensure that any effects you observe aren’t driven by the specific items you happened to choose.\nLet’s say you have 20 words but only want to show 8 of them, 4 in red and 4 in blue:\n// Large pool of possible words\nlet word_pool = [\n  \"house\", \"nurse\", \"hate\", \"truck\", \"table\", \"chair\", \n  \"love\", \"anger\", \"peace\", \"storm\", \"garden\", \"window\",\n  \"friend\", \"enemy\", \"light\", \"shadow\", \"music\", \"silence\",\n  \"hope\", \"fear\"\n];\n\n// Randomly select 8 words from the pool\nlet selected_words = jsPsych.randomization.sampleWithoutReplacement(word_pool, 8);\n\n// Create color assignments (4 red, 4 blue)\nlet colors = [\"red\", \"red\", \"red\", \"red\", \"blue\", \"blue\", \"blue\", \"blue\"];\n\n// Shuffle the words so they're randomly paired with colors\nselected_words = jsPsych.randomization.shuffle(selected_words);\n\n// Build the timeline_variables array\nlet stims = [];\nfor(let i = 0; i &lt; selected_words.length; i++){\n  stims.push({\n    word: selected_words[i],\n    color: colors[i]\n  });\n}\n\n// Result: 8 randomly selected words, with 4 randomly assigned to red and 4 to blue\nThis approach ensures that:\n\nEach participant sees a different random subset of words\nWords are randomly assigned to color conditions\nYou maintain equal numbers in each condition\n\n\n\n22.5.3 Example 2: Randomly Assign Stimuli to “Old” and “New” Lists\nIn recognition memory experiments, you typically show participants a study list of items, then test them with both old items (from the study list) and new items (not previously seen). You want to randomly determine which items serve which role.\nKeep in mind, we’ll actually need two timeline_variables for this example. We need a timeline_variables array that will only have the old words for the study phase, and a second timeline_variables array that will have both the old and the new words for the testing phase.\n// Pool of 20 words\nlet word_pool = [\n  \"house\", \"nurse\", \"hate\", \"truck\", \"table\", \"chair\", \n  \"love\", \"anger\", \"peace\", \"storm\", \"garden\", \"window\",\n  \"friend\", \"enemy\", \"light\", \"shadow\", \"music\", \"silence\",\n  \"hope\", \"fear\"\n];\n\n// Randomly shuffle the pool\nlet shuffled_words = jsPsych.randomization.shuffle(word_pool);\n\n// First 10 words will be \"old\" (studied), last 10 will be \"new\" (not studied)\nlet old_words = shuffled_words.slice(0, 10);\nlet new_words = shuffled_words.slice(10, 20);\n\n// Create study phase timeline_variables (only old words)\nlet study_stims = [];\nfor(let i = 0; i &lt; old_words.length; i++){\n  study_stims.push({\n    word: old_words[i],\n    item_type: \"study\"\n  });\n}\n\n// Create test phase timeline_variables (both old and new words)\nlet test_stims = [];\n\n// Add old words\nfor(let i = 0; i &lt; old_words.length; i++){\n  test_stims.push({\n    word: old_words[i],\n    correct_response: \"old\"\n  });\n}\n\n// Add new words\nfor(let i = 0; i &lt; new_words.length; i++){\n  test_stims.push({\n    word: new_words[i],\n    correct_response: \"new\"\n  });\n}\n\n// Shuffle test items so old and new are intermixed\ntest_stims = jsPsych.randomization.shuffle(test_stims);\n\n// Now use study_stims for the study phase and test_stims for the test phase\n\n\n22.5.4 Example 3: Random Pairing of Stimuli\nIn many experiments, you need to create random associations between two sets of stimuli. For instance, in a face-name learning task, you might want to randomly pair faces with names so that each participant learns different associations. This controls for the possibility that certain faces are easier to associate with certain names.\nLet’s create a simple associative learning task where participants learn which object goes with which location:\n// Two sets of stimuli to pair\nlet objects = [\"apple\", \"book\", \"clock\", \"lamp\", \"phone\", \"plant\"];\nlet locations = [\"kitchen\", \"bedroom\", \"office\", \"garage\", \"bathroom\", \"garden\"];\n\n// Shuffle one of the arrays (or both, but shuffling one is sufficient)\nlet shuffled_locations = jsPsych.randomization.shuffle(locations);\n\n// Pair them up by matching indices\nlet study_pairs = [];\nfor(let i = 0; i &lt; objects.length; i++){\n  study_pairs.push({\n    object: objects[i],\n    location: shuffled_locations[i],\n    phase: \"study\"\n  });\n}\n\n// Result might be:\n// [\n//   {object: \"apple\", location: \"garage\", phase: \"study\"},\n//   {object: \"book\", location: \"kitchen\", phase: \"study\"},\n//   {object: \"clock\", location: \"bathroom\", phase: \"study\"},\n//   ...\n// ]\n\n// Verify the pairings\nconsole.log(\"Object-Location Pairings:\");\nstudy_pairs.forEach(pair =&gt; {\n  console.log(`${pair.object} -&gt; ${pair.location}`);\n});\n\n\n22.5.5 Example 4: Balanced Random Assignment with Constraints\nSometimes you need random assignment but with specific constraints. For example, you might want to ensure that certain types of stimuli are evenly distributed across conditions.\nLet’s say you have positive and negative words, and you want to ensure each color condition has an equal mix of both:\n// Separate pools for positive and negative words\nlet positive_words = [\"love\", \"peace\", \"hope\", \"friend\", \"light\", \"music\"];\nlet negative_words = [\"hate\", \"anger\", \"fear\", \"enemy\", \"shadow\", \"silence\"];\n\n// Shuffle each pool\npositive_words = jsPsych.randomization.shuffle(positive_words);\nnegative_words = jsPsych.randomization.shuffle(negative_words);\n\n// Take 2 positive and 2 negative for red condition\nlet red_words = positive_words.slice(0, 2).concat(negative_words.slice(0, 2));\n\n// Take 2 positive and 2 negative for blue condition\nlet blue_words = positive_words.slice(2, 4).concat(negative_words.slice(2, 4));\n\n// Shuffle within each condition so positive/negative are intermixed\nred_words = jsPsych.randomization.shuffle(red_words);\nblue_words = jsPsych.randomization.shuffle(blue_words);\n\n// Build timeline_variables with proper labels\nlet stims = [];\n\nfor(let i = 0; i &lt; red_words.length; i++){\n  // Check if word is positive or negative\n  let valence = positive_words.includes(red_words[i]) ? \"positive\" : \"negative\";\n\n  stims.push({\n    word: red_words[i],\n    color: \"red\",\n    valence: valence\n  });\n}\n\nfor(let i = 0; i &lt; blue_words.length; i++){\n  // Check if word is positive or negative\n  let valence = positive_words.includes(blue_words[i]) ? \"positive\" : \"negative\";\n\n  stims.push({\n    word: blue_words[i],\n    color: \"blue\",\n    valence: valence\n  });\n}\n\n// Final shuffle so red and blue trials are intermixed\nstims = jsPsych.randomization.shuffle(stims);\n\n// Result: Each color has 2 positive and 2 negative words, randomly selected and assigned\n// Each stimulus object now includes: word, color, and valence labels\nThis approach ensures that your conditions are balanced on an important stimulus dimension (valence) while still maintaining randomization. By including the valence label in each stimulus object, you can later analyze your data by valence (e.g., to check whether positive words were responded to faster than negative words) or verify that the balancing worked correctly.\n\n\n22.5.6 Verifying Your Randomization\nWhen implementing complex stimulus assignment procedures, it’s important to verify that your code is working as intended before running participants. JavaScript’s console.log() function is invaluable for this purpose, allowing you to inspect your arrays at different stages of construction.\n\n22.5.6.1 Basic Verification with console.log()\nThe simplest approach is to print your timeline_variables array to the console:\n// After building your stims array\nconsole.log(stims);\nThis will display the entire array in your browser’s developer console (usually accessible by pressing F12). You can expand the array to inspect individual objects and verify that:\n\nWords are assigned to the correct conditions\nThe number of trials matches your expectations\nAll required properties are present in each object\n\nUsing console.log(), you can refresh the page a few times to see how the assignments are changing.\n\n\n22.5.6.2 Counting Assignments\nFor more complex designs, you might want to verify that your randomization maintains the intended balance. Here’s how to count how many stimuli fall into each condition:\n// Count stimuli by color\nlet red_count = stims.filter(s =&gt; s.color === \"red\").length;\nlet blue_count = stims.filter(s =&gt; s.color === \"blue\").length;\n\nconsole.log(\"Red trials:\", red_count);\nconsole.log(\"Blue trials:\", blue_count);\n\n// For Example 3, also count by valence within each color\nlet red_positive = stims.filter(s =&gt; s.color === \"red\" && s.valence === \"positive\").length;\nlet red_negative = stims.filter(s =&gt; s.color === \"red\" && s.valence === \"negative\").length;\nlet blue_positive = stims.filter(s =&gt; s.color === \"blue\" && s.valence === \"positive\").length;\nlet blue_negative = stims.filter(s =&gt; s.color === \"blue\" && s.valence === \"negative\").length;\n\nconsole.log(\"Red positive:\", red_positive);\nconsole.log(\"Red negative:\", red_negative);\nconsole.log(\"Blue positive:\", blue_positive);\nconsole.log(\"Blue negative:\", blue_negative);\n\n\n22.5.6.3 Creating a Summary Table\nFor a more organized view, you can create a summary table that displays the distribution of your stimuli:\n// Create a summary table of stimulus assignments\n\nlet summary = {};\n\nstims.forEach(function(trial) {\n  // Create a key combining condition properties\n  let key = `${trial.color}_${trial.valence}`;\n\n  // Initialize counter if this combination hasn't been seen\n  if (!summary[key]) {\n    summary[key] = 0;\n  }\n\n  // Increment counter\n  summary[key]++;\n});\n\nconsole.table(summary);\n\n\n// Output will look like:\n// ┌─────────────────┬────────┐\n// │     (index)     │ Values │\n// ├─────────────────┼────────┤\n// │  red_positive   │   2    │\n// │  red_negative   │   2    │\n// │  blue_positive  │   2    │\n// │  blue_negative  │   2    │\n// └─────────────────┴────────┘\nThe console.table() function provides a nicely formatted table view that makes it easy to verify your design at a glance.\n\n\n22.5.6.4 Listing Specific Assignments\nYou might also want to see exactly which words were assigned to which conditions:\n// Group words by condition\nlet red_words = stims.filter(s =&gt; s.color === \"red\").map(s =&gt; s.word);\nlet blue_words = stims.filter(s =&gt; s.color === \"blue\").map(s =&gt; s.word);\n\nconsole.log(\"Red words:\", red_words);\nconsole.log(\"Blue words:\", blue_words);\n\n// Output might be:\n// Red words: [\"hope\", \"anger\", \"light\", \"fear\"]\n// Blue words: [\"love\", \"shadow\", \"peace\", \"enemy\"]\n\n\n\n22.5.7 Key Principles for Stimulus Assignment\nWhen implementing random stimulus assignment:\n\nIdentify what needs to be randomized: Which stimuli? Which conditions? Which participants?\nSeparate the components: Break your stimuli and conditions into separate arrays\nApply randomization strategically: Use shuffle() for random ordering, sampleWithoutReplacement() for random selection\nRecombine programmatically: Use loops to pair stimuli with conditions\nMaintain balance when needed: Ensure equal numbers across conditions if that’s important for your design\nTest thoroughly: Print your arrays to the console to verify the randomization works as intended\n\nThe flexibility of programmatic stimulus assignment allows you to implement sophisticated randomization schemes that control for confounds while maintaining the experimental manipulations you care about.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Randomization in Experimental Design</span>"
    ]
  },
  {
    "objectID": "23-L10.html",
    "href": "23-L10.html",
    "title": "23  Lab 10: Judgment & Decision-Making",
    "section": "",
    "text": "23.1 Research in Brief: The Mere Exposure Effect",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 10: Judgment & Decision-Making</span>"
    ]
  },
  {
    "objectID": "23-L10.html#research-in-brief-the-mere-exposure-effect",
    "href": "23-L10.html#research-in-brief-the-mere-exposure-effect",
    "title": "23  Lab 10: Judgment & Decision-Making",
    "section": "",
    "text": "23.1.1 The Research Area\nJudgment and decision-making research examines how people form preferences, make choices, and evaluate information in their environment. A fundamental question in this domain concerns the origins of our preferences: Why do we like what we like? While we often believe our preferences reflect objective qualities of objects or experiences, psychological research reveals that seemingly irrelevant factors can systematically influence our evaluations.\nOne particularly robust finding is that familiarity itself can generate positive feelings. We tend to prefer things we have encountered before, even when we cannot consciously remember those encounters. This phenomenon has important implications for understanding consumer behavior, social relationships, and aesthetic judgments. The mere exposure effect demonstrates that repeated, unreinforced exposure to a stimulus increases liking for that stimulus, revealing how our judgments can be shaped by experiences we may not even recall.\nUnderstanding how familiarity influences preference helps explain real-world phenomena ranging from music popularity to friendship formation. Researchers have developed controlled experimental paradigms to isolate the effects of repeated exposure from other factors that might influence liking, such as the inherent qualities of stimuli or conscious memory for previous encounters.\n\n\n23.1.2 Mere Exposure Effects\nThe mere exposure effect (MEE) refers to the phenomenon whereby repeated, unreinforced exposure to a stimulus results in increased liking for that stimulus. First systematically investigated by Titchener in 1910 and later coined by Zajonc in 1968, this effect challenges the folk wisdom that “familiarity breeds contempt.” Instead, research consistently demonstrates that familiarity breeds liking.\nThe MEE occurs across diverse stimulus types including photographs, drawings, musical selections, words, nonsense syllables, and ideographs. A meta-analysis by Bornstein in 1989 found an overall effect size of r = 0.26, indicating a moderate but reliable phenomenon. The effect has been replicated in hundreds of studies across different laboratories and cultures, making it one of the most robust findings in social psychology.\nImportantly, the MEE represents a form of cognitive bias because it demonstrates that our attitudes toward stimuli change not because the stimuli themselves have changed, but simply because we have been exposed to them. People are typically unaware that mere exposure has influenced their preferences, often attributing their positive feelings to inherent qualities of the stimulus rather than to their familiarity with it.\n\n\n23.1.3 The Research Design\nMEE studies typically use experimental designs where participants are exposed to unfamiliar stimuli at varying frequencies during a familiarization phase, followed by a rating phase where they report their liking for each stimulus. Most studies employ within-participants designs, allowing each person to rate stimuli they have seen different numbers of times.\nStimulus Presentation: Participants view a series of novel stimuli (such as unfamiliar photographs, nonsense words, or abstract images) presented multiple times. For example, one stimulus might appear once, another five times, and another ten times during the familiarization phase. Presentation is typically randomized to prevent participants from noticing the repetition pattern.\nTask Requirements: After the familiarization phase, participants rate how much they like each stimulus, typically using Likert-type scales (e.g., 1 = dislike very much, 9 = like very much). Participants are usually not told that some stimuli appeared more frequently than others during the familiarization phase. The key comparison examines whether stimuli presented more frequently receive higher liking ratings than stimuli presented less frequently or not at all.\nExposure Manipulations: Researchers systematically vary several parameters including number of exposures (typically ranging from 0 to 50 presentations), exposure duration (from subliminal presentations under 5 milliseconds to several seconds), and the interval between exposures and ratings (from immediate to weeks later).\nThe within-participants design controls for individual differences in baseline preferences and response styles. Each participant provides ratings across all exposure frequency conditions, allowing researchers to isolate the specific effect of repetition on liking while holding constant factors like individual aesthetic preferences or mood.\n\n\n23.1.4 Key Findings\nResearch has revealed several consistent patterns in the MEE. Liking ratings typically increase with exposure frequency up to approximately 10-20 exposures, after which the effect plateaus and may even reverse slightly, producing an “overexposure effect” where excessive repetition leads to boredom and decreased liking.\nStimulus Complexity: Complex stimuli produce stronger and more durable MEEs than simple stimuli. Complex stimuli show more rapid increases in liking at lower exposure frequencies and are less susceptible to the overexposure effect. Simple stimuli become boring more quickly, leading to decreased liking at higher exposure frequencies.\nSubliminal Exposure: One of the most striking findings is that stimuli presented subliminally (too briefly for conscious recognition) produce stronger MEEs than clearly recognized stimuli. Meta-analytic data show that unrecognized stimuli yield an effect size of r = 0.53, briefly presented recognized stimuli yield r = 0.34, and fully recognized stimuli yield only r = 0.12. This inverse relationship between awareness and effect size suggests that conscious recognition actually inhibits the MEE, possibly because people discount their positive feelings when they attribute them to repeated exposure rather than to stimulus quality.\nTemporal Factors: The MEE strengthens with increasing delay between exposure and rating phases. Effects can persist for at least one to two weeks. Additionally, heterogeneous (randomized) exposure sequences produce significantly stronger effects than homogeneous (massed) sequences, with heterogeneous exposures yielding r = 0.30 compared to r = -0.02 for massed exposures.\n\n\n23.1.5 Implications\nThe distinct patterns observed in MEE research provide important insights into the relationship between familiarity and preference. The finding that subliminal exposures produce the strongest effects challenges assumptions about conscious awareness being necessary for attitude formation. This suggests that affective responses can develop through automatic, non-conscious processes.\nThe robustness of the MEE across stimulus types and its persistence over time indicate that this represents a fundamental property of human cognition rather than a laboratory artifact. The phenomenon has clear evolutionary significance: organisms that develop positive associations with familiar, non-threatening stimuli in their environment may gain adaptive advantages in resource allocation and threat assessment.\nThe MEE has practical applications in multiple domains. In marketing and advertising, the principle explains why repeated exposure to brand names and products increases consumer preference, even without explicit persuasive messaging. In social psychology, the effect helps explain proximity-based friendship formation and the development of interpersonal attraction. In aesthetics, it accounts for how initially unfamiliar art forms or musical styles become more appealing with repeated exposure.\nHowever, the MEE also represents a genuine cognitive illusion. People typically attribute their increased liking to inherent properties of the stimulus rather than to their familiarity with it. This misattribution can lead to biased judgments in contexts ranging from personnel selection (favoring familiar candidates) to judicial decisions (being influenced by repeated exposure to certain arguments or evidence).\nThe phenomenon demonstrates how our subjective experiences of preference are constructed through processes we cannot directly access. Even when people are explicitly warned about the mere exposure effect, they continue to show the bias, suggesting that conscious awareness of the mechanism does not eliminate its influence. This illustrates the powerful role of automatic, implicit processes in shaping our evaluations and preferences.\n\n\n23.1.6 Further Reading\nBornstein, R. F. (1989). Exposure and affect: Overview and meta-analysis of research, 1968-1987. Psychological Bulletin, 106, 265-289.\nMoreland, R. L., & Topolinski, S. (2010). The mere exposure phenomenon: A lingering melody by Robert Zajonc. Emotion Review, 2, 329-339.\nRoediger, H.L., Gallo, D.A. (2016). Mere Exposure Effect. In Rudiger F. Pohl (Eds.), Cognitive Illusions (2nd ed.). Routledge.\nZajonc, R. B. (1968). Attitudinal effects of mere exposure. Journal of Personality and Social Psychology Monographs, 9(2, Part 2), 1-27.\nZajonc, R. B. (2001). Mere exposure: A gateway to the subliminal. Current Directions in Psychological Science, 10, 224-228.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 10: Judgment & Decision-Making</span>"
    ]
  },
  {
    "objectID": "23-L10.html#program-a-between-subjects-mere-exposure-paradigm",
    "href": "23-L10.html#program-a-between-subjects-mere-exposure-paradigm",
    "title": "23  Lab 10: Judgment & Decision-Making",
    "section": "23.2 Program a Between-Subjects Mere Exposure Paradigm",
    "text": "23.2 Program a Between-Subjects Mere Exposure Paradigm\nIn this lab, you’ll program a novel variation of the mere exposure paradigm. Participants will complete two phases:\n\nExposure phase: View abstract paintings and examine each carefully\nEvaluation phase: Rate how much they like each image\n\nParticipants will view each painting 0, 1, 2, 5, 8, or 10 times during exposure, allowing us to test the mere exposure effect (increased liking with repeated exposure).\nWe also include a novel between-subjects manipulation. Participants will be told either the paintings were created by professional abstract artists or they will be told that the images were generated by AI. In reality, all paintings are AI-generated.\nResearch question: Does the mere exposure effect depend on beliefs about artwork origin? Will repeated exposure increase liking more for paintings believed to be human-created, or will the effect be equivalent regardless of purported source?\nYour lab folder contains boilerplate files and 12 AI-generated abstract artworks:\n\n📂 L10\n├──  📄 index.html\n├──  📄 exp.js\n├──  📄 style.css\n├──  📂 images\n│    └──  📂 art\n└──  📂 jspsych\n\n\n23.2.1 Initiate JsPsych\nLet’s begin by initializing jsPsych with the basic setup we typically need. In the HTML index page, all necessary files have been added: the jsPsych core files, our exp.js file, our style.css file, and the plugins required for this experiment.\nI’ve also added a welcome screen and our save data trial at the end.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n23.2.2 Add Preload\nSince we’re going to need all 12 images, we can setup our preload with all 12 images.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Preload Images\n// ============================================\n\nlet preload = {\n  type: jsPsychPreload,\n  images: [\n        \"images/art/art_1.png\",\n        \"images/art/art_2.png\",\n        \"images/art/art_3.png\",\n        \"images/art/art_4.png\",\n        \"images/art/art_5.png\",\n        \"images/art/art_6.png\",\n        \"images/art/art_7.png\",\n        \"images/art/art_8.png\",\n        \"images/art/art_9.png\",\n        \"images/art/art_10.png\",\n        \"images/art/art_11.png\",\n        \"images/art/art_12.png\"],\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  preload,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n23.2.3 Add Exposure Phase\nWe’ll add the ‘exposure’ phase, which, for now, will just display each image once.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Preload Images\n// ============================================\n\nlet preload = {\n  type: jsPsychPreload,\n  images: [\n        \"images/art/art_1.png\",\n        \"images/art/art_2.png\",\n        \"images/art/art_3.png\",\n        \"images/art/art_4.png\",\n        \"images/art/art_5.png\",\n        \"images/art/art_6.png\",\n        \"images/art/art_7.png\",\n        \"images/art/art_8.png\",\n        \"images/art/art_9.png\",\n        \"images/art/art_10.png\",\n        \"images/art/art_11.png\",\n        \"images/art/art_12.png\"],\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Exposure Phase\n// ============================================\n\nlet exposure = {\n        timeline: [\n            {\n                type:jsPsychImageKeyboardResponse,\n                stimulus: jsPsych.timelineVariable(\"image\"),\n                choices: \"NO_KEYS\",\n                stimulus_width: 250,\n                trial_duration: 1000,\n                post_trial_gap: 200\n            }\n        ],\n        timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n        ]\n    }\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n    welcome,\n    preload,\n    exposure,\n    saveData\n]);\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n23.2.4 Add Evaluation Phase\nIn the evaluation phase, participants will rate how much they like each painting using a slider. We’re using the slider response plugin, which you can read more about here: https://www.jspsych.org/latest/plugins/image-slider-response/.\nWe’re using the same full list of images, presented in a random order.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Preload Images\n// ============================================\n\nlet preload = {\n  type: jsPsychPreload,\n  images: [\n        \"images/art/art_1.png\",\n        \"images/art/art_2.png\",\n        \"images/art/art_3.png\",\n        \"images/art/art_4.png\",\n        \"images/art/art_5.png\",\n        \"images/art/art_6.png\",\n        \"images/art/art_7.png\",\n        \"images/art/art_8.png\",\n        \"images/art/art_9.png\",\n        \"images/art/art_10.png\",\n        \"images/art/art_11.png\",\n        \"images/art/art_12.png\"],\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Exposure Phase\n// ============================================\n\nlet exposure = {\n        timeline: [\n            {\n                type:jsPsychImageKeyboardResponse,\n                stimulus: jsPsych.timelineVariable(\"image\"),\n                choices: \"NO_KEYS\",\n                stimulus_width: 250,\n                trial_duration: 1000,\n                post_trial_gap: 200\n            }\n        ],\n        timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n        ]\n    }\n\n// ============================================\n// Evaluation Phase\n// ============================================\n\nlet evaluation = {\n      timeline: [\n        {\n          type: jsPsychImageSliderResponse,\n          stimulus: jsPsych.timelineVariable(\"image\"),\n          prompt: \"&lt;p&gt;How much do you like this painting?&lt;/p&gt;\",\n          labels: [\"Dislike Very Much\", \"Like Very Much\"],\n          min: 1,\n          max: 9,\n          step: 1,\n          stimulus_width: 250,\n          slider_start: 5,\n          require_movement: true,\n          post_trial_gap: 200,\n          data: {\n              phase: \"evaluation\"\n          }\n        }\n      ],\n      timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n      ],\n      randomized_order: true\n}\n\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n    welcome,\n    preload,\n    exposure,\n    evaluation,\n    saveData\n]);\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n23.2.5 Randomize Image Order with Unequal Repetitions\nCurrently, each image displays once during the exposure phase. We need to modify this so images appear 0, 1, 2, 5, 8, or 10 times.\nWe want to randomly pair each image with a frequency, then randomize the entire exposure block order, repeating each image that many times.\nWe’ll use a custom sampling function to accomplish this. Here it is in full, but we’ll walkthrough it step-by-step after:\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Preload Images\n// ============================================\n\nlet preload = {\n  type: jsPsychPreload,\n  images: [\n        \"images/art/art_1.png\",\n        \"images/art/art_2.png\",\n        \"images/art/art_3.png\",\n        \"images/art/art_4.png\",\n        \"images/art/art_5.png\",\n        \"images/art/art_6.png\",\n        \"images/art/art_7.png\",\n        \"images/art/art_8.png\",\n        \"images/art/art_9.png\",\n        \"images/art/art_10.png\",\n        \"images/art/art_11.png\",\n        \"images/art/art_12.png\"],\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Exposure Phase\n// ============================================\n\nlet exposure = {\n        timeline: [\n            {\n                type:jsPsychImageKeyboardResponse,\n                stimulus: jsPsych.timelineVariable(\"image\"),\n                choices: \"NO_KEYS\",\n                stimulus_width: 250,\n                trial_duration: 1000,\n                post_trial_gap: 200\n            }\n        ],\n        timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n        ],\n        sample: {\n            type: \"custom\",\n            fn: function(indices){\n                let output = []\n\n                // Define how many times each image should appear\n                // shuffle so that it randomly paired with an image index\n                const repetitions = jsPsych.randomization.shuffle([0, 1, 2, 5, 8, 10, 0, 1, 2, 5, 8, 10])\n        \n                // Add each image the specified number of times\n                // Loop through the repetitions array\n                for (let i = 0; i &lt; repetitions.length; i++) {\n                    const imageIndex = indices[i]\n                    const repeatCount = repetitions[i]\n        \n                    // Add this image repeatCount times to output\n                    for (let j = 0; j &lt; repeatCount; j++) {\n                        output.push(imageIndex)\n                    }\n                }\n\n                // save the repetition data as a global property\n                jsPsych.data.addProperties({image_repetition_map: repetitions})\n        \n                // Shuffle so the repeated images appear in random order\n                output = jsPsych.randomization.shuffle(output)\n                console.log(output)        \n\n                return output\n            }\n        }\n    }\n\n// ============================================\n// Evaluation Phase\n// ============================================\n\nlet evaluation = {\n      timeline: [\n        {\n          type: jsPsychImageSliderResponse,\n          stimulus: jsPsych.timelineVariable(\"image\"),\n          prompt: \"&lt;p&gt;How much do you like this painting?&lt;/p&gt;\",\n          labels: [\"Dislike Very Much\", \"Like Very Much\"],\n          min: 1,\n          max: 9,\n          step: 1,\n          stimulus_width: 250,\n          slider_start: 5,\n          require_movement: true,\n          post_trial_gap: 200,\n          data: {\n              phase: \"evaluation\"\n          }\n        }\n      ],\n      timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n      ],\n      randomized_order: true\n}\n\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n    welcome,\n    preload,\n    exposure,\n    evaluation,\n    saveData\n]);\n \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\nLet’s walk through what I did in this code and why:\nThis function controls how many times each image appears in your experiment. Instead of showing each image once, some images will be repeated more frequently than others.\n1. Create an empty output array\nlet output = []\nThis will hold all the trial indices we want to present (including repetitions).\n2. Randomize repetition assignments\nI want to pair each timeline_variable with a frequency.\nRemember that the indices variable contains an array of numbers [0,1,2 ... 11] referring to the list of timeline variables. In this case, idices[0] is 0. If we look at the 0 index of timeline_variables we can see that it is art_1.jpg.\n\nindices[0] == 0 == timeline_variables[0] == \"images/art/art_1.png\"\nindices[1] == 1 == timeline_variables[1] == \"images/art/art_2.png\"\nindices[2] == 2 == timeline_variables[2] == \"images/art/art_4.png\"\netc.\n\nInstead of randomizing indices, however, I’m going to create a list of 12 frequencies, then randomize that list to pair it with the indices array items.\nconst repetitions = jsPsych.randomization.shuffle([0, 1, 2, 5, 8, 10, 0, 1, 2, 5, 8, 10])\n\nWe have 12 images total (based on your indices array)\nEach image will be randomly assigned one of these repetition counts (i.e., image 1 might get assigned 0, 1, 2, 5, 8, or 10)\nThe array contains: 0, 1, 2, 5, 8, 10 (twice each)\nBy shuffling, we ensure random pairing between images and repetition counts\nExample result: [5, 0, 10, 1, 8, 2, 0, 5, 1, 10, 2, 8]. This would get paired with the image indices [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] which means the first image at index 0 (art_1.jpg) will get displayed 5 times. The image at index 1 (art_2.jpg) will get displayed 0 times (none), etc.\n\n3. Build the trial list with repetitions\nNow, we need to build an array that actually repeats the indices the number of times in frequency. That is we want it result in something like [8,9,9,6,6,6,6,6,2,2,2,2,2,2,2,2, ...].\nI create two loops to accomplish this. An outer loop that goes the the repetitions array, and an inner loop that adds the indices X number of times to the output array.\nFor example, if repetitions[0] == 5 after the shuffle. Then on the first loop it will take indices[0], which is 0 and put it 5 times in the output array so that output == [0,0,0,0,0] after the outer loop. We know that index 0 refers to art_1.jpg, so no we know that this image will be displayed five times.\nfor (let i = 0; i &lt; repetitions.length; i++) {\n    const imageIndex = indices[i]\n    const repeatCount = repetitions[i]\n\n    for (let j = 0; j &lt; repeatCount; j++) {\n        output.push(imageIndex)\n    }\n}\n\nLoop through each image (using i as the counter)\nimageIndex = which image we’re working with (e.g., image 0, 1, 2…)\nrepeatCount = how many times to show this image (from our shuffled repetitions array)\nInner loop adds that image to output the specified number of times\nExample: If image 3 has repeatCount = 5, it gets added 5 times\n\n4. Save repetition information to data\njsPsych.data.addProperties({image_repetition_map: repetitions})\n\nRecords which repetition count was assigned to each image position\nThis gets saved as a column in your output data\nHelps you verify your manipulation during analysis\n\n5. Randomize trial order & return the trial order\nFinally, we shuffle the new list of indices and return it from the function.\noutput = jsPsych.randomization.shuffle(output)\n\nreturn output\nThe result this will be an array of 52 numbers, referring to our timeline variables, with some repeating more often than others.\n\n\n23.2.6 Add Between-Subjects Instructions\nCreate two instruction sets for different participant groups:\n\nGroup 1: Told artwork was created by AI\nGroup 2: Told artwork was created by human artists\n\nWe’ll create both instruction sets first, then add randomized assignment. We’ll need instruction sets for both the exposure and evaluation phases.\nFor now, the AI instructions are in jsPsych.run. You can swap them with the human instructions to preview the alternative version.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Preload Images\n// ============================================\n\nlet preload = {\n  type: jsPsychPreload,\n  images: [\n        \"images/art/art_1.png\",\n        \"images/art/art_2.png\",\n        \"images/art/art_3.png\",\n        \"images/art/art_4.png\",\n        \"images/art/art_5.png\",\n        \"images/art/art_6.png\",\n        \"images/art/art_7.png\",\n        \"images/art/art_8.png\",\n        \"images/art/art_9.png\",\n        \"images/art/art_10.png\",\n        \"images/art/art_11.png\",\n        \"images/art/art_12.png\"],\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Exposure Phase\n// ============================================\n\nlet ai_exposure_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;This is a study of people's responses to visual stimuli. You will be presented with a series of abstract paintings one at a time, and you should examine each painting as it's presented.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;All of these paintings were generated by artificial intelligence. We're providing this information because research suggests that knowing the source of artwork may influence how people perceive it.&lt;/p&gt;\n       &lt;/div&gt;`, \n      `&lt;div class=\"instructionStyle\"&gt;\n           &lt;p&gt;After all the paintings have been presented, We'll ask you some questions about your reactions to the stimuli. There are about 50 stimuli in all, and this part of the experiment will take about 4 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"instructions\"\n  }\n}\n\nlet human_exposure_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;This is a study of people's responses to visual stimuli. You will be presented with a series of abstract paintings one at a time, and you should examine each painting as it's presented.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;All of these paintings were created by professional abstract artists. We're providing this information because research suggests that knowing the source of artwork may influence how people perceive it.&lt;/p&gt;\n       &lt;/div&gt;`, \n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;After all the paintings have been presented, We'll ask you some questions about your reactions to the stimuli. There are about 50 stimuli in all, and this part of the experiment will take about 4 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"instructions\"\n  }\n}\n\nlet exposure = {\n        timeline: [\n            {\n                type:jsPsychImageKeyboardResponse,\n                stimulus: jsPsych.timelineVariable(\"image\"),\n                choices: \"NO_KEYS\",\n                stimulus_width: 250,\n                trial_duration: 1000,\n                post_trial_gap: 200\n            }\n        ],\n        timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n        ],\n        sample: {\n            type: \"custom\",\n            fn: function(indices){\n                let output = []\n\n                // Define how many times each image should appear\n                // shuffle so that it randomly paired with an image index\n                const repetitions = jsPsych.randomization.shuffle([0, 1, 2, 5, 8, 10, 0, 1, 2, 5, 8, 10])\n        \n                // Add each image the specified number of times\n                for (let i = 0; i &lt; repetitions.length; i++) {\n                    const imageIndex = indices[i]\n                    const repeatCount = repetitions[i]\n        \n                    // Add this image repeatCount times to output\n                    for (let j = 0; j &lt; repeatCount; j++) {\n                        output.push(imageIndex)\n                    }\n                }\n\n                // save the repetition data as a global property\n                jsPsych.data.addProperties({image_repetition_map: repetitions})\n        \n                // Shuffle so the repeated images appear in random order\n                output = jsPsych.randomization.shuffle(output)\n        \n                return output\n            }\n        }\n    }\n\n// ============================================\n// Evaluation Phase\n// ============================================\n\nlet ai_evaluation_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;You will now see a series of AI-generated abstract paintings, some of which you may have seen before and some that are new.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;For each AI-generated painting, please rate how much you like it using the scale provided. There are no right or wrong answers. We're interested in your personal preferences.&lt;/p&gt;\n       &lt;/div&gt;`, \n\n      `&lt;div class=\"instructionStyle\"&gt;\n           &lt;p&gt;Please respond based on your immediate impression of each painting. This part of the experiment will take about 3 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"evaluation_instructions\"\n  }\n}\n\nlet human_evaluation_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;You will now see a series of abstract paintings created by professional artists, some of which you may have seen before and some that are new.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;For each artist-created painting, please rate how much you like it using the scale provided. There are no right or wrong answers. We're interested in your personal preferences.&lt;/p&gt;\n       &lt;/div&gt;`, \n\n      `&lt;div class=\"instructionStyle\"&gt;\n           &lt;p&gt;Please respond based on your immediate impression of each painting. This part of the experiment will take about 3 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"evaluation_instructions\"\n  }\n}\n\nlet evaluation = {\n      timeline: [\n        {\n          type: jsPsychImageSliderResponse,\n          stimulus: jsPsych.timelineVariable(\"image\"),\n          prompt: \"&lt;p&gt;How much do you like this painting?&lt;/p&gt;\",\n          labels: [\"Dislike Very Much\", \"Like Very Much\"],\n          min: 1,\n          max: 9,\n          step: 1,\n          stimulus_width: 250,\n          slider_start: 5,\n          require_movement: true,\n          post_trial_gap: 200,\n          data: {\n              phase: \"evaluation\"\n          }\n        }\n      ],\n      timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n      ],\n      randomized_order: true\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\n  // run with ai instructions\n jsPsych.run([\n    welcome,\n    preload,\n    ai_exposure_instructions,\n    exposure,\n    ai_evaluation_instructions,\n    evaluation,\n    saveData\n  ]);\n \n\n\n \n.instructionStyle {\n     max-width: 750px;\n     text-align: left;\n}\n \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n23.2.7 Add Between-Subjects Assignment\nAssign participants to conditions based on a numeric ID from the study URL. To test this code, modify your URL by adding ?id=1 or ?id=2:\nfile:///C:/Users/umbroson/L10/index.html?id=1\nfile:///C:/Users/umbroson/L10/index.html?id=2\nUse odd IDs for one condition and even IDs for the other. If no ID is provided in the URL, the code will randomly assign a condition. Refresh the page to see the assignment change.\nIn our code, we’ve added if-else logic to change which jsPsych.run function we call.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Judgment & Decision-Making&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-image-slider-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Between-Subjects Condition Assignment\n// ============================================\n\n// Get participant ID from URL, or generate random one if not found\nlet participant_id = jsPsych.data.getURLVariable(\"id\") || jsPsych.randomization.randomInt(1, 100000);\n\n// Assign to one of three conditions based on ID\nlet conditions = [\"ai\", \"human\"];\nlet assigned_condition = conditions[participant_id % 2];\n\n// Save id and assignment to data\njsPsych.data.addProperties({\n  participant_id: participant_id,\n  assigned_condition: assigned_condition\n});\n\n// ============================================\n// Preload Images\n// ============================================\n\nlet preload = {\n  type: jsPsychPreload,\n  images: [\n        \"images/art/art_1.png\",\n        \"images/art/art_2.png\",\n        \"images/art/art_3.png\",\n        \"images/art/art_4.png\",\n        \"images/art/art_5.png\",\n        \"images/art/art_6.png\",\n        \"images/art/art_7.png\",\n        \"images/art/art_8.png\",\n        \"images/art/art_9.png\",\n        \"images/art/art_10.png\",\n        \"images/art/art_11.png\",\n        \"images/art/art_12.png\"],\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Exposure Phase\n// ============================================\n\nlet ai_exposure_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;This is a study of people's responses to visual stimuli. You will be presented with a series of abstract paintings one at a time, and you should examine each painting as it's presented.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;All of these paintings were generated by artificial intelligence. We're providing this information because research suggests that knowing the source of artwork may influence how people perceive it.&lt;/p&gt;\n       &lt;/div&gt;`, \n      `&lt;div class=\"instructionStyle\"&gt;\n           &lt;p&gt;After all the paintings have been presented, We'll ask you some questions about your reactions to the stimuli. There are about 50 stimuli in all, and this part of the experiment will take about 4 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"instructions\"\n  }\n}\n\nlet human_exposure_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;This is a study of people's responses to visual stimuli. You will be presented with a series of abstract paintings one at a time, and you should examine each painting as it's presented.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;All of these paintings were created by professional abstract artists. We're providing this information because research suggests that knowing the source of artwork may influence how people perceive it.&lt;/p&gt;\n       &lt;/div&gt;`, \n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;After all the paintings have been presented, We'll ask you some questions about your reactions to the stimuli. There are about 50 stimuli in all, and this part of the experiment will take about 4 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"instructions\"\n  }\n}\n\nlet exposure = {\n        timeline: [\n            {\n                type:jsPsychImageKeyboardResponse,\n                stimulus: jsPsych.timelineVariable(\"image\"),\n                choices: \"NO_KEYS\",\n                stimulus_width: 250,\n                trial_duration: 1000,\n                post_trial_gap: 200\n            }\n        ],\n        timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n        ],\n        sample: {\n            type: \"custom\",\n            fn: function(indices){\n                let output = []\n\n                // Define how many times each image should appear\n                // shuffle so that it randomly paired with an image index\n                const repetitions = jsPsych.randomization.shuffle([0, 1, 2, 5, 8, 10, 0, 1, 2, 5, 8, 10])\n        \n                // Add each image the specified number of times\n                for (let i = 0; i &lt; repetitions.length; i++) {\n                    const imageIndex = indices[i]\n                    const repeatCount = repetitions[i]\n        \n                    // Add this image repeatCount times to output\n                    for (let j = 0; j &lt; repeatCount; j++) {\n                        output.push(imageIndex)\n                    }\n                }\n\n                // save the repetition data as a global property\n                jsPsych.data.addProperties({image_repetition_map: repetitions})\n        \n                // Shuffle so the repeated images appear in random order\n                output = jsPsych.randomization.shuffle(output)\n        \n                return output\n            }\n        }\n    }\n\n// ============================================\n// Evaluation Phase\n// ============================================\n\nlet ai_evaluation_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;You will now see a series of AI-generated abstract paintings, some of which you may have seen before and some that are new.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;For each AI-generated painting, please rate how much you like it using the scale provided. There are no right or wrong answers. We're interested in your personal preferences.&lt;/p&gt;\n       &lt;/div&gt;`, \n\n      `&lt;div class=\"instructionStyle\"&gt;\n           &lt;p&gt;Please respond based on your immediate impression of each painting. This part of the experiment will take about 3 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"evaluation_instructions\"\n  }\n}\n\nlet human_evaluation_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n     `&lt;div class=\"instructionStyle\"&gt;\n         &lt;p&gt;You will now see a series of abstract paintings created by professional artists, some of which you may have seen before and some that are new.&lt;/p&gt;\n      &lt;/div&gt;`,\n\n      `&lt;div class=\"instructionStyle\"&gt;\n          &lt;p&gt;For each artist-created painting, please rate how much you like it using the scale provided. There are no right or wrong answers. We're interested in your personal preferences.&lt;/p&gt;\n       &lt;/div&gt;`, \n\n      `&lt;div class=\"instructionStyle\"&gt;\n           &lt;p&gt;Please respond based on your immediate impression of each painting. This part of the experiment will take about 3 minutes.&lt;/p&gt;\n       &lt;/div&gt;`, \n    ],\n  show_clickable_nav: true,\n  show_page_number: true,\n  data: {\n      phase: \"evaluation_instructions\"\n  }\n}\n\nlet evaluation = {\n      timeline: [\n        {\n          type: jsPsychImageSliderResponse,\n          stimulus: jsPsych.timelineVariable(\"image\"),\n          prompt: \"&lt;p&gt;How much do you like this painting?&lt;/p&gt;\",\n          labels: [\"Dislike Very Much\", \"Like Very Much\"],\n          min: 1,\n          max: 9,\n          step: 1,\n          stimulus_width: 250,\n          slider_start: 5,\n          require_movement: true,\n          post_trial_gap: 200,\n          data: {\n              phase: \"evaluation\"\n          }\n        }\n      ],\n      timeline_variables: [\n            {image: \"images/art/art_1.png\"},\n            {image: \"images/art/art_2.png\"},\n            {image: \"images/art/art_3.png\"},\n            {image: \"images/art/art_4.png\"},\n            {image: \"images/art/art_5.png\"},\n            {image: \"images/art/art_6.png\"},\n            {image: \"images/art/art_7.png\"},\n            {image: \"images/art/art_8.png\"},\n            {image: \"images/art/art_9.png\"},\n            {image: \"images/art/art_10.png\"},\n            {image: \"images/art/art_11.png\"},\n            {image: \"images/art/art_12.png\"}\n      ],\n      randomized_order: true\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"mereExposure_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\nif(assigned_condition == \"ai\"){\n\n  // run with ai instructions\n  jsPsych.run([\n    welcome,\n    preload,\n    ai_exposure_instructions,\n    exposure,\n    ai_evaluation_instructions,\n    evaluation,\n    saveData\n  ]);\n\n} else if (assigned_condition == \"human\"){\n\n  // run with human instructions\n  jsPsych.run([\n    welcome,\n    preload,\n    human_exposure_instructions,\n    exposure,\n    human_evaluation_instructions,\n    evaluation,\n    saveData\n  ]);\n\n}\n \n\n\n \n.instructionStyle {\n     max-width: 750px;\n     text-align: left;\n}\n \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 10: Judgment & Decision-Making</span>"
    ]
  },
  {
    "objectID": "23-L10.html#stretch-goals",
    "href": "23-L10.html#stretch-goals",
    "title": "23  Lab 10: Judgment & Decision-Making",
    "section": "23.3 Stretch Goals",
    "text": "23.3 Stretch Goals\n\n23.3.1 Add a third between-subjects condition\nLet’s add another condition to our experiment. The mere exposure effect for artwork might change due to AI vs. Professional Artists because of perceived skill. Let’s add a third condition that tells participants that the artworks were created by ’amateur artists as a hobby”.\nThe instructions should read:\n\n“All of these paintings were created by amateur artists as a hobby…”\n“For each amateur artist-created painting, please rate how much you like it…”\n\n\n\n23.3.2 Add a deception debrief\nThis experiment, although fairly benign, does involve deception. We have lied to some participants, telling them that the paintings were created by artists, when in truth they were all created by an AI image generator.\nLet’s two things. Add a deception debrief before the save data screen. This deception screen ONLY needs to be present for the artist/amateur-artist participants. The AI condition has no deception involved.\nHere is the text, you can use the instruction plugin and style it properly:\n“Deception Notice\nBefore we finish, we need to inform you about an important aspect of this study:\nThe labels indicating that the paintings were “Artist-created” was assigned randomly and did not reflect the true source of the paintings. In fact, all images were AI-generated.\nThis study investigated the “mere exposure effect”: people’s tendency to develop preferences for things they’ve encountered before, even without conscious awareness. We specifically tested whether this effect is influenced by beliefs about whether artwork was created by AI or by human artists.\nTo answer this question, we needed participants to genuinely believe the source labels. If you had known the labels were random, you would not have formed real beliefs about each painting’s origin, making it impossible to test our hypothesis.”",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Lab 10: Judgment & Decision-Making</span>"
    ]
  },
  {
    "objectID": "24-L11.html",
    "href": "24-L11.html",
    "title": "24  Lab 11: Face Perception",
    "section": "",
    "text": "24.1 Research in Brief: Face Inversion",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Lab 11: Face Perception</span>"
    ]
  },
  {
    "objectID": "24-L11.html#research-in-brief-face-inversion",
    "href": "24-L11.html#research-in-brief-face-inversion",
    "title": "24  Lab 11: Face Perception",
    "section": "",
    "text": "24.1.1 The Research Area\nPerception refers to the cognitive processes through which we interpret and make sense of sensory information from our environment. Face perception represents a specialized domain within this broader system, involving mechanisms that allow us to extract various types of information from faces, including identity, emotion, age, and social characteristics. Our visual system processes faces differently from other objects, reflecting the importance of faces in human social interaction.\nFace recognition addresses fundamental questions about how we identify individuals and maintain stable representations of people despite substantial variations in their appearance. How do we recognize someone across different viewing angles, lighting conditions, and expressions? What makes some faces easier to remember than others? Why do we struggle to match photographs of unfamiliar faces but effortlessly recognize people we know? Understanding face recognition has important implications for eyewitness testimony, security systems, and disorders affecting social cognition.\nThe study of face recognition connects to many practical applications in forensic contexts, passport control, surveillance systems, and understanding conditions like prosopagnosia (face blindness). To investigate these mechanisms systematically, researchers have developed experimental paradigms that can isolate different aspects of face processing, including how faces are represented in memory and what happens when faces are transformed or degraded.\n\n\n24.1.2 Types of Face Processing\nFace processing operates through several distinct systems that extract different types of information. Configural processing involves perceiving faces as integrated wholes rather than collections of separate features, allowing us to detect subtle differences in the spatial relationships between facial features. Featural processing focuses on individual components like eyes, nose, and mouth, though these features are typically processed within the context of the whole face rather than in isolation.\nHolistic processing represents a particularly important aspect of face perception that involves integrating all facial features into a unified representation. Unlike processing individual features separately, holistic processing treats the face as a gestalt pattern where the whole is more than the sum of its parts. This system allows us to recognize faces rapidly and accurately, even when individual features might be difficult to identify in isolation.\nResearch distinguishes between processing of familiar and unfamiliar faces, which show markedly different characteristics. Familiar face recognition is robust across variations in viewpoint, lighting, and expression, while unfamiliar face matching is surprisingly error-prone even when comparing two photographs of the same person. These systems rely on different types of information, with unfamiliar face processing dominated by external features like hairstyle, while familiar face recognition depends more heavily on internal features like the eyes and nose.\n\n\n24.1.3 The Research Design\nThe face inversion paradigm developed by Yin (1969) uses a within-subjects experimental design to examine how orientation affects face recognition. Participants recognize faces that are presented either upright or inverted (rotated 180 degrees).\nStimulus Presentation: Participants view photographs of faces in either normal upright orientation or turned upside down. The faces may be familiar (celebrities or personally known individuals) or unfamiliar faces that participants study before testing. The same face images are used in both orientations, controlling for differences in image quality or distinctiveness.\nTask Requirements: Participants must identify familiar faces by naming them or matching them to provided names, or they must recognize previously studied unfamiliar faces in a memory test. They respond as accurately as possible, with both accuracy and response time measured to assess recognition performance.\nThe design manipulates face orientation as the key variable: upright presentation where faces appear in their normal orientation, and inverted presentation where faces are rotated 180 degrees. For comparison, the same inversion manipulation is often applied to other visual stimuli such as houses, objects, or body postures to determine whether faces show a disproportionate inversion effect.\nThe within-subjects design allows researchers to compare recognition performance for upright versus inverted presentations within the same participants. Each person experiences both upright and inverted faces, acting as their own control. This approach controls for individual differences in overall recognition ability while isolating the specific effects of orientation on face processing.\n\n\n24.1.4 Key Findings\nThe within-subjects comparisons have revealed that face recognition is disproportionately impaired by inversion compared to recognition of other visual objects. Upright faces are typically recognized with 95% accuracy, while inverted faces drop to approximately 70% accuracy. This inversion effect is larger for faces than for other categories of objects, suggesting that faces rely on specialized processing mechanisms that are disrupted by inversion.\nThe inversion effect appears to result from disruption of configural processing. When faces are upright, observers readily perceive the spatial relationships between features and the holistic pattern of the face. Inversion disrupts this configural processing, forcing observers to rely more on individual features. Evidence for this comes from the composite face effect, where the top half of one face combined with the bottom half of another creates a new perceived identity in upright faces, but this effect disappears when faces are inverted.\nThe magnitude of the inversion effect varies with face familiarity and type of information available. Familiar faces show substantial inversion effects, though they remain more recognizable when inverted than unfamiliar faces in the same orientation. Line drawings of faces show larger benefits from caricaturing when inverted, suggesting that reduced information makes configural processing more difficult. Photographic negatives show even larger impairments than inversion, with inverted negatives recognized only 25% of the time.\n\n\n24.1.5 Implications\nThe disproportionate effect of inversion on face recognition provides evidence for specialized face processing mechanisms that rely heavily on configural information. This behavioral evidence is supported by neuroimaging studies showing that face-selective regions like the fusiform face area respond differently to upright versus inverted faces. The inversion effect demonstrates that face recognition depends on perceiving faces as integrated patterns rather than collections of independent features.\nThese findings support holistic processing theories of face recognition, demonstrating that the spatial arrangement of features within the standard face template is important for recognition. The consistent patterns across participants suggest these represent fundamental properties of human face processing rather than learned strategies. Studies of prosopagnosia further support this interpretation, as individuals with face recognition deficits often show reduced or absent inversion effects, suggesting their impairment involves disrupted configural processing.\nThe face inversion paradigm exemplifies how simple experimental manipulations can reveal fundamental cognitive mechanisms. Its elegant design allows researchers to isolate configural processing while maintaining experimental control, making it a model for investigating specialized perceptual systems. The paradigm continues to generate insights into face processing, including how expertise develops and how different types of facial information contribute to recognition across the lifespan.\n\n\n24.1.6 Further Reading\nMaurer, D., Le Grand, R., & Mondloch, C. J. (2002). The many faces of configural processing. Trends in Cognitive Sciences, 6, 255-260.\nMcKone, E., & Yovel, G. (2009). Why does picture-plane inversion sometimes dissociate perception of features and spacing in faces, and sometimes not? Toward a new theory of holistic processing. Psychonomic Bulletin & Review, 16(5), 778-797.\nRossion, B. (2008). Picture-plane inversion leads to qualitative changes of face perception. Acta Psychologica, 128(2), 274-289.\nYin, R. K. (1969). Looking at upside-down faces. Journal of Experimental Psychology, 81(1), 141-145.\nYoung, A. W., & Burton, A. M. (2018). Are we face experts? Trends in Cognitive Sciences, 22, 100-110.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Lab 11: Face Perception</span>"
    ]
  },
  {
    "objectID": "24-L11.html#program-a-face-inversion-paradigm",
    "href": "24-L11.html#program-a-face-inversion-paradigm",
    "title": "24  Lab 11: Face Perception",
    "section": "24.2 Program a Face Inversion Paradigm",
    "text": "24.2 Program a Face Inversion Paradigm\nIn this lab, we will program the classic face inversion memory task comparing memory for faces to memory for airplanes. The task is a recognition task, which requires participants to study a list of images, then in a test phase, participants see an old image and a new image, and they have to decide which is the old image.\nHalf the images will be presented upside down and half rightside up. The orientation for each particular image is repeated in the study and test phases.\nIn the lab folder, we have the usual boilerplate files in addition to folders with images that we will use for our experiment.\n\n📂 L11\n├──  📄 index.html\n├──  📄 exp.js\n├──  📄 style.css\n├──  📂 images\n│     ├──  📂 faces\n│     ├──  📂 planes\n│     └──  📂 cats\n└──  📂 jspsych\n\n\n24.2.1 Initiate JsPsych\nLet’s begin by initializing jsPsych with the basic setup we typically need. In the HTML index page, all necessary files have been linked: the jsPsych core files, our exp.js file, our style.css file, and the plugins required for this experiment.\nI’ve also added a welcome screen and our save data trial at the end.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Face Perception&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"faceInversion_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  saveData\n]); \n\n\n  \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n24.2.2 Add Study Phase\nLet’s construct a short study phase with two images in our timeline variables: a right-side up face and an upside down house.\nWe’ll need to control the CSS of the images to be able to rotate them and make them upside down. Unfortunately, the image plugins don’t give us enough control for that, so instead, we’ll use the HTML plugin and write a function to display our image in its correct orientation according to the timeline variables.\nI’ve also set some other base CSS for the images to ensure they’re not too wide or tall and added a filter to make them all black and white.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 8: Cognitive Control&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n\n// ============================================\n// Study Phase\n// ============================================\n\nlet study_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    \"Welcome to the study phase.\",\n    \"You will see a series of faces and houses.\",\n    \"Please pay attention to each image and try to memorize them.\",\n    \"Press Next to begin.\"\n  ],\n  show_clickable_nav: true,\n  key_forward: \" \"\n};\n\nlet study_trials = {\n  timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 500\n      },\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n            return `&lt;img class=\"base_image ${jsPsych.evaluateTimelineVariable(\"image_orientation\")}\"   src=${jsPsych.evaluateTimelineVariable(\"old_image_src\")} &gt;`\n        },\n        choices: \"NO_KEYS\",\n        trial_duration: 1000\n      }\n  ],\n  timeline_variables: [\n    {old_image_src: \"images/faces/face_1.jpg\", image_orientation: \"up\"},\n    {old_image_src: \"images/houses/house_1.jpg\", image_orientation: \"down\"}\n  ],\n  randomize_order: true\n}\n\nlet study_phase = {\n    timeline: [\n      study_instructions,\n      study_trials\n    ]\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"faceInversion_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  study_phase,\n  saveData\n]); \n\n\n .base_image {\n    max-width: 250px;\n    max-height: 250px;\n    filter: grayscale(100%);\n  }\n  \n  .up {\n    transform: rotate(0deg);\n  }\n  \n  .down {\n    transform: rotate(180deg);\n  } \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n24.2.3 Add Test Phase\nLet’s again construct a short version of the test phase with only a couple of images. For the test phase, we’ll need to think a bit more carefully about what we need.\n\nWe’ll need both the old and new image in our timeline variables.\nIn the test phase, two images are presented side-by-side and participants indicate which one is the OLD image. We’ll use the HTML button response plugin and construct our HTML for the two images ourselves.\nWe also don’t want to always put the correct response in the same location on every trial. We’ll need some logic to determine whether the ‘old’ image goes on the left or the right based on another timeline variable.\n\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Face Perception&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Study Phase\n// ============================================\n\nlet study_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    \"Welcome to the study phase.\",\n    \"You will see a series of faces and houses.\",\n    \"Please pay attention to each image and try to memorize them.\",\n    \"Press Next to begin.\"\n  ],\n  show_clickable_nav: true,\n  key_forward: \" \"\n};\n\nlet study_trials = {\n  timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 500\n      },\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n            return `&lt;img class=\"base_image ${jsPsych.evaluateTimelineVariable(\"image_orientation\")}\"   src=${jsPsych.evaluateTimelineVariable(\"old_image_src\")} &gt;`\n        },\n        choices: \"NO_KEYS\",\n        trial_duration: 1000\n      }\n  ],\n  timeline_variables: [\n    {old_image_src: \"images/faces/face_1.jpg\", image_orientation: \"up\"},\n    {old_image_src: \"images/houses/house_1.jpg\", image_orientation: \"down\"}\n  ],\n  randomize_order: true\n}\n\nlet study_phase = {\n    timeline: [\n      study_instructions,\n      study_trials\n    ]\n}\n\n// ============================================\n// Test Phase\n// ============================================\n\nlet test_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n      \"That completes the study phase. You will now complete the memory test phase\",\n      \"You will see two images side-by-side.\",\n      \"One image is from the study phase (OLD) and one is new (NEW).\",\n      \"Your task is to identify the OLD image by clicking either the Left Image or Right Image button.\",\n      \"Press NEXT to begin.\"\n    ],\n    show_clickable_nav: true\n  };\n\nlet test_trials =  {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: function() {\n        let old_src = jsPsych.evaluateTimelineVariable(\"old_image_src\");\n        let new_src = jsPsych.evaluateTimelineVariable(\"new_image_src\");\n        let image_orientation = jsPsych.evaluateTimelineVariable(\"image_orientation\");\n        let old_location =  jsPsych.evaluateTimelineVariable(\"correct_location\");\n\n        let output\n        \n        if(old_location == \"left\"){\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n          &lt;/div&gt;`\n        } else {\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n          &lt;/div&gt;`\n        }\n\n        return output\n      },\n      prompt: \"Which image is an OLD (studied) image?\",\n      choices: [\"Left Image\", \"Right Image\"]\n    }\n  ],\n  timeline_variables: [\n      { \n        old_image_src: \"images/faces/face_1.jpg\",\n        new_image_src: \"images/faces/face_2.jpg\",\n        image_orientation: \"up\",\n        correct_location: \"left\"\n      },\n      { \n        old_image_src: \"images/houses/house_1.jpg\",\n        new_image_src: \"images/houses/house_2.jpg\",\n        image_orientation: \"down\",\n        correct_location: \"right\"\n      },\n  ],\n  randomize_order: true\n};\n\nlet test_phase = {\n    timeline: [\n      test_instructions,\n      test_trials\n    ]\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"faceInversion_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  study_phase,\n  test_phase,\n  saveData\n]); \n\n\n \n  .base_image {\n    max-width: 250px;\n    max-height: 250px;\n    filter: grayscale(100%);\n  }\n  \n  .up {\n    transform: rotate(0deg);\n  }\n  \n  .down {\n    transform: rotate(180deg);\n  }\n \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n24.2.4 Randomize Stimulus Selection and Assignments\nBefore deciding how to randomize our stimulus assignments, we need to have a good idea about what we want to end up with.\n\nWe have 50 face and 50 house images. We only 20 of each, 10 for the old images and 10 for the new images. Therefore, we need to randomly select 20 images from the full 50.\nImages need to be randomly split into an OLD set and a NEW set.\nOLD and NEW Images need to be randomly split into upside down or right-side up.\nThe OLD and NEW images are presented together during the test phase, so they need to be paired together\nWhen we present them together, we need to know which one goes on the left versus right side, to know which is the correct one and to make sure the old image isn’t always on the same side.\n\nLet’s make a mock single timeline variable that contains all these labels:\n// what type of image is it?\nimage_type: \"face\" // or \"house\"\n\n// Two images paired together, with a src label \n// these images need to be randomly assigned\nold_image_src: \"images/faces/face_1.jpg\",\nnew_image_src: \"images/faces/face_2.jpg\"\n\n// Orientation needs to be labelled too\n// Half the images need to be up, half down\nimage_orientation: \"up\" // or \"down\"\n\n// The location of the old image during test\n// This also needs to be randomly assigned\ncorrect_location: \"left\" // or \"right\nNow, we’ll need to construct our timeline_variables array so that each object inside it contains all those labels, but with proper randomization:\nlet stims = [\n  {\n    image_type: \"face\", \n    old_image_src: \"images/faces/face_1.jpg\",\n    new_image_src: \"images/faces/face_2.jpg\"\n    image_orientation: \"up\", \n    correct_location: \"left\" \n  },\n  \n  {\n    image_type: \"face\",\n    old_image_src: \"images/faces/face_3.jpg\",\n    new_image_src: \"images/faces/face_4.jpg\"\n    image_orientation: \"down\", \n    correct_location: \"left\" \n  },\n\n]\nAlthough we have two phases: study phase and a test phase, we can actually use the same timeline variables array for both since it contains all the info we need for both trials.\nBefore we put the code into our exp.js file, I’m going to walk through, step-by-step how I randomized the image assignments.\n1. Setup our variables\nFirst, we need our list of images. Since the filenames are numbered (e.g., faces_1, faces_2, faces_3 …), we can just use the numbers 1 to 50 randomly select images. We’ll still need to make our list of numbers though.\nI’ll also create an empty array for the timeline variables called stims\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n2. Randomly select 20 images split into conditions\nNow that I have a list of numbers from 1 to 50, I can randomize the order and select out 5 per condition. Using slice and selecting 0-5, 6-10, etc. will make sure I use each number only once.\n\n\n\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n\n// Face Images\n// 1. Randomize the order\nface_numbers = jsPsych.randomization.shuffle(face_numbers)\n\n// 2. Split into four sets\nlet old_faces_down = face_numbers.slice(0,5)\nlet old_faces_up = face_numbers.slice(5,10)\nlet new_faces_down = face_numbers.slice(10,15)\nlet new_faces_up = face_numbers.slice(15,20)\n3. Pair the old/new images together and add to an array\nNow we loop through the old_faces_down and old_faces_up arrays and create an object that has an old image and a new image with proper labels.\nI also need the image source location with the filename. I’m constructing that from the number and pasting the text together: \"images/faces/face_\" + old_faces_up[i] + \".jpg\".\nRemember that old_faces_[0] will be whatever number is in the first position of the array, old_faces_[1] will be whatever number is in the second position and so on. Since we randomize the order it can be any number from 1 to 50.\n\n\n\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n\n// Face Images\n// 1. Randomize the order\nface_numbers = jsPsych.randomization.shuffle(face_numbers)\n\n// 2. Split into four sets\nlet old_faces_down = face_numbers.slice(0,5)\nlet old_faces_up = face_numbers.slice(5,10)\nlet new_faces_down = face_numbers.slice(10,15)\nlet new_faces_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_faces_up.length; i++) {\n  stims.push(\n      {\n        old_image_number: old_faces_up[i],\n        old_image_src: \"images/faces/face_\" + old_faces_up[i] + \".jpg\",\n        new_image_number:  new_faces_up[i],\n        new_image_src: \"images/faces/face_\" + new_faces_up[i] + \".jpg\",\n        image_type: \"face\",\n        image_orientation: \"up\"\n      }\n  );\n}\n  \nfor (let i = 0; i &lt; old_faces_down.length; i++) {\n  stims.push(\n      {\n        old_image_number: old_faces_down[i],\n        old_image_src: \"images/faces/face_\" + old_faces_down[i] + \".jpg\",\n        new_image_number:  new_faces_down[i],\n        new_image_src: \"images/faces/face_\" + new_faces_down[i] + \".jpg\",\n        image_type: \"face\",\n        image_orientation: \"down\"\n      }\n  );\n}\n4. Randomly select left or right as the old image location\nFinally, I need to set the test locations for the images. I’m just going to randomly select the old image location using a jsPsych function.\n\n\n\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n\n// Face Images\n// 1. Randomize the order\nface_numbers = jsPsych.randomization.shuffle(face_numbers)\n\n// 2. Split into four sets\nlet old_faces_down = face_numbers.slice(0,5)\nlet old_faces_up = face_numbers.slice(5,10)\nlet new_faces_down = face_numbers.slice(10,15)\nlet new_faces_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_faces_up.length; i++) {\n  stims.push(\n      {\n        old_image_number: old_faces_up[i],\n        old_image_src: \"images/faces/face_\" + old_faces_up[i] + \".jpg\",\n        new_image_number:  new_faces_up[i],\n        new_image_src: \"images/faces/face_\" + new_faces_up[i] + \".jpg\",\n        image_type: \"face\",\n        image_orientation: \"up\",\n        correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n      }\n  );\n}\n  \nfor (let i = 0; i &lt; old_faces_down.length; i++) {\n  stims.push(\n      {\n        old_image_number: old_faces_down[i],\n        old_image_src: \"images/faces/face_\" + old_faces_down[i] + \".jpg\",\n        new_image_number:  new_faces_down[i],\n        new_image_src: \"images/faces/face_\" + new_faces_down[i] + \".jpg\",\n        image_type: \"face\",\n        image_orientation: \"down\",\n        correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n      }\n  );\n}\n5. Add to our code\nNow let’s add that code to our experiment and replace our timeline_variables with stims.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Face Perception&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n\n// Face Images\n// 1. Randomize the order\nface_numbers = jsPsych.randomization.shuffle(face_numbers)\n\n// 2. Split into four sets\nlet old_faces_down = face_numbers.slice(0,5)\nlet old_faces_up = face_numbers.slice(5,10)\nlet new_faces_down = face_numbers.slice(10,15)\nlet new_faces_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_faces_up.length; i++) {\n  stims.push(\n    {\n    old_image_number: old_faces_up[i],\n    old_image_src: \"images/faces/face_\" + old_faces_up[i] + \".jpg\",\n    new_image_number:  new_faces_up[i],\n    new_image_src: \"images/faces/face_\" + new_faces_up[i] + \".jpg\",\n    image_type: \"face\",\n    image_orientation: \"up\",\n    correct_location: jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n    }\n  );\n}\n\nfor (let i = 0; i &lt; old_faces_down.length; i++) {\n  stims.push({\n    old_image_number: old_faces_down[i],\n    old_image_src: \"images/faces/face_\" + old_faces_down[i] + \".jpg\",\n    new_image_number:  new_faces_down[i],\n    new_image_src: \"images/faces/face_\" + new_faces_down[i] + \".jpg\",\n    image_type: \"face\",\n    image_orientation: \"down\",\n    correct_location: jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n  });\n}\n\n// ============================================\n// Study Phase\n// ============================================\n\nlet study_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    \"Welcome to the study phase.\",\n    \"You will see a series of faces and houses.\",\n    \"Please pay attention to each image and try to memorize them.\",\n    \"Press Next to begin.\"\n  ],\n  show_clickable_nav: true,\n  key_forward: \" \"\n};\n\nlet study_trials = {\n  timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 500\n      },\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n            return `&lt;img class=\"base_image ${jsPsych.evaluateTimelineVariable(\"image_orientation\")}\"   src=${jsPsych.evaluateTimelineVariable(\"old_image_src\")} &gt;`\n        },\n        choices: \"NO_KEYS\",\n        trial_duration: 1000\n      }\n  ],\n  timeline_variables: stims,\n  randomize_order: true\n}\n\nlet study_phase = {\n    timeline: [\n      study_instructions,\n      study_trials\n    ]\n}\n\n// ============================================\n// Test Phase\n// ============================================\n\nlet test_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n      \"That completes the study phase. You will now complete the memory test phase\",\n      \"You will see two images side-by-side.\",\n      \"One image is from the study phase (OLD) and one is new (NEW).\",\n      \"Your task is to identify the OLD image by clicking either the Left Image or Right Image button.\",\n      \"Press NEXT to begin.\"\n    ],\n    show_clickable_nav: true\n  };\n\nlet test_trials =  {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: function() {\n        let old_src = jsPsych.evaluateTimelineVariable(\"old_image_src\");\n        let new_src = jsPsych.evaluateTimelineVariable(\"new_image_src\");\n        let image_orientation = jsPsych.evaluateTimelineVariable(\"image_orientation\");\n        let old_location =  jsPsych.evaluateTimelineVariable(\"correct_location\");\n\n        let output\n        \n        if(old_location == \"left\"){\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n          &lt;/div&gt;`\n        } else {\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n          &lt;/div&gt;`\n        }\n\n        return output\n      },\n      prompt: \"Which image is an OLD (studied) image?\",\n      choices: [\"Left Image\", \"Right Image\"]\n    }\n  ],\n  timeline_variables: stims,\n  randomize_order: true\n};\n\nlet test_phase = {\n    timeline: [\n      test_instructions,\n      test_trials\n    ]\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"faceInversion_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  study_phase,\n  test_phase,\n  saveData\n]); \n\n\n \n  .base_image {\n    max-width: 250px;\n    max-height: 250px;\n    filter: grayscale(100%);\n  }\n  \n  .up {\n    transform: rotate(0deg);\n  }\n  \n  .down {\n    transform: rotate(180deg);\n  }\n \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n24.2.5 Repeat the randomization for house images\nWe can copy-paste our face code to repeat it for the house images. In fact, everything stays exactly the same we just replace ‘face’ with ‘house’! And since the code adds objects to our stims array, it will just add the list of randomized house images to the list of face images.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Face Perception&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n\n// Face Images\n// 1. Randomize the order\nface_numbers = jsPsych.randomization.shuffle(face_numbers)\n\n// 2. Split into four sets\nlet old_faces_down = face_numbers.slice(0,5)\nlet old_faces_up = face_numbers.slice(5,10)\nlet new_faces_down = face_numbers.slice(10,15)\nlet new_faces_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_faces_up.length; i++) {\n  stims.push(\n    {\n    old_image_number: old_faces_up[i],\n    old_image_src: \"images/faces/face_\" + old_faces_up[i] + \".jpg\",\n    new_image_number:  new_faces_up[i],\n    new_image_src: \"images/faces/face_\" + new_faces_up[i] + \".jpg\",\n    image_type: \"face\",\n    image_orientation: \"up\",\n    correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n    }\n  );\n}\n\nfor (let i = 0; i &lt; old_faces_down.length; i++) {\n  stims.push({\n    old_image_number: old_faces_down[i],\n    old_image_src: \"images/faces/face_\" + old_faces_down[i] + \".jpg\",\n    new_image_number:  new_faces_down[i],\n    new_image_src: \"images/faces/face_\" + new_faces_down[i] + \".jpg\",\n    image_type: \"face\",\n    image_orientation: \"down\",\n    correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n  });\n}\n\n// House Images\n// 1. randomize number order\nhouse_numbers = jsPsych.randomization.shuffle(house_numbers)\n\n// 2. split into four sets\nlet old_houses_down = face_numbers.slice(0,5)\nlet old_houses_up = face_numbers.slice(5,10)\nlet new_houses_down = face_numbers.slice(10,15)\nlet new_houses_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_houses_up.length; i++) {\n  stims.push(\n    {\n      old_image_number: old_houses_up[i],\n      old_image_src: \"images/houses/house_\" + old_houses_up[i] + \".jpg\",\n      new_image_number:  new_houses_up[i],\n      new_image_src: \"images/houses/house_\" + new_houses_up[i] + \".jpg\",\n      image_type: \"house\",\n      image_orientation: \"up\",\n      correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n    }\n  );\n}\n\nfor (let i = 0; i &lt; old_houses_up.length; i++) {\n  stims.push(\n    {\n      old_image_number: old_houses_up[i],\n      old_image_src: \"images/houses/house_\" + old_houses_up[i] + \".jpg\",\n      new_image_number:  new_houses_up[i],\n      new_image_src: \"images/houses/house_\" + new_houses_up[i] + \".jpg\",\n      image_type: \"house\",\n      image_orientation: \"down\",\n      correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n    }\n  );\n}\n\n// ============================================\n// Study Phase\n// ============================================\n\nlet study_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    \"Welcome to the study phase.\",\n    \"You will see a series of faces and houses.\",\n    \"Please pay attention to each image and try to memorize them.\",\n    \"Press Next to begin.\"\n  ],\n  show_clickable_nav: true,\n  key_forward: \" \"\n};\n\nlet study_trials = {\n  timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 500\n      },\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n            return `&lt;img class=\"base_image ${jsPsych.evaluateTimelineVariable(\"image_orientation\")}\"   src=${jsPsych.evaluateTimelineVariable(\"old_image_src\")} &gt;`\n        },\n        choices: \"NO_KEYS\",\n        trial_duration: 1000\n      }\n  ],\n  timeline_variables: stims,\n  randomize_order: true\n}\n\nlet study_phase = {\n    timeline: [\n      study_instructions,\n      study_trials\n    ]\n}\n\n// ============================================\n// Test Phase\n// ============================================\n\nlet test_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n      \"That completes the study phase. You will now complete the memory test phase\",\n      \"You will see two images side-by-side.\",\n      \"One image is from the study phase (OLD) and one is new (NEW).\",\n      \"Your task is to identify the OLD image by clicking either the Left Image or Right Image button.\",\n      \"Press NEXT to begin.\"\n    ],\n    show_clickable_nav: true\n  };\n\nlet test_trials =  {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: function() {\n        let old_src = jsPsych.evaluateTimelineVariable(\"old_image_src\");\n        let new_src = jsPsych.evaluateTimelineVariable(\"new_image_src\");\n        let image_orientation = jsPsych.evaluateTimelineVariable(\"image_orientation\");\n        let old_location =  jsPsych.evaluateTimelineVariable(\"correct_location\");\n\n        let output\n        \n        if(old_location == \"left\"){\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n          &lt;/div&gt;`\n        } else {\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n          &lt;/div&gt;`\n        }\n\n        return output\n      },\n      prompt: \"Which image is an OLD (studied) image?\",\n      choices: [\"Left Image\", \"Right Image\"]\n    }\n  ],\n  timeline_variables: stims,\n  randomize_order: true\n};\n\nlet test_phase = {\n    timeline: [\n      test_instructions,\n      test_trials\n    ]\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"faceInversion_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  study_phase,\n  test_phase,\n  saveData\n]); \n\n\n \n  .base_image {\n    max-width: 250px;\n    max-height: 250px;\n    filter: grayscale(100%);\n  }\n  \n  .up {\n    transform: rotate(0deg);\n  }\n  \n  .down {\n    transform: rotate(180deg);\n  }\n \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh\n\n\n\n\n\n\n\n\n\n24.2.6 Add Preload\nFinally, we’ll need to preload our images. We’ll also do this in a programmatic way, looping through our stims array and copying the image locations to a new array. That way we’re only preloading the images we’re using and not any of the other 50 images.\n\n\n\n\nindex.htmlexp.jsstyle.cssResult\n\n\n &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lab 10: Face Perception&lt;/title&gt;\n    &lt;!-- jsPsych --&gt;\n    &lt;script src=\"jspsych/jspsych.js\"&gt;&lt;/script&gt;\n    &lt;link href=\"jspsych/jspsych.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    \n    &lt;!-- jPsych plugins --&gt;\n    &lt;script src=\"jspsych/plugin-instructions.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-preload.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-keyboard-response.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"jspsych/plugin-html-button-response.js\"&gt;&lt;/script&gt;\n\n    &lt;!-- custom CSS --&gt;\n    &lt;link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;!-- custom JS --&gt;\n  &lt;script src=\"exp.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n \n\n\n \n// ============================================\n// Initiate jsPsych\n// ============================================\n\nconst jsPsych = initJsPsych(); \n\n// ============================================\n// Welcome\n// ============================================\n\nlet welcome = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: \"Welcome to the experiment! Press the space bar to begin.\",\n  choices: \" \"\n}\n\n// ============================================\n// Select & Assign Images\n// ============================================\n\n// the images are numbered 1 to 50 (e.g., faces_34.jpg)\n// create a list of numbers 1 to 50\nlet face_numbers = []\nlet house_numbers = []\nfor (let i = 1; i &lt;= 50; i++) {\n  face_numbers.push(i);\n  house_numbers.push(i)\n}\n\n// variable for our timeline_variables array\nlet stims = []\n\n// Face Images\n// 1. Randomize the order\nface_numbers = jsPsych.randomization.shuffle(face_numbers)\n\n// 2. Split into four sets\nlet old_faces_down = face_numbers.slice(0,5)\nlet old_faces_up = face_numbers.slice(5,10)\nlet new_faces_down = face_numbers.slice(10,15)\nlet new_faces_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_faces_up.length; i++) {\n  stims.push(\n    {\n    old_image_number: old_faces_up[i],\n    old_image_src: \"images/faces/face_\" + old_faces_up[i] + \".jpg\",\n    new_image_number:  new_faces_up[i],\n    new_image_src: \"images/faces/face_\" + new_faces_up[i] + \".jpg\",\n    image_type: \"face\",\n    image_orientation: \"up\",\n    correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n    }\n  );\n}\n\nfor (let i = 0; i &lt; old_faces_down.length; i++) {\n  stims.push({\n    old_image_number: old_faces_down[i],\n    old_image_src: \"images/faces/face_\" + old_faces_down[i] + \".jpg\",\n    new_image_number:  new_faces_down[i],\n    new_image_src: \"images/faces/face_\" + new_faces_down[i] + \".jpg\",\n    image_type: \"face\",\n    image_orientation: \"down\",\n    correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n  });\n}\n\n// House Images\n// 1. randomize number order\nhouse_numbers = jsPsych.randomization.shuffle(house_numbers)\n\n// 2. split into four sets\nlet old_houses_down = face_numbers.slice(0,5)\nlet old_houses_up = face_numbers.slice(5,10)\nlet new_houses_down = face_numbers.slice(10,15)\nlet new_houses_up = face_numbers.slice(15,20)\n\n// 3. Create object with image pair and add to stims\nfor (let i = 0; i &lt; old_houses_up.length; i++) {\n  stims.push(\n    {\n      old_image_number: old_houses_up[i],\n      old_image_src: \"images/houses/house_\" + old_houses_up[i] + \".jpg\",\n      new_image_number:  new_houses_up[i],\n      new_image_src: \"images/houses/house_\" + new_houses_up[i] + \".jpg\",\n      image_type: \"house\",\n      image_orientation: \"up\",\n      correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n    }\n  );\n}\n\nfor (let i = 0; i &lt; old_houses_down.length; i++) {\n  stims.push({\n    old_image_number: old_houses_down[i],\n    old_image_src: \"images/houses/house_\" + old_houses_down[i] + \".jpg\",\n    new_image_number:  new_houses_down[i],\n    new_image_src: \"images/houses/house_\" + new_houses_down[i] + \".jpg\",\n    image_type: \"house\",\n    image_orientation: \"down\",\n    correct_location:    jsPsych.randomization.sampleWithoutReplacement([\"left\", \"right\"], 1)[0]\n  });\n}\n\n// ============================================\n// Preload\n// ============================================\n\n// variable for list of images to preload\nlet image_list = []\n\n// add only the images we are using from stims\nfor(let i = 0; i &lt; stims.length; i++){\n  image_list.push(stims[i].old_image_src)\n  image_list.push(stims[i].new_image_src)\n}\n\nlet preload = {\n  type: jsPsychPreload,\n  images: image_list,\n  show_progress_bar: true,\n  continue_after_error: false\n}\n\n// ============================================\n// Study Phase\n// ============================================\n\nlet study_instructions = {\n  type: jsPsychInstructions,\n  pages: [\n    \"Welcome to the study phase.\",\n    \"You will see a series of faces and houses.\",\n    \"Please pay attention to each image and try to memorize them.\",\n    \"Press Next to begin.\"\n  ],\n  show_clickable_nav: true,\n  key_forward: \" \"\n};\n\n\nlet study_trials = {\n  timeline: [\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n        choices: \"NO_KEYS\",\n        trial_duration: 500\n      },\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n            return `&lt;img class=\"base_image ${jsPsych.evaluateTimelineVariable(\"image_orientation\")}\"   src=${jsPsych.evaluateTimelineVariable(\"old_image_src\")} &gt;`\n        },\n        choices: \"NO_KEYS\",\n        trial_duration: 1000\n      }\n  ],\n  timeline_variables: stims,\n  randomize_order: true\n}\n\nlet study_phase = {\n    timeline: [\n      study_instructions,\n      study_trials\n    ]\n}\n\n// ============================================\n// Test Phase\n// ============================================\n\nlet test_instructions = {\n    type: jsPsychInstructions,\n    pages: [\n      \"That completes the study phase. You will now complete the memory test phase\",\n      \"You will see two images side-by-side.\",\n      \"One image is from the study phase (OLD) and one is new (NEW).\",\n      \"Your task is to identify the OLD image by clicking either the Left Image or Right Image button.\",\n      \"Press NEXT to begin.\"\n    ],\n    show_clickable_nav: true\n  };\n\n\nlet test_trials =  {\n  timeline: [\n    {\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `&lt;p style=\"font-size: 60px;\"&gt;+&lt;/p&gt;`,\n      choices: \"NO_KEYS\",\n      trial_duration: 500\n    },\n    {\n      type: jsPsychHtmlButtonResponse,\n      stimulus: function() {\n        let old_src = jsPsych.evaluateTimelineVariable(\"old_image_src\");\n        let new_src = jsPsych.evaluateTimelineVariable(\"new_image_src\");\n        let image_orientation = jsPsych.evaluateTimelineVariable(\"image_orientation\");\n        let old_location =  jsPsych.evaluateTimelineVariable(\"correct_location\");\n\n        let output\n        \n        if(old_location == \"left\"){\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n          &lt;/div&gt;`\n        } else {\n          output = `&lt;div style=\"display: flex; justify-content: center; gap: 50px;\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${new_src}\"&gt;\n           &lt;img class=\"base_image ${image_orientation}\" src=\"${old_src}\"&gt;\n          &lt;/div&gt;`\n        }\n\n        return output\n      },\n      prompt: \"Which image is an OLD (studied) image?\",\n      choices: [\"Left Image\", \"Right Image\"]\n    }\n  ],\n  timeline_variables: stims,\n  randomize_order: true\n};\n\n\nlet test_phase = {\n    timeline: [\n      test_instructions,\n      test_trials\n    ]\n}\n\n// ============================================\n// Savd Data Trial\n// ============================================\n\nconst saveData = {\n  type: jsPsychHtmlKeyboardResponse,\n  stimulus: `\n    &lt;div style=\"text-align: center;\"&gt;\n      &lt;p&gt;Experiment complete!&lt;/p&gt;\n      &lt;p&gt;Click the button below to save your data locally:&lt;/p&gt;\n      &lt;button id=\"save-btn\" style=\"padding: 10px 20px; font-size: 16px; cursor: pointer;\"&gt;\n        Click here to save the data locally\n      &lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  choices: \"NO_KEYS\",\n  trial_duration: null,\n  on_load: function() {\n    document.getElementById(\"save-btn\").addEventListener(\"click\", function() {\n      jsPsych.data.get().localSave(\"csv\", \"faceInversion_data.csv\");\n    });\n  },\n  data: {\n    phase: \"save data trial\"\n  }\n};\n\n// ============================================\n// Run jsPsych \n// ============================================\n\njsPsych.run([\n  welcome,\n  preload,\n  study_phase,\n  test_phase,\n  saveData\n]); \n\n\n \n  .base_image {\n    max-width: 250px;\n    max-height: 250px;\n    filter: grayscale(100%);\n  }\n  \n  .up {\n    transform: rotate(0deg);\n  }\n  \n  .down {\n    transform: rotate(180deg);\n  }\n \n\n\n\n\n\nLive JsPsych Demo\nClick inside the demo to activate demo\n\n\nOpen in New Tab\nRefresh",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Lab 11: Face Perception</span>"
    ]
  },
  {
    "objectID": "24-L11.html#stretch-goals",
    "href": "24-L11.html#stretch-goals",
    "title": "24  Lab 11: Face Perception",
    "section": "24.3 Stretch Goals",
    "text": "24.3 Stretch Goals\n\n24.3.1 Add data labels\nOur experiment is missing proper data labels. Let’s make sure we’ve added:\n\nall of our timeline_variables\nphase: instructions/study/test/save_data\ntrial_part: fixation/image\n\n\n\n24.3.2 Add cat faces\nLet’s add another condition to our experiment: cat faces! Add another list of cat faces, randomly selected and paired together just like the face and house images. The cat faces are in a folder called images/cats/ and follow the same numbering scheme.",
    "crumbs": [
      "Unit 10: Randomization",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Lab 11: Face Perception</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html",
    "href": "A01_JS_Builtins.html",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "",
    "text": "A.1 Math Functions\nThis appendix provides a quick reference for JavaScript’s built-in functions that are commonly used in psychology experiments. Each function includes a definition and example usage.\nJavaScript’s Math object provides mathematical constants and functions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html#math-functions",
    "href": "A01_JS_Builtins.html#math-functions",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "",
    "text": "A.1.1 Math.round\nMath.round(x) - Rounds a number to the nearest integer\nMath.round(4.7);  // 5\nMath.round(4.3);  // 4\n\n\nA.1.2 Math.floor\nMath.floor(x) - Rounds down to the nearest integer\nMath.floor(4.9);  // 4\nMath.floor(-4.1); // -5\n\n\nA.1.3 Math.ceil\nMath.ceil(x) - Rounds up to the nearest integer\nMath.ceil(4.1);   // 5\nMath.ceil(-4.9);  // -4\n\n\nA.1.4 Math.abs\nMath.abs(x) - Returns the absolute value\nMath.abs(-5);     // 5\nMath.abs(3);      // 3\n\n\nA.1.5 Math.random\nMath.random() - Returns a random number between 0 (inclusive) and 1 (exclusive)\nMath.random();                           // 0.7834592847\nMath.floor(Math.random() * 10);         // Random integer 0-9\nMath.floor(Math.random() * 5) + 1;      // Random integer 1-5\n\n\nA.1.6 Math.min\nMath.min(...values) - Returns the smallest value\nMath.min(1, 3, 2);        // 1\nMath.min(...[4, 2, 8]);   // 2 (using spread operator with array)\n\n\nA.1.7 Math.max\nMath.max(...values) - Returns the largest value\nMath.max(1, 3, 2);        // 3\nMath.max(...[4, 2, 8]);   // 8",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html#date-functions",
    "href": "A01_JS_Builtins.html#date-functions",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "A.2 Date Functions",
    "text": "A.2 Date Functions\nJavaScript’s Date object handles dates and times.\n\nA.2.1 New Date\nnew Date() - Creates a new date object with current date/time\nconst now = new Date();\nconsole.log(now); // Current date and time\nnew Date(year, month, day) - Creates a specific date (month is 0-indexed)\nconst specificDate = new Date(2025, 0, 15); // January 15, 2025\n\n\nA.2.2 Date.now\nDate.now() - Returns current timestamp in milliseconds\nconst timestamp = Date.now(); // 1691234567890",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html#string-functions",
    "href": "A01_JS_Builtins.html#string-functions",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "A.3 String Functions",
    "text": "A.3 String Functions\n\nA.3.1 length\nlength - Property that returns string length\n\"hello\".length; // 5\n\n\nA.3.2 toUpperCase\ntoUpperCase() - Converts to uppercase\n\"hello\".toUpperCase(); // \"HELLO\"\n\n\nA.3.3 toLowerCase\ntoLowerCase() - Converts to lowercase\n\"HELLO\".toLowerCase(); // \"hello\"\n\n\nA.3.4 charAt\ncharAt(index) - Returns character at specified index\n\"hello\".charAt(1); // \"e\"\n\n\nA.3.5 indexOf\nindexOf(searchString) - Returns first index of substring (-1 if not found)\n\"hello world\".indexOf(\"world\"); // 6\n\"hello world\".indexOf(\"xyz\");   // -1\n\n\nA.3.6 slice\nslice(start, end) - Extracts part of string\n\"hello world\".slice(0, 5);  // \"hello\"\n\"hello world\".slice(6);     // \"world\"\n\n\nA.3.7 replace\nreplace(searchValue, replaceValue) - Replaces first occurrence\n\"hello world\".replace(\"world\", \"there\"); // \"hello there\"\n\n\nA.3.8 replaceAll\nreplaceAll(searchValue, replaceValue) - Replaces all occurrences\n\"hello hello\".replaceAll(\"hello\", \"hi\"); // \"hi hi\"\n\n\nA.3.9 split\nsplit(separator) - Splits string into array\n\"red,blue,green\".split(\",\");     // [\"red\", \"blue\", \"green\"]\n\"hello world\".split(\" \");        // [\"hello\", \"world\"]\n\n\nA.3.10 trim\ntrim() - Removes whitespace from both ends\n\"  hello world  \".trim(); // \"hello world\"\n\n\nA.3.11 includes\nincludes(searchString) - Tests if string contains substring\n\"hello world\".includes(\"world\"); // true\n\"hello world\".includes(\"xyz\");   // false\n\n\nA.3.12 startsWith\nstartsWith(searchString) - Tests if string starts with substring\n\"hello world\".startsWith(\"hello\"); // true\n\n\nA.3.13 endsWith\nendsWith(searchString) - Tests if string ends with substring\n\"hello world\".endsWith(\"world\"); // true",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html#sec-array-functions",
    "href": "A01_JS_Builtins.html#sec-array-functions",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "A.4 Array Functions",
    "text": "A.4 Array Functions\n\nA.4.1 length\nlength - Property that returns array length\n[1, 2, 3].length; // 3\n\n\nA.4.2 push\npush(element) - Adds element to end, returns new length\nlet arr = [1, 2];\narr.push(3); // Returns 3, arr is now [1, 2, 3]\n\n\nA.4.3 pop\npop() - Removes and returns last element\nlet arr = [1, 2, 3];\narr.pop(); // Returns 3, arr is now [1, 2]\n\n\nA.4.4 unshift\nunshift(element) - Adds element to beginning\nlet arr = [2, 3];\narr.unshift(1); // arr is now [1, 2, 3]\n\n\nA.4.5 shift\nshift() - Removes and returns first element\nlet arr = [1, 2, 3];\narr.shift(); // Returns 1, arr is now [2, 3]\n\n\nA.4.6 indexOf\nindexOf(searchElement) - Returns first index of element (-1 if not found)\n[1, 2, 3, 2].indexOf(2); // 1\n[1, 2, 3].indexOf(4);    // -1\n\n\nA.4.7 includes\nincludes(searchElement) - Tests if array contains element\n[1, 2, 3].includes(2); // true\n[1, 2, 3].includes(4); // false\n\n\nA.4.8 find\nfind(callback) - Returns first element that matches condition\nlet participants = [{id: 1, age: 22}, {id: 2, age: 19}];\nparticipants.find(p =&gt; p.age &gt; 20); // {id: 1, age: 22}\n\n\nA.4.9 findIndex\nfindIndex(callback) - Returns index of first element that matches condition\n[10, 20, 30].findIndex(x =&gt; x &gt; 15); // 1\n\n\nA.4.10 slice\nslice(start, end) - Returns shallow copy of portion of array\n[1, 2, 3, 4, 5].slice(1, 4); // [2, 3, 4]\n[1, 2, 3, 4, 5].slice(2);    // [3, 4, 5]\n\n\nA.4.11 splice\nsplice(start, deleteCount, ...items) - Changes array by removing/adding elements\nlet arr = [1, 2, 3, 4];\narr.splice(1, 2, 'a', 'b'); // Removes 2 elements at index 1, adds 'a', 'b'\n// arr is now [1, 'a', 'b', 4]\n\n\nA.4.12 concat\nconcat(array) - Combines arrays\n[1, 2].concat([3, 4]); // [1, 2, 3, 4]\n\n\nA.4.13 join\njoin(separator) - Joins array elements into string\n[1, 2, 3].join(\", \"); // \"1, 2, 3\"\n['red', 'blue'].join(\" and \"); // \"red and blue\"\n\n\nA.4.14 reverse\nreverse() - Reverses array in place\nlet arr = [1, 2, 3];\narr.reverse(); // arr is now [3, 2, 1]\n\n\nA.4.15 sort\nsort(compareFunction) - Sorts array in place\n[3, 1, 2].sort(); // [1, 2, 3]\n['banana', 'apple', 'cherry'].sort(); // ['apple', 'banana', 'cherry']\n\n// Custom sort for numbers\n[10, 2, 30].sort((a, b) =&gt; a - b); // [2, 10, 30]\n\n\nA.4.16 forEach\nforEach(callback) Executes function for each element\n[1, 2, 3].forEach(x =&gt; console.log(x * 2)); // Prints 2, 4, 6\n\n\nA.4.17 map\nmap(callback) - Creates new array with results of calling function on each element\n[1, 2, 3].map(x =&gt; x * 2); // [2, 4, 6]\n\n\nA.4.18 filter\nfilter(callback) - Creates new array with elements that pass test\n[1, 2, 3, 4].filter(x =&gt; x &gt; 2); // [3, 4]\n\n\nA.4.19 reduce\nreduce(callback, initialValue) - Reduces array to single value\n[1, 2, 3, 4].reduce((sum, x) =&gt; sum + x, 0); // 10\n\n\nA.4.20 some\nsome(callback) - Tests if at least one element passes test\n[1, 2, 3].some(x =&gt; x &gt; 2); // true\n\n\nA.4.21 every\nevery(callback) - Tests if all elements pass test\n[1, 2, 3].every(x =&gt; x &gt; 0); // true\n[1, 2, 3].every(x =&gt; x &gt; 2); // false",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html#number-functions",
    "href": "A01_JS_Builtins.html#number-functions",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "A.5 Number Functions",
    "text": "A.5 Number Functions\n\nA.5.1 parseInt\nparseInt(string, radix) - Parses string and returns integer\nparseInt(\"123\");     // 123\nparseInt(\"123.45\");  // 123\nparseInt(\"123abc\");  // 123\n\n\nA.5.2 parseFloat\nparseFloat(string) - Parses string and returns floating point number\nparseFloat(\"123.45\");    // 123.45\nparseFloat(\"123.45abc\"); // 123.45\n\n\nA.5.3 isNaN\nisNaN(value) - Tests if value is NaN (Not a Number)\nisNaN(123);     // false\nisNaN(\"abc\");   // true\nisNaN(\"123\");   // false\n\n\nA.5.4 Number\nNumber(value) - Converts value to number\nNumber(\"123\");    // 123\nNumber(\"123.45\"); // 123.45\nNumber(true);     // 1\nNumber(false);    // 0",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  },
  {
    "objectID": "A01_JS_Builtins.html#object-functions",
    "href": "A01_JS_Builtins.html#object-functions",
    "title": "Appendix A — JavaScript Built-in Functions",
    "section": "A.6 Object Functions",
    "text": "A.6 Object Functions\n\nA.6.1 keys\nObject.keys(obj) - Returns array of object’s property names\nconst obj = {a: 1, b: 2, c: 3};\nObject.keys(obj); // [\"a\", \"b\", \"c\"]\n\n\nA.6.2 values\nObject.values(obj) - Returns array of object’s property values\nconst obj = {a: 1, b: 2, c: 3};\nObject.values(obj); // [1, 2, 3]\n\n\nA.6.3 entries\nObject.entries(obj) - Returns array of [key, value] pairs\nconst obj = {a: 1, b: 2};\nObject.entries(obj); // [[\"a\", 1], [\"b\", 2]]",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>JavaScript Built-in Functions</span>"
    ]
  }
]